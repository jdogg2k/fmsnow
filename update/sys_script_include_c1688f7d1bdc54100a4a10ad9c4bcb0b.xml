<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_g_irm_fms.FMSUtilities</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description>Utility class that will contain a group of functions to use in Service Portal to extract data for FMS</description>
        <name>FMSUtilities</name>
        <script><![CDATA[var FMSUtilities = Class.create();
FMSUtilities.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    getScalar: function(table, column, encQry, orderBy) { // get single value
        var rec = new GlideRecord(table);
        rec.addEncodedQuery(encQry);
        if (orderBy) {
            rec.orderByDesc(orderBy);
        }
        rec.setLimit(1);
        rec.query();
        if (rec.hasNext()) {
            rec.next();
            return rec.getElement(column).toString();
        } else
            return null;
    },

    getFilteredOrgs: function() {
        // build new response xml element for result
	//gs.info("include ran");
        var orgHelper = new OrgHierarchy();
        var session = gs.getSession();
        var selOrg = session.getClientData('org_id');

        if (selOrg == undefined)
            selOrg = orgHelper.getUserOrgs();

        return selOrg;
    },


    convertToObject: function(obj, str) {
        str = str.split(".");
        for (var i = 0; i < str.length; i++)
            obj = obj[str[i]];
        return obj;
    },

    getFields: function(gr) {
        var elements = gr.getElements();
        var flds = [];
        for (var i = 0; i < elements.length; i++) {
            var element = elements[i];
            flds.push(element.getName());
        }
        return flds;
    },

    getTableData: function(table, encQry, returnSysID, dotInclude) {

        /* JLR - This function will return all non-sys values of any table in FMS - may want to modify so it can accept an optional encoded query
        setting returnSysID to true will force the function to return the sys_id along with all of the table fields*/
        var newArray = [];

        //build field arrays
        var regFields = [];
        var currencyFields = [],
            booleanFields = [];
        var dotWalkFields = [];
        var dictionaryQ = new GlideRecord("sys_dictionary");
        dictionaryQ.addEncodedQuery("internal_type!=reference^elementNOT LIKEsys_^internal_type!=collection^choiceISEMPTY^name=" + table);
        dictionaryQ.query();
        while (dictionaryQ.next()) {
            if (dictionaryQ.getValue("internal_type") == "boolean") {
                booleanFields.push(dictionaryQ.getValue("element"));
            } else if (dictionaryQ.getValue("internal_type") == "currency") {
                currencyFields.push(dictionaryQ.getValue("element"));
            } else {
                var regObj = {};
                regObj.field = dictionaryQ.getValue("element");
                regObj.isInteger = false;

                if (dictionaryQ.getValue("internal_type") == "integer")
                    regObj.isInteger = true;

                regFields.push(regObj);
            }
        }
        var displayFields = [];
        var displayQ = new GlideRecord("sys_dictionary");
        displayQ.addEncodedQuery("name=" + table + "^internal_type=reference^NQname=" + table + "^internal_type=boolean^NQname=" + table + "^choiceIN3,1,2");
        displayQ.query();
        while (displayQ.next()) {
            var dispField = {}
            dispField.field = displayQ.getValue("element");
            dispField.isInteger = ((displayQ.getValue("internal_type") == "integer") || (displayQ.getValue("internal_type") == "boolean"));
            displayFields.push(dispField);
        }



        if (dotInclude !== undefined && dotInclude != false)
            dotWalkFields = dotInclude;

        var tableQuery = new GlideRecord(table);
        if (encQry !== undefined && encQry != '')
            tableQuery.addEncodedQuery(encQry);
        tableQuery.query();
        while (tableQuery.next()) {

            var dataObj = {};

            regFields.forEach(function(obj) {
                var fieldVal = tableQuery.getValue(obj.field);
                if (obj.isInteger)
                    fieldVal = parseInt(tableQuery.getValue(obj.field));
                dataObj[obj.field] = fieldVal;
            })

            displayFields.forEach(function(obj) {
                dataObj[obj.field] = tableQuery.getDisplayValue(obj.field);
                var fieldVal = tableQuery.getValue(obj.field);
                if (obj.isInteger)
                    fieldVal = parseInt(tableQuery.getValue(obj.field));
                dataObj[obj.field + "_rawval"] = fieldVal;
            })

            currencyFields.forEach(function(field) {
                dataObj[field] = parseFloat(tableQuery.getValue(field));
            })
            booleanFields.forEach(function(field) {
                dataObj[field] = tableQuery.getValue(field) == "1";
            });

            var obj = {
                a: {
                    b: 1,
                    c: {
                        d: 3,
                        e: 4
                    },
                    f: 5
                }
            };
            var str = 'a.c.d';
            var val = this.convertToObject(obj, str);

            dotWalkFields.forEach(function(field) {
                var str = field.split(".");
                var tQ = tableQuery;
                for (var i = 0; i < str.length; i++)
                    tQ = tQ[str[i]];

                dataObj[field] = tQ.toString();
            });

            if (returnSysID !== undefined && returnSysID != false)
                dataObj.sys_id = tableQuery.getDisplayValue("sys_id");

            newArray.push(dataObj);
        }

        return newArray;
    },

    getUserTableData: function(table, encQry, returnSysID, dotInclude) {

        /* JLR - This function will return all non-sys values of any table in FMS - may want to modify so it can accept an optional encoded query
        setting returnSysID to true will force the function to return the sys_id along with all of the table fields*/
        var newArray = [];

        //build field arrays
        var regFields = [];
        var currencyFields = [],
            booleanFields = [];
        var dotWalkFields = [];
        var dictionaryQ = new GlideRecord("sys_dictionary");
        dictionaryQ.addEncodedQuery("internal_type!=reference^elementNOT LIKEsys_^internal_type!=collection^name=" + table);
        dictionaryQ.query();
        while (dictionaryQ.next()) {
            if (dictionaryQ.getValue("internal_type") == "boolean") {
                booleanFields.push(dictionaryQ.getValue("element"));
            } else if (dictionaryQ.getValue("internal_type") == "currency") {
                currencyFields.push(dictionaryQ.getValue("element"));
            } else {
                var regObj = {};
                regObj.field = dictionaryQ.getValue("element");
                regObj.isInteger = false;

                if (dictionaryQ.getValue("internal_type") == "integer")
                    regObj.isInteger = true;

                regFields.push(regObj);
            }
        }
        var displayFields = [];
        var displayQ = new GlideRecord("sys_dictionary");
        displayQ.addEncodedQuery("name=" + table + "^internal_type=reference^NQname=" + table + "^internal_type=boolean^NQname=" + table + "^choiceIN3,1,2");
        displayQ.query();
        while (displayQ.next()) {
            var dispField = {}
            dispField.field = displayQ.getValue("element");
            dispField.isInteger = ((displayQ.getValue("internal_type") == "integer") || (displayQ.getValue("internal_type") == "boolean"));
            displayFields.push(dispField);
        }



        if (dotInclude !== undefined && dotInclude != false)
            dotWalkFields = dotInclude;

        var tableQuery = new GlideRecord(table);
        if (encQry !== undefined && encQry != '')
            tableQuery.addEncodedQuery(encQry);
        tableQuery.query();
        while (tableQuery.next()) {

            var dataObj = {};

            regFields.forEach(function(obj) {
                var fieldVal = tableQuery.getValue(obj.field);
                if (obj.isInteger)
                    fieldVal = parseInt(tableQuery.getValue(obj.field));
                dataObj[obj.field] = fieldVal;
            })

            displayFields.forEach(function(obj) {
                dataObj[obj.field] = tableQuery.getDisplayValue(obj.field);
                var fieldVal = tableQuery.getValue(obj.field);
                if (obj.isInteger)
                    fieldVal = parseInt(tableQuery.getValue(obj.field));
                dataObj[obj.field + "_rawval"] = fieldVal;
            })

            currencyFields.forEach(function(field) {
                dataObj[field] = parseFloat(tableQuery.getValue(field));
            })
            booleanFields.forEach(function(field) {
                dataObj[field] = tableQuery.getValue(field) == "1";
            });

            var obj = {
                a: {
                    b: 1,
                    c: {
                        d: 3,
                        e: 4
                    },
                    f: 5
                }
            };
            var str = 'a.c.d';
            var val = this.convertToObject(obj, str);

            dotWalkFields.forEach(function(field) {
                var str = field.split(".");
                var tQ = tableQuery;
                for (var i = 0; i < str.length; i++)
                    tQ = tQ[str[i]];

                dataObj[field] = tQ.toString();
            });

            if (returnSysID !== undefined && returnSysID != false)
                dataObj.sys_id = tableQuery.getDisplayValue("sys_id");

            newArray.push(dataObj);
        }

        return newArray;
    },

    getAllAllocationData: function(table, encQry) {

        /* JLR - This function will return all values for the allocation pools table in FMS and all associated related data */

        var allocateData = this.getTableData(table, encQry, true);
        for (var i = 0; i < allocateData.length; i++) {
            var tObj = allocateData[i];

            tObj.distributions = this.getTableData(FMSConstants.TABLE_ALLOCATION_POOL, "pool_parent_ref=" + tObj.sys_id, true);
            tObj.projectAllocations = this.getTableData(FMSConstants.TABLE_PROJECT_ALLOCATION, "allocation_pool_ref=" + tObj.sys_id, true);
        }
        return allocateData;
    },

    getAllContractData: function(table, encQry) {

        /* JLR - This function will return all values for the contracts table in FMS and all associated related data */

        var contractData = this.getTableData(table, encQry, true);
        for (var i = 0; i < contractData.length; i++) {
            var tObj = contractData[i];
            var cQuery = "contract_ref=" + tObj.sys_id;
            tObj.contractParties = this.getTableData(FMSConstants.TABLE_CONTRACT_PARTY, cQuery, true);
            tObj.contractContracts = this.getTableData(FMSConstants.TABLE_CONTRACT_CONTRACT, cQuery, true);
        }
        return contractData;
    },

    getAllUserData: function(table, encQry) {

        /* JLR - This function will return all values for the contracts table in FMS and all associated related data */

        var userData = this.getUserTableData(table, encQry, true);
        for (var i = 0; i < userData.length; i++) {
            var tObj = userData[i];
            var cQuery = "user=" + tObj.sys_id;
            var cQuery1 = "user_ref=" + tObj.sys_id;
            tObj.userRole = this.getUserTableData(FMSConstants.TABLE_USER_GROUP, cQuery, true);
            tObj.userOrganization = this.getUserTableData(FMSConstants.TABLE_USER_ORGANIZATION, cQuery1, true);
        }
        return userData;
    },

    saveRecord: function(table, payload, updateID) {

        /* JLR - This function will insert or update a record for the specified table based on the payload received.  Pass a sys_id to update or use 'new' for a new record */
        /*test*/
        var mode = "insert";
        if (updateID != "new")
            mode = "update";
        var updatedID = "";

        var gr = new GlideRecord(table);
        if (mode == "insert") {
            gr.initialize();
        } else {
            gr.get(updateID);
        }

        for (var property in payload) {
            gr.setValue(property, payload[property]);
        }

        if (mode == "insert") {
            updatedID = gr.insert();
        } else {
            gr.update();
            updatedID = updateID;
        }

        return updatedID;
    },

    getRecord: function(table, recID) {

        /* JLR - This function will return a single record - used for updating grids client-side */
        var gr = new GlideRecord(table);
        gr.get(recID);

        return gr;

    },

    insertRecord: function(tableName, newRow) {
        /* JLR - This function will insert a new record in the database and return the new sys_id */
        var newGR = new GlideRecord(tableName);
        newGR.initialize();

        var fieldNames = this.getFields(newGR);

        for (var i = 0; i <= fieldNames.length; i++) {
            newGR.setValue(fieldNames[i], newRow[fieldNames[i]]);
        }

        var newID = newGR.insert();

        return newID;
    },

    updateRecord: function(tableName, updatedRow) {
        /* JLR - This function will save any changed values of a record back to the record in the database */
        var returnData = {};

        var currentRow = new GlideRecord(tableName);
        currentRow.addQuery("sys_id", updatedRow.sys_id);
        currentRow.query();
        if (currentRow.next()) {
            var fieldNames = this.getFields(currentRow);

            for (var i = 0; i <= fieldNames.length; i++) {
                var fieldName = fieldNames[i];
                if (fieldName != undefined && !fieldName.startsWith("sys") && !fieldName.endsWith("_display")) { //we're not messing with system or display fields
                    var newValue = updatedRow[fieldNames[i]];

                    if (fieldName.endsWith("_ref"))
                        newValue = updatedRow[fieldNames[i] + "_rawval"];

                    if (currentRow.getValue(fieldName) != newValue && newValue != undefined && newValue != null) {
                        currentRow.setValue(fieldName, newValue);
                    }
                    returnData[fieldName] = currentRow.getValue(fieldName);
                }
            }

            returnData.sys_id = currentRow.getValue("sys_id");

            currentRow.update();
        }

        return returnData;
    },

    deleteRecord: function(table, deleteID) {

        /* JLR - This function will delete a record for the specified table based on the payload received.  Pass a table name and sys_id to delete the record */

        var gridQ = "sys_id=" + deleteID;
        var deleteRec = new GlideRecordSecure(table);
        deleteRec.addEncodedQuery(gridQ);
        deleteRec.deleteMultiple();

    },

    getFiscalYears: function() {

        /* JLR - This function will return the available list of Fiscal Years from the choice table */
        var years = [];
        var yearQ = new GlideRecord("sys_choice");
        yearQ.addEncodedQuery("name=x_g_irm_fms_allocation_pool^element=fy");
        yearQ.query();
        while (yearQ.next()) {
            years.push(yearQ.getValue("value"));
        }

        return years;

    },

    getCurrentFY: function() {

        /* JLR - This function will return the current fiscal year */
        var fiscalyear = "";
        var today = new Date();
        if ((today.getMonth() + 1) >= 10) {
            fiscalyear = (today.getFullYear() + 1);
        } else {
            fiscalyear = today.getFullYear();
        }
        return fiscalyear.toString();

    },




    getUserAuth: function() {

        var auth = {
            roles: {
                "isSysAdmin": gs.hasRole(FMSConstants.ROLE_SYSADMIN),
                "isOrgAdmin": gs.hasRole(FMSConstants.ROLE_ORGADMIN),
                "isAnalyst": gs.hasRole(FMSConstants.ROLE_ANALYST),
                "isContracts": gs.hasRole(FMSConstants.ROLE_CONTRACTS),
                "isReadOnly": gs.hasRole(FMSConstants.ROLE_READONLY),
                "canApprove": gs.hasRole(FMSConstants.ROLE_APPROVE)
            },
            "orgs": new OrgHierarchy().getUserOrgs(),
			"userorg": new OrgHierarchy().getUserOrganization()
        };
        return auth;
    },

    getContractData: function() {
        var contract = this.getParameter('sysparm_contract');
        //gs.info("include con "+contract);
        var gr = new GlideRecord("x_g_irm_fms_contract");
        gr.addQuery('sys_id', contract);
        gr.query();
        if (gr.next()) {
            return gr.parent_piid.getDisplayValue() + "," + gr.parent_piid.vendor_names;


        }

    },
	
	

    //we can continue to add more functions here

    type: 'FMSUtilities'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>RoseJL@state.gov</sys_created_by>
        <sys_created_on>2020-04-21 18:30:12</sys_created_on>
        <sys_id>c1688f7d1bdc54100a4a10ad9c4bcb0b</sys_id>
        <sys_mod_count>191</sys_mod_count>
        <sys_name>FMSUtilities</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sys_script_include_c1688f7d1bdc54100a4a10ad9c4bcb0b</sys_update_name>
        <sys_updated_by>PuriA@state.gov</sys_updated_by>
        <sys_updated_on>2020-08-18 17:57:24</sys_updated_on>
    </sys_script_include>
</record_update>
