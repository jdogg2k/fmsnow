<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_g_irm_fms.FMSFinTran</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>FMSFinTran</name>
        <script><![CDATA[var FMSFinTran = Class.create();
FMSFinTran.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

	allocGrpTable: FMSConstants.TABLE_ALLOCATION_GROUP,
	projAllocTable: FMSConstants.TABLE_PROJECT_ALLOCATION,
	finTranView: FMSConstants.VIEW_FIN_TRAN_JOIN,
	finTranTable: FMSConstants.TABLE_FINANCIAL_TRANSACTION,
	tranItemTable: FMSConstants.TABLE_FINANCIAL_TRANSACTION_ITEM,
	FMSUtility: new x_g_irm_fms.FMSUtilities(),              //helper utility for FMS queries
	
    validateTranGroup: function(current, previous) {
		var isValid = true;
		if (current.tran_status != 'Obligated' || current.getValue('void') == true) return isValid;
		var grp = this.getAllocationGroup(current.allocation_group_ref.sys_id);
		if (grp == null) return true;
		if (grp.getValue('val_tran_fy') == true && (current.fy != previous.fy || previous.tran_status != 'Obligated' || current.getValue('void') != previous.getValue('void'))) 
			isValid = isValid && this.validateTranFY(current.project_ref.sys_id, current.allocation_group_ref.sys_id, current.fy);
		if (grp.getValue('val_tran_allotment') == true  && (current.allotment_ref != previous.allotment_ref || previous.tran_status != 'Obligated' || current.getValue('void') != previous.getValue('void'))) 
			isValid = isValid && this.validateTranAllotment(current.project_ref.sys_id, current.allocation_group_ref.sys_id, current.fy, current.allotment_ref.sys_id);
		if (grp.getValue('val_tran_appropriation') == true  && (current.project_appropriation_ref != previous.project_appropriation_ref || previous.tran_status != 'Obligated' || current.getValue('void') != previous.getValue('void'))) 
			isValid = isValid && this.validateTranAppropriation(current.project_ref.sys_id, current.allocation_group_ref.sys_id, current.fy, current.project_appropriation_ref);
		if (grp.getValue('val_tran_not_deficient') == true && (previous.transaction_total_amt != current.transaction_total_amt || previous.tran_status != 'Obligated' || current.getValue('void') != previous.getValue('void'))) 
			isValid = isValid && this.validateTranDeficient(current, previous);
		return isValid;
	},
	
    validateTranItemGroup: function(current, previous) {
		var isValid = true;
		if (current.fin_tran_ref.tran_status != 'Obligated' || current.fin_tran_ref.getRefRecord().getValue('void') == true) return isValid;
		var grp = this.getAllocationGroup(current.fin_tran_ref.allocation_group_ref.sys_id);
		if (grp == null) return true;
		if (grp.getValue('val_tran_not_deficient') == true && current.fin_tran_ref.tran_status == 'Obligated' && current.fin_tran_ref.getRefRecord().getValue('void') == false) 
			isValid = isValid && this.validateTranItemDeficient(current, previous);
		return isValid;
	},

	validateTranFY: function(proj, grp, fy) {
		var isValid = true;
		var fyCount = this.getAllocationCount(proj, grp, fy, null);
		gs.addInfoMessage('FY count: ' + fyCount);
		if (fyCount == 0) {
			isValid = false;
			gs.addErrorMessage("No project allocations found for fiscal year: " + fy + " Update Failed.");
		}
		return isValid;
	},

	validateTranAllotment: function(proj, grp, fy, allot) {
		var isValid = true;
		var allotCount = this.getAllocationCount(proj, grp, fy, allot, null);
		gs.addInfoMessage('Allotment count: ' + allotCount);
		if (allotCount == 0) {
			isValid = false;
			gs.addErrorMessage("No project allocations found for fiscal year: " + fy + " and alloment: " + allot.getDisplayValue() + " Update Failed.");
		}
		return isValid;
	},

	validateTranAppropriation: function(proj, grp, fy, appro) {
		var isValid = true;
		var approCount = this.getAllocationCount(proj, grp, fy, null, appro);
		gs.addInfoMessage('Appropriation count: ' + approCount);
		if (approCount == 0) {
			isValid = false;
			gs.addErrorMessage("No project allocations found for fiscal year: " + fy + " and appropriation: " + appro.getDisplayValue() + " Update Failed.");
		}
		return isValid;
	},

	validateTranDeficient: function(current, previous) {
		var isValid = true;
		var allocAmt = this.getAllocationTotal(current.project_ref.sys_id, current.allocation_group_ref.sys_id, current.fy);
		gs.addInfoMessage('Allocated Amount is: ' + allocAmt);
		var tranAmt = this.getObligatedTotal(current.project_ref.sys_id, current.sys_id, current.allocation_group_ref.sys_id, current.fy);
		gs.addInfoMessage('Obligated Amount is: ' + tranAmt);
		var remAmt = parseFloat(allocAmt) - (parseFloat(tranAmt) + (parseFloat(current.transaction_total_amt) - parseFloat(previous.transaction_total_amt)));
		if (remAmt < 0) {
			isValid = false;
			gs.addErrorMessage("Unable to obligate...insufficient funds remain for the Allocation Group specified.  Funds needed: " + this.formatMoney(Math.abs(remAmt)) + " Update Failed.");
		}
		return isValid;
	},
	
	validateTranItemDeficient: function(current, previous) {
		var isValid = true;
		var allocAmt = this.getAllocationTotal(current.fin_tran_ref.project_ref.sys_id, current.fin_tran_ref.allocation_group_ref.sys_id, current.fin_tran_ref.fy);
		gs.addInfoMessage('Allocated Amount is: ' + allocAmt);
		var tranAmt = this.getObligatedTotal(current.fin_tran_ref.project_ref.sys_id, current.fin_tran_ref.sys_id, current.fin_tran_ref.allocation_group_ref.sys_id, current.fin_tran_ref.fy);
		gs.addInfoMessage('Obligated Amount is: ' + tranAmt);
		var remAmt = parseFloat(allocAmt) - parseFloat(tranAmt);
		gs.addInfoMessage('Remaining Amount is: ' + remAmt);
		if (parseFloat(current.item_total) > parseFloat(remAmt) + parseFloat(previous.item_total)) {
			isValid = false;
			gs.addErrorMessage("Unable to obligate...insufficient funds remain for the Allocation Group specified.  Funds needed: " + this.formatMoney(Math.abs(parseFloat(current.item_total) - (parseFloat(remAmt) + parseFloat(previous.item_total)))) + " Update Failed.");
		}
		return isValid;
	},

	getAllocationGroup: function(grpKey) {
        var grp = new GlideRecord(this.allocGrpTable);
        grp.addQuery('sys_id', grpKey);
		grp.setLimit(1);
        grp.query();
        if (!grp.hasNext()) return null;
		grp.next();
		return grp;
	},

	getAllocationCount: function(projKey, grpKey, fy, allotKey, approKey) {
        var alloc = new GlideAggregate(this.projAllocTable);
		if (allotKey && allotKey != null) { alloc.addQuery('allotment', allotKey); }
		if (approKey && approKey != null) { alloc.addQuery('appropriation_ref', approKey); }
		alloc.addQuery('project_ref', projKey); 
        alloc.addQuery('fy', fy);
        alloc.addQuery('allocation_group_ref', grpKey);
		alloc.addAggregate('COUNT');
		alloc.groupBy('project_ref');
        alloc.query();
		var cnt = 0;
        while (alloc.next()) {
			cnt += alloc.getAggregate('COUNT');
		}
		return cnt;
	},

	getAllocationTotal: function(projKey, grpKey, fy) {
        var alloc = new GlideAggregate(this.projAllocTable);
		alloc.addQuery('project_ref', projKey); 
        alloc.addQuery('fy', fy);
        alloc.addQuery('allocation_group_ref', grpKey);
		alloc.addAggregate('SUM', 'allocation_amt');
		alloc.groupBy('project_ref');
        alloc.query();
		var allocAmt = 0;
        while (alloc.next()) {
			allocAmt += alloc.getAggregate('SUM', 'allocation_amt');
		}
		return allocAmt;
	},

	getObligatedTotal: function(projKey, tranKey, grpKey, fy) {
        var txn = new GlideAggregate(this.finTranView);
		txn.addQuery('ft_sys_id', '!=', tranKey); 
        txn.addQuery('ft_void', false);
        txn.addQuery('ft_fy', fy);
        txn.addQuery('ft_allocation_group_ref', grpKey);
		txn.addQuery('ft_tran_status', 'Obligated');
		txn.addAggregate('SUM', 'itm_item_total');
		txn.groupBy('ft_allocation_group_ref');
        txn.query();
		var totAmt = 0;
        while (txn.next()) {
			totAmt += txn.getAggregate('SUM', 'itm_item_total');
		}
		return totAmt;
	},
	
	formatMoney: function(val) {
		if (val != 0 && (val === null || val === undefined || val == "")) {
			return null;
		} else if (isNaN(val)) {
			return '$' + parseFloat(0).toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
		} else {
			if (parseFloat(val) >= 0) {
				return '$' + parseFloat(val).toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
			} else {
				return '$(' + parseFloat(val).toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,").replace("-", "") + ")";
			}
		}
	},
	
	type: 'FMSFinTran'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>MarkelJR@state.gov</sys_created_by>
        <sys_created_on>2020-07-28 16:48:32</sys_created_on>
        <sys_id>1238d3d91b5ed0101f7e113d9c4bcbd6</sys_id>
        <sys_mod_count>79</sys_mod_count>
        <sys_name>FMSFinTran</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sys_script_include_1238d3d91b5ed0101f7e113d9c4bcbd6</sys_update_name>
        <sys_updated_by>MarkelJR@state.gov</sys_updated_by>
        <sys_updated_on>2020-07-30 17:16:24</sys_updated_on>
    </sys_script_include>
</record_update>
