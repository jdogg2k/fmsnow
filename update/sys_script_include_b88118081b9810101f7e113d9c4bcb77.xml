<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_g_irm_fms.OrgHierarchy</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>OrgHierarchy</name>
        <script><![CDATA[var OrgHierarchy = Class.create();
OrgHierarchy.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
    initialize: function() {
        this.orgTable = FMSConstants.TABLE_ORGANIZATION;
    },
	
    getAllOrgs: function(orgType) {
        var hierarchy = [];
        var gr = new GlideRecord(this.orgTable);
		if (orgType) { gr.addQuery('org_type', orgType); }
        gr.query();
        while (gr.next()) {
            hierarchy.push(gr.getValue('sys_id'));
        }
        return hierarchy;
    },

	getOrgParents: function(orgsys_id) {
        var hierarchy = [];
        var gr = new GlideRecord(this.orgTable);
        gr.addQuery('sys_id', orgsys_id);
        gr.query();
        while (gr.next()) {
            var parent = gr.getValue('organization_parent_ref');
            if (parent != null) {
                hierarchy.push(parent);
                hierarchy = hierarchy.concat(this.getOrgParents(parent));
            }
        }
        return hierarchy;
    },

    getOrgChildren: function(orgsys_id) {
        var hierarchy = [];
        var gr = new GlideRecord(this.orgTable);
        gr.addQuery('organization_parent_ref', orgsys_id);
        gr.query();
        while (gr.next()) {
            var child = gr.getValue('sys_id');
            hierarchy.push(child);
            hierarchy = hierarchy.concat(this.getOrgChildren(child));
        }
        return hierarchy;
    },

    getUserOrgs: function() {
        var hierarchy = [];
		var isAdmin = gs.hasRole(FMSConstants.ROLE_SYSADMIN);
		if (isAdmin) {
			return this.getAllOrgs('I');
		}
        var gr = new GlideRecord(FMSConstants.TABLE_USER_ORGANIZATION);
        gr.addQuery('user_ref', gs.getUserID());
        gr.query();
        while (gr.next()) {
            var org = gr.getValue('organization_ref');
            hierarchy.push(org);
            hierarchy = hierarchy.concat(this.getOrgChildren(org));
        }
        return hierarchy;
    },
	
	getRollupExpense: function(expenseID, orgID) {
		var grExp = new GlideRecord(FMSConstants.TABLE_EXPENSE_ITEM);
        grExp.addQuery('sys_id', expenseID);
        grExp.query();
		grExp.next();
		while (!grExp.parent_expense_item_ref.nil()) {
			if (grExp.organization_ref.sys_id == orgID)  {
				break;
			}
			else {
				grExp = grExp.parent_expense_item_ref.getRefRecord();
			}
		}
		return grExp;
	},

	type: 'OrgHierarchy'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>MarkelJR@state.gov</sys_created_by>
        <sys_created_on>2020-04-15 18:47:04</sys_created_on>
        <sys_id>b88118081b9810101f7e113d9c4bcb77</sys_id>
        <sys_mod_count>25</sys_mod_count>
        <sys_name>OrgHierarchy</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sys_script_include_b88118081b9810101f7e113d9c4bcb77</sys_update_name>
        <sys_updated_by>MarkelJR@state.gov</sys_updated_by>
        <sys_updated_on>2020-08-07 12:41:13</sys_updated_on>
    </sys_script_include>
</record_update>
