<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, AGGridFactory, $timeout) {
    /* widget controller */
    var c = this;
    c.targetOrg = c.data.budgetOrg;
    c.targetBudget = c.data.selectedBudget;
    c.userAuth = $rootScope.userAuth;

    var phaseManager = new AGGridFactory();

    c.addNew = function() {
        phaseManager.editRow("-1", "budget_ref=" + c.targetBudget);
    }
	
	c.canAdd = function() { 
		if (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst) {
			if (c.userAuth.orgs.indexOf(c.targetOrg) >= 0) 
				return true;
			else
				return false;
		}
		else
			return false;
	}

	c.canEdit = function(auth, data) {
		if (auth.orgs.indexOf(c.targetOrg) >= 0 && (auth.roles.isOrgAdmin || auth.roles.isAnalyst)) 
			return true;
		else
			return false;
	}

	c.canDelete = function(auth, data) { return c.canEdit(auth, data); }

    c.exportExcel = function() {
        phaseManager.exportExcel();
    }

    var phaseColumnDefs = [
		{
            headerName: 'Budget Code',
            field: 'sys_id',
            minWidth: 175,
            cellRenderer: 'agGroupCellRenderer',
            showRowGroup: true,
			sort: 'asc',
			sortingOrder: 1,
            cellRendererParams: {
                suppressCount: true,
                checkbox: false,
                suppressDoubleClickExpand: true,
                suppressEnterExpand: true,
                innerRenderer: 'myGroupCellRenderer',
				banner: { type: 'standard', 
						 columns: [{ label: '', name: 'budget_item_ref.expense_item_ref.budget_code_ref.budget_code' }]
						} 
            }
        },
		{
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
			suppressMenu: true,
			sortable: false,
            cellRenderer: 'editCell',
			cellRendererParams: function(params) { 
				return { "show": c.canEdit(c.userAuth, params.data) }; 
			}
        },
		{
            field: 'budget_item_ref.expense_item_ref.budget_code_ref.budget_code',
            headerName: 'Budget Code',
            filter: 'agTextColumnFilter',
			rowGroup: true,
			hide: true
        },
        {
            field: 'budget_item_ref',
            headerName: 'Expense Item',
            filter: 'agTextColumnFilter',
			rowGroup: true,
			enableRowGroup: true
        },
        {
            field: 'fiscal_month',
            headerName: 'Phase Month',
            cellStyle: {
                textAlign: 'right'
            },
			pivot: true,
			enablePivot: true,
            pivotComparator: function(a, b) {
                var requiredOrder = ['Oct', 'Nov', 'Dec', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep'];
                return requiredOrder.indexOf(a) - requiredOrder.indexOf(b);
            }
        },
        {
            field: 'phase_amt',
            headerName: 'Phased Amount',
            cellStyle: {
                textAlign: 'right'
            },
			type: 'currency',
			aggFunc: 'sum',
            headerComponentParams : {
              template:
                '<div class="ag-cell-label-container" role="presentation">' +
                '<span ref="eText" class="ag-header-cell-text" role="columnheader"></span>' +
                '</div>'
            }
        },
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
			suppressMenu: true,
			sortable: false,
            cellRenderer: 'deleteCell',
			cellRendererParams: function(params) { 
				return { "show": c.canDelete(c.userAuth, params.data) }; 
			}
        }
    ];

    var phaseProps = {
        pageController: c,
        tableName: c.data.tableName,
        dataArray: null,
        pageType: 'Item Phasing',
        linkedField: '',
        detailsPage: '',
    }

    phaseManager.setColumns(phaseColumnDefs);
	phaseManager.setGridOption('pivotColumnGroupTotals', 'after');
    phaseManager.setPageProperties(phaseProps);
    phaseManager.setRenderers('expense_item_ref'); //build renderers and set display field to show on delete attempt
    phaseManager.renderGrid('phaseGrid'); //render grid objects
    phaseManager.setColumnOption('setPivotMode', true);
    phaseManager.setGridData(c.data.tableData); //set grid data
    phaseManager.setColumnsVisible(['edit', 'delete'], (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst));
	$timeout(function () { phaseManager.fitColumns(); }, 250);

    $rootScope.$on('BudgetChanged', function(event, args) {
        c.server.get({
            mode: "refresh",
            budget_id: args.budget_id
        }).then(function(resp) {
            phaseManager.setGridData(resp.data.tableData); //set grid data
        });
    });
}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>budget_item_phase_grid</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Budget Item Phase Grid</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

	data.budgetOrg = "";
	data.selectedBudget = "";
    var FMSUtility = new x_g_irm_fms.FMSUtilities(); //helper utility for FMS queries

    var session = gs.getSession();
    if ($sp.getParameter("budget_id") && $sp.getParameter("budget_id").length > 0)
		data.selectedBudget = $sp.getParameter('budget_id');

    if (input) { //input holds the data coming back to the server
        if (input.mode == "deleteRow") {
            FMSUtility.deleteRecord(FMSConstants.TABLE_BUDGET_ITEM_PHASE, input.rowID);
        }
    }

	
	var phaseInclude = [ 'budget_item_ref.expense_item_ref.budget_code_ref.budget_code' ];
	data.budgetOrg = FMSUtility.getScalar(FMSConstants.TABLE_BUDGET, "project_ref.organization_ref", "sys_id=" + data.selectedBudget);
    data.tableData = FMSUtility.getTableData(FMSConstants.TABLE_BUDGET_ITEM_PHASE, "budget_item_ref.budget_ref.sys_id=" + data.selectedBudget, true, phaseInclude); 

    data.tableName = FMSConstants.TABLE_BUDGET_ITEM_PHASE;

})();



]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>MarkelJR@state.gov</sys_created_by>
        <sys_created_on>2020-05-19 12:52:41</sys_created_on>
        <sys_id>8aa78eba1b34d8100a4a10ad9c4bcb0b</sys_id>
        <sys_mod_count>80</sys_mod_count>
        <sys_name>Budget Item Phase Grid</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy/>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sp_widget_8aa78eba1b34d8100a4a10ad9c4bcb0b</sys_update_name>
        <sys_updated_by>MarkelJR@state.gov</sys_updated_by>
        <sys_updated_on>2020-06-23 12:23:03</sys_updated_on>
        <template><![CDATA[<div style="width: 100%; height: 100%">

  <div class="container">
    <div class="row">
      <div class="form-group col-sm-12 fms-list-header">
        <div class="fms-header-buttons">
          <a href="javascript:void(0)" ng-click="c.addNew();" ng-show="c.canAdd()" class="btn btn-info new-button">Add Budget Item Phasing</a>
          <a href="javascript:void(0)" ng-click="c.exportExcel();" class="btn btn-primary excel-button">Export to Excel</a>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-sm-12">

        <div id="phaseGrid" class="ag-theme-balham full-grid"></div>

      </div>
    </div>
  </div>

</div>]]></template>
    </sp_widget>
</record_update>
