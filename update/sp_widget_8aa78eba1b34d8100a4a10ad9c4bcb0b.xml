<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, AGGridFactory, $timeout, $window, $uibModal) {
    /* widget controller */
    var c = this;
    c.targetOrg = c.data.budgetData['project_ref.organization_ref'];
    c.targetBudget = c.data.selectedBudget;
    c.userAuth = $rootScope.userAuth;

	$scope.Math = $window.Math;
    var phaseManager = new AGGridFactory();

    c.addNew = function() {
        phaseManager.editRow("-1", "budget_ref=" + c.targetBudget);
    }

    c.canAdd = function() {
		if (c.data.budgetData.locked == true) return false;
        if (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst) {
            if (c.userAuth.orgs.indexOf(c.targetOrg) >= 0)
                return true;
            else
                return false;
        } else
            return false;
    }

    c.canEdit = function(auth, data) {
		if (c.data.budgetData.locked == true) return false;
        if (auth.orgs.indexOf(c.targetOrg) >= 0 && (auth.roles.isOrgAdmin || auth.roles.isAnalyst))
            return true;
        else
            return false;
    }

    c.canDelete = function(auth, data) {
        return c.canEdit(auth, data);
    }

    c.exportExcel = function() {
        phaseManager.exportExcel();
    }

    c.openModal = function(itemID, itemDisplay, itemAmt) {
        c.server.get({
            mode: "getItemPhasing",
            budget_item_id: itemID
        }).then(function(resp) {
			c.data.itemPhasing = resp.data.itemPhasing;
			c.data.itemDisplay = itemDisplay;
			c.data.itemAmt = itemAmt;
			c.modalInstance = $uibModal.open({
				templateUrl: 'modalTemplate',
				scope: $scope
			});
		});
    }
    c.closeModal = function() {
        c.server.get({
            mode: "updateItemPhasing",
            items: c.data.itemPhasing
        }).then(function(resp) {
			c.modalInstance.close();
            $rootScope.$broadcast('BudgetDetailsGridChanged', {
                grid_type: 'phasing'
            });
		});
    }
    c.calcQtrTotal = function(qtr) {
		var tot = 0.00;
		for (i = 0; i <= 11; i++) {
			if (qtr == 0 || qtr == Math.ceil(c.data.itemPhasing[i].fiscal_month_rawval / 3))
				tot += parseFloat(c.data.itemPhasing[i].phase_amt) || 0;
		}
		return parseFloat(tot.toFixed(2));
	}

    var phaseColumnDefs = [{
            headerName: 'Budget Code',
            field: 'sys_id',
            minWidth: 175,
            filter: 'agTextColumnFilter',
            cellRenderer: 'agGroupCellRenderer',
            showRowGroup: true,
            sort: 'asc',
            sortingOrder: 1,
            cellRendererParams: {
                suppressCount: true,
                checkbox: false,
                suppressDoubleClickExpand: true,
                suppressEnterExpand: true,
                innerRenderer: 'myGroupCellRenderer',
                banner: {
                    type: 'standard',
                    columns: [{
                        label: '',
                        name: 'budget_code'
                    }]
                }
            }
        },
        {
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'editCell',
            cellRendererParams: function(params) {
                return {
                    "show": c.canEdit(c.userAuth, params.data)
                };
            }
        },
        {
            field: 'budget_code',
            headerName: 'Budget Code',
            filter: 'agTextColumnFilter',
            rowGroup: true,
            hide: true
        },
        {
            field: 'budget_item_ref_rawval',
            headerName: 'Expense Item',
            filter: 'agTextColumnFilter',
            rowGroup: true,
            enableRowGroup: true,
            cellRenderer: function(params) {
				var root = params.node.childrenAfterGroup[0].data;
				if (!root) root = params.node.childrenAfterGroup[0].childrenAfterGroup[0].data;
				var exp = root.expense_item_ref;
				var amt = root.budget_amt;
				var eDiv = document.createElement('div');
				eDiv.innerHTML = '';
				if (c.canAdd())
					eDiv.innerHTML += '<span class="row-button"><i class="fa fa-edit edit-pencil"></i></span>';
				eDiv.innerHTML += '<span title="' + exp + '"><b>' + exp + '</b></span>';
				var eButton = eDiv.querySelectorAll('.fa-edit')[0];
				if (eButton)
					eButton.addEventListener('click', function() {
						c.openModal(params.value, exp, amt);
					});
				return eDiv;
			}
		},
        {
            headerName: 'Quarter',
            filter: 'agTextColumnFilter',
            rowGroup: true,
            hide: true,
			valueGetter: function(params) {
				return 'Q' + Math.ceil(params.data.fiscal_month_rawval / 3);
            }
        },
        {
            field: 'fiscal_month',
            headerName: 'Phase Month',
			className: 'text-right',
            cellStyle: {
                textAlign: 'right'
            },
            pivot: true,
            enablePivot: true,
            pivotComparator: function(a, b) {
                var requiredOrder = ['Oct', 'Nov', 'Dec', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep'];
                return requiredOrder.indexOf(a) - requiredOrder.indexOf(b);
            }
        },
        {
            field: 'phase_amt',
            headerName: 'Phased Amount',
            filter: 'agNumberColumnFilter',
            cellStyle: {
                textAlign: 'right'
            },
            type: 'currency',
            aggFunc: 'sum',
            headerComponentParams: {
                template: '<div class="ag-cell-label-container" role="presentation">' +
                    '<span ref="eText" class="ag-header-cell-text" role="columnheader"></span>' +
                    '</div>'
            }
        },
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'deleteCell',
            cellRendererParams: function(params) {
                return {
                    "show": c.canDelete(c.userAuth, params.data)
                };
            }
        }
    ];

    var phaseProps = {
        pageController: c,
        tableName: c.data.tableName,
        dataArray: null,
        pageType: 'Item Phasing',
        linkedField: '',
        detailsPage: '',
    }

    c.colSecondary = function(colDef) {
		if (colDef.pivotKeys.length == 0) {
			colDef.headerName = "Phased Total";
			colDef.cellRenderer = function(params) {
				var budAmt = 0;
				var color = "transparent";
				if(!params.node.childrenAfterGroup) return params.valueFormatted;
				params.node.childrenAfterGroup.forEach(function(grp) { budAmt += grp.allLeafChildren[0].data.budget_amt; });
				var diffAmt = budAmt - params.value;	
				if (diffAmt == 0 ) color = "palegreen"; else if (diffAmt > 0) color = "powderblue"; else if (diffAmt < 0) color = "tomato"; 
				params.colDef.cellStyle.backgroundColor = color; 
				return '<span title="Budgeted: ' +  params.formatValue(budAmt) + ' Variance: ' + params.formatValue(diffAmt) + '">' + params.valueFormatted + '</span>'; 
			}
		}
		else
			colDef.headerName = colDef.pivotKeys[0] + " Phased";
    }

	phaseManager.setColumns(phaseColumnDefs);
    phaseManager.setGridOption('pivotRowTotals', 'before');
    phaseManager.setGridOption('processSecondaryColDef', c.colSecondary);
	phaseManager.setGridOption('groupHeaderHeight', 0);
	phaseManager.setGridOption('groupIncludeTotalFooter', true);
    phaseManager.setPageProperties(phaseProps);
    phaseManager.setRenderers('expense_item_ref'); //build renderers and set display field to show on delete attempt
	phaseManager.setGridOption('groupDefaultExpanded', 1);
    phaseManager.renderGrid('phaseGrid'); //render grid objects
    phaseManager.setColumnOption('setPivotMode', true);
    phaseManager.setGridData(c.data.tableData); //set grid data
    phaseManager.setColumnsVisible(['edit', 'delete'], (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst));
    $timeout(function() {
        phaseManager.fitColumns();
    }, 250);

	$rootScope.$on('BudgetDetailsGridChanged', function(event, args) {
		if (!args.gridType == 'phasing') return;
        c.server.get({
            mode: "refresh",
            budget_id: c.targetBudget
        }).then(function(resp) {
            phaseManager.setGridData(resp.data.tableData); //set grid data
        });
    });

	$rootScope.$on('fmsgrid.subRecordInserted', function(event, args) {
		if (args.table == FMSConstants.TABLE_BUDGET_ITEM) return; 
            $rootScope.$broadcast('BudgetChanged', { budget_id: c.targetBudget });
    });
	$rootScope.$on('fmsgrid.subRecordUpdated', function(event, args) {
		if (args.table == FMSConstants.TABLE_BUDGET_ITEM) return; 
            $rootScope.$broadcast('BudgetChanged', { budget_id: c.targetBudget });
    });
	$rootScope.$on('fmsgrid.subRecordDeleted', function(event, args) {
		if (args.table == FMSConstants.TABLE_BUDGET_ITEM) return; 
            $rootScope.$broadcast('BudgetChanged', { budget_id: c.targetBudget });
    });

	$rootScope.$on('BudgetChanged', function(event, args) {
        c.server.get({
            mode: "refresh",
            budget_id: args.budget_id
        }).then(function(resp) {
			c.data.budgetData = resp.data.budgetData;
			c.targetOrg = resp.data.budgetData['project_ref.organization_ref'];
			c.targetBudget = resp.data.selectedBudget;
            phaseManager.setGridData(resp.data.tableData); //set grid data
        });
    });
}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>budget_item_phase_grid</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Budget Item Phase Grid</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

	data.budgetOrg = "";
	data.selectedBudget = "";
    var FMSUtility = new x_g_irm_fms.FMSUtilities();   //helper utility for FMS queries
    var budgetUtil = new x_g_irm_fms.FMSBudgetUtils(); //helper utility for budget

    var session = gs.getSession();
    if ($sp.getParameter("budget_id") && $sp.getParameter("budget_id").length > 0)
		data.selectedBudget = $sp.getParameter('budget_id');

    if (input) { //input holds the data coming back to the server
        if (input.mode == "getItemPhasing") {
			var phaseInclude = [ 'budget_item_ref.expense_item_ref.activity_code' ];
			data.itemPhasing = budgetUtil.getItemPhasing(input.budget_item_id); 
		}
        if (input.mode == "updateItemPhasing") {
			if (budgetUtil.updateItemPhasing(input.items))
				gs.addInfoMessage('Phasing sucessfully updated.');
			else
				gs.addErrorMessage('Phasing update failed.');
		}
    }

	var budgetInclude = [ 'project_ref.organization_ref' ];
	data.budgetData = FMSUtility.getTableData(FMSConstants.TABLE_BUDGET, "sys_id=" + data.selectedBudget, true, budgetInclude)[0];
	data.tableData = budgetUtil.getBudgetPhasing(data.selectedBudget); 
    data.tableName = FMSConstants.TABLE_BUDGET_ITEM_PHASE;

})();



]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>MarkelJR@state.gov</sys_created_by>
        <sys_created_on>2020-05-19 12:52:41</sys_created_on>
        <sys_id>8aa78eba1b34d8100a4a10ad9c4bcb0b</sys_id>
        <sys_mod_count>315</sys_mod_count>
        <sys_name>Budget Item Phase Grid</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy/>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sp_widget_8aa78eba1b34d8100a4a10ad9c4bcb0b</sys_update_name>
        <sys_updated_by>MarkelJR@state.gov</sys_updated_by>
        <sys_updated_on>2020-07-16 15:32:56</sys_updated_on>
        <template><![CDATA[<div style="width: 100%; height: 100%">

  <div class="container">
    <div class="row">
      <div class="form-group col-sm-12 fms-list-header">
        <div class="fms-header-buttons">
          <a href="javascript:void(0)" ng-click="c.exportExcel();" class="btn btn-primary excel-button">Export to Excel</a>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-sm-12">

        <div id="phaseGrid" class="ag-theme-balham full-grid"></div>

      </div>
    </div>
  </div>

</div>

<script type="text/ng-template" id="modalTemplate">
  <div class="panel panel-default" style="width: 1100px; background: #fff; color: #00A0D0; font-weight: bold;">
    <div class="panel-heading">
      <h4 class="panel-title">Add / Update Budget Item Phasing</h4>
    </div>
    <div class="panel-body wrapper-xl">
      	<h3>Phasing for: {{c.data.itemDisplay}}</h3>
        <div ng-repeat="qtr in [1, 2, 3, 4]">
          <div class="row">
        	<div ng-repeat="month in c.data.itemPhasing | orderBy: 'fiscal_month_rawval'" ng-if="Math.ceil(month.fiscal_month_rawval / 3) == qtr">
            	<div class="d-inline col-sm-1 text-right">{{month.fiscal_month}}</div>
                <div class="d-inline col-sm-2 text-right">
                	<input type="number" step=".01" placeholder="0.00" class="form-control text-right" id="phaseAmt" style="width: 150px;" ng-model="month.phase_amt">
                </div>
            </div>
            <div>
            	<div class="d-inline col-sm-1 text-right">Q{{qtr}} Total</div>
                <div class="d-inline col-sm-2 text-right">
                	{{c.calcQtrTotal(qtr)}}
  				</div>
            </div>
          </div>
        </div>
        <div class="row" style="padding-top: 20px;">
            <div>
            	<div class="d-inline col-sm-1 text-right">Budget Amount</div>
                <div class="d-inline col-sm-2 text-right" style="font-size: 16pt;">
                	{{c.data.itemAmt}}
  				</div>
	           	<div class="d-inline col-sm-1 text-right"> > > ></div>
	           	<div class="d-inline col-sm-1 text-right">Remaining</div>
                <div class="d-inline col-sm-2 text-right" style="font-size: 16pt;">
                	{{c.data.itemAmt - c.calcQtrTotal(0)}}
  				</div>
	           	<div class="d-inline col-sm-2 text-right">< < < < < < <</div>
            	<div class="d-inline col-sm-1 text-right">Year Total</div>
                <div class="d-inline col-sm-2 text-right" style="font-size: 16pt;">
                	{{c.calcQtrTotal(0)}}
  				</div>
            </div>
        </div>
    </div>
    <div class="panel-footer text-right">
    	<button class="btn btn-primary" ng-click="c.closeModal()">${Save}</button>
    </div>
  </div>
</script>
]]></template>
    </sp_widget>
</record_update>
