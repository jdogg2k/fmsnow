<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function (AGGridFactory, $timeout,$scope) {
    /* widget controller */
    var c = this;
    c.targetOrg = c.data.selectedOrg;
	c.userAuth = $rootScope.userAuth;

    var expenseManager = new AGGridFactory();
    c.addNew = function () {
        expenseManager.editRow("-1", "organization_ref=" + c.targetOrg, c.data.tableName);
    }
	
    c.exportExcel = function () {
        expenseManager.exportExcel();
    }
	
	c.canAdd = function() { 
		if (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst) {
			if (c.userAuth.orgs.indexOf(c.targetOrg) >= 0) 
				return true;
			else
				return false;
		}
		else
			return false;
	}

	c.canEdit = function(auth, data) {
		if (auth.orgs.indexOf(data.organization_ref_rawval) >= 0) 
			return true;
		else
			return false;
	}

	c.canDelete = function(auth, data) { return c.canEdit(auth, data); }

    $rootScope.$on('OrgDetailsGridChanged', function (event, args) {
        if (args.grid_type == "expense") {
            expenseManager.fitColumns();
        }
    });
	


	
c.onPageSizeChanged = function(value) {
	
 //var value = document.getElementById('page-size').value;
		if(value==10||value==20||value==50)
			{//alert("page "+value);
	expenseManager.PageSizeChanged(value);
			}
		//alert(expenseManager.gridOptions.api.paginationAutoPageSize);
  //expenseManager.gridOptions.api.paginationPageSize(10);
		
}

    //define AG Grid columns
    var expenseColumns = [{
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
			suppressMenu: true,
			sortable: false,
            cellRenderer: 'editCell',
			cellRendererParams: function(params) { 
				return { "show": c.canEdit(c.userAuth, params.data) }; 
			}
        },
        {
            field: 'budget_code_ref',
            headerName: 'Budget Code',
            filter: 'agSetColumnFilter',
            sort: 'asc',
            suppressMenu: true
        },
        {
            field: 'activity_code',
            headerName: 'Activity Code',
            filter: 'agTextColumnFilter',
            sort: 'asc',
            suppressMenu: true
        },

        {
            field: 'parent_expense_item_ref',
            headerName: 'Parent Item',
					  filter: 'agSetColumnFilter',
            sort: 'asc',
            suppressMenu: true
        },
        {
            field: 'disabled',
            headerName: 'Disabled',
            maxWidth: 80,
					  filter: 'agSetColumnFilter',
            filterParams: {
                values: [ true, false ]
            },
            cellStyle: {
                textAlign: 'center'
            },
            cellRenderer: function (params) {
                var input = document.createElement('input');
                input.type = "checkbox";
                input.checked = params.value == "true";
                input.disabled = true;
                return input;
            }
        },
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
			suppressMenu: true,
			sortable: false,
            cellRenderer: 'deleteCell',
			cellRendererParams: function(params) { 
				return { "show": c.canDelete(c.userAuth, params.data) }; 
			}
        }
    ]

    var pageProps = {
        pageController: c,
        tableName: c.data.tableName,
        dataArray: null,
        pageType: 'Expense Item',
        linkedField: '',
        detailsPage: '',
        usePaging: true
    }

    expenseManager.setColumns(expenseColumns);
    expenseManager.setPageProperties(pageProps);
    expenseManager.setRenderers('activity_code'); //build renderers and set display field to show on delete attempt
    expenseManager.renderGrid('expenseGrid'); //render grid objects
    expenseManager.setGridData(c.data.tableData); //set grid data
    expenseManager.setColumnsVisible(['edit', 'delete'], (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst));
	 $timeout(function () {expenseManager.fitColumns(); }, 250);

    $rootScope.$on('OrgChanged', function (event, args) {
        c.server.get({
            mode: "setOrg",
            org_id: args.org_id
        }).then(function (resp) {
            c.targetOrg = resp.data.selectedOrg;
            expenseManager.setGridData(resp.data.tableData); //set grid data
        });
    });

}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>expense_item_grid</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Expense Item Grid</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

    data.selectedOrg = "";
    var FMSUtility = new x_g_irm_fms.FMSUtilities(); //helper utility for FMS queries
    var FMSPermissions = new x_g_irm_fms.FMSPermissions();

    var session = gs.getSession();
    if (session.getClientData('org_id') && session.getClientData('org_id').length > 0)
        data.selectedOrg = session.getClientData('org_id');
    if (input) { //input holds the data coming back to the server
        if (input.mode == "deleteRow") {
            if (FMSPermissions.canDeleteExpenseItem(input.rowID)) {
                FMSUtility.deleteRecord(FMSConstants.TABLE_EXPENSE_ITEM, input.rowID);
            } else {
                data.isError = true;
                data.errorMsg = "This Expense Item cannot be deleted as it is linked to existing budgets or transactions";
            }
        }
        if (input.mode == "setOrg") {
            data.selectedOrg = input.org_id.toString();
        }
    }

    data.pageID = $sp.getParameter("id");

    data.tableData = FMSUtility.getTableData(FMSConstants.TABLE_EXPENSE_ITEM, "organization_ref=" + data.selectedOrg, true);
    data.tableName = FMSConstants.TABLE_EXPENSE_ITEM;

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>RoseJL@state.gov</sys_created_by>
        <sys_created_on>2020-04-23 14:50:54</sys_created_on>
        <sys_id>4c69ac6a1b1018100a4a10ad9c4bcbca</sys_id>
        <sys_mod_count>337</sys_mod_count>
        <sys_name>Expense Item Grid</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy/>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sp_widget_4c69ac6a1b1018100a4a10ad9c4bcbca</sys_update_name>
        <sys_updated_by>PuriA@state.gov</sys_updated_by>
        <sys_updated_on>2020-07-28 18:09:10</sys_updated_on>
        <template><![CDATA[<div style="width: 100%; height: 100%">

    <div class="container">
        <div class="row">
            <div class="form-group col-sm-12 fms-list-header">
                <div class="fms-header-buttons">
                    <a href="javascript:void(0)" ng-click="c.exportExcel();" class="btn btn-primary excel-button">Export to Excel</a>
                    <a href="javascript:void(0)" ng-click="c.addNew();" ng-show="c.canAdd()" class="btn btn-info new-button">Add Expense Item</a>
                </div>
               <div class="example-wrapper">
  <div class="example-header">
    Show:
    <select ng-change="c.onPageSizeChanged(c.data.myCheckBox)"ng-model="c.data.myCheckBox" id="page-size">
      <option value="10">10 rows per page</option>
      <option value="20">20 rows per page</option>
      <option value="50" >50 rows per page</option>
    </select>
  </div>
</div>            
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <div id="expenseGrid" class="ag-theme-balham full-grid"></div>
            </div>
        </div>
    </div>

</div>]]></template>
    </sp_widget>
</record_update>
