<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, AGGridFactory, $timeout, spUtil) {
    /* widget controller */
    var c = this;
    c.targetOrg = c.data.selectedOrg;
    c.targetProj = c.data.selectedProj;
    c.userAuth = $rootScope.userAuth;

    var allocManager = new AGGridFactory();
    
    c.onload = function() {
        c.loadYears();
    }	

    c.loadYears = function() {
        $.each(c.data.fiscalYears, function( index, value ) {
            $('select.js-example-basic-multiple').append("<option value='" + value + "'>" + value + "</option>");
        });

        $('select.js-example-basic-multiple').select2({
            placeholder: 'Select a Year'
        }).val(c.data.selectedFY).trigger('change');
        
        $('select.js-example-basic-multiple').on('change', function (e) {
            if (e.val) {
                if (e.val.length > 0) {
                    c.server.get({
                        mode: "getTransData",
                        selFY: e.val.join(",")
                    }).then(function(resp) {
                        var model = allocManager.gridOpts.api.getFilterModel();
                        allocManager.setGridData(resp.data.tableData); //set grid data
                        allocManager.gridOpts.api.setFilterModel(model);
                        //fintranManager.setGridFilter('fy', 'equals', resp.data.selectedFY);
                    });
                } else {
                    var model = allocManager.gridOpts.api.getFilterModel();
                    allocManager.setGridData([]); //set grid data
                    allocManager.gridOpts.api.setFilterModel(model);
                    spUtil.addInfoMessage("Please select a valid fiscal year...");
                }
            }
        });
    }
	
	c.showDiv = function () {
		var page_id = $scope.page.sys_id;
		
		if(page_id =='62c511e11b7c94100a4a10ad9c4bcb75'){
			//alert(page_id);
			return true;
		}
		
		else
			return false;
	}
    c.addNew = function() {
        allocManager.editRow("-1", "project_ref=" + c.targetProj, c.data.tableName);
    }

    c.canAdd = function() {
		if (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst) {
            if (c.userAuth.orgs.indexOf(c.targetOrg) >= 0)
                return true;
            else
                return false;
        } else
            return false;
    }

    c.canEdit = function(auth, data) {
        if (auth.orgs.indexOf(c.targetOrg) >= 0 && (auth.roles.isOrgAdmin || auth.roles.isAnalyst))
            return true;
        else
            return false;
    }

    c.canDelete = function(auth, data) {
        return c.canEdit(auth, data);
    }

    c.exportExcel = function() {
        allocManager.exportExcel();
    }

    var allocColumnDefs = [
		{
            headerName: 'Project / FY / Allocation Group',
            field: 'allocation_group_ref',
            minWidth: 175,
			     filter: 'agTextColumnFilter',
            cellRenderer: 'agGroupCellRenderer',
            showRowGroup: true,
			     rowGroup: true,
            cellRendererParams: {
                suppressCount: true,
                checkbox: false,
                suppressDoubleClickExpand: true,
                suppressEnterExpand: true,
                innerRenderer: 'myGroupCellRenderer',
				banner: { type: 'standard', 
						 columns: [{ label: '', name: 'allocation_group_ref' }] } 
            }
        },
		{
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'editCell',
            cellRendererParams: function(params) {
                return {
                    "show": c.canEdit(c.userAuth, params.data)
                };
            }
        },
        {
            field: 'project_ref',
            headerName: 'Project',
            filter: 'agTextColumnFilter',
			rowGroupIndex: 0,
			hide: true
        },
        {
            field: 'fund_source',
            headerName: 'Fund Source',
            filter: 'agSetColumnFilter',
            filterParams: {
                values: [ 'Allocation', 'Reimbursement' ,'Transfer-In']
            }
        },
        {
            field: 'fy',
            headerName: 'FY',
            filter: 'agSetColumnFilter',
			filterParams: { 
				values: c.data.selectedFY
				//newRowsAction: 'keep'
			},
            sort: 'desc',
			rowGroupIndex: 1
        },
        {
            field: 'appropriation_ref',
            headerName: 'Appropriation',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'allocation_group_ref',
            headerName: 'Allocation Group',
            filter: 'agSetColumnFilter'
        },
        {
            field: 'allocation_amt',
            headerName: 'Allocation Amount',
            cellStyle: {
                textAlign: 'right'
            },
            type: 'currency',
            filter: 'agNumberColumnFilter',
            aggFunc: 'sum'
            /*headerComponentParams: {
                template: '<div class="ag-cell-label-container" role="presentation">' +
                    '<span ref="eText" class="ag-header-cell-text" role="columnheader"></span>' +
                    '</div>'
            }*/
        },
			   {
            field: 'allocation_date',
            headerName: 'Allocation Date',
            type: 'date'
        },
			  {
            field: 'notes',
            headerName: 'Notes',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'carryforward',
            headerName: 'Carry-forward',
					 filter: 'agSetColumnFilter',
            filterParams: {
                values: [ true, false ]
            },
            cellRenderer: 'checkbox'
        },
        {
            field: 'transfer_type_ref',
            headerName: 'Transfer Type',
            filter: 'agSetColumnFilter'
        },
        {
            field: 'xfer_project_ref',
            headerName: 'Transfer Project',
            filter: 'agSetColumnFilter'
        },
        {
            field: 'organization_reimburse_ref',
            headerName: 'Reimburse Organization',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'agreement_nmbr',
            headerName: 'Ref/Agreement',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'deleteCell',
            cellRendererParams: function(params) {
                return {
                    "show": c.canDelete(c.userAuth, params.data)
                };
            }
        }
    ];

    var allocProps = {
        pageController: c,
        tableName: c.data.tableName,
        dataArray: null,
        pageType: 'Project Allocation',
        linkedField: '',
        detailsPage: ''
    }

    allocManager.setColumns(allocColumnDefs);
    allocManager.setPageProperties(allocProps);
    allocManager.setRenderers('project_ref'); //build renderers and set display field to show on delete attempt
	allocManager.setGridOption('groupDefaultExpanded', -1);
	allocManager.renderGrid('allocGrid'); //render grid objects
    allocManager.setGridData(c.data.tableData); //set grid data
	//allocManager.setGridFilter('fy', 'equals', c.data.selectedFY);
    allocManager.setColumnsVisible(['edit', 'delete'], (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst));
    $timeout(function() {
        allocManager.fitColumns();
    }, 250);

    $rootScope.$on('OrgChanged', function(event, args) {
        c.targetOrg = args.org_id;
        c.targetProj = ""; //reset the project on an org change
        c.server.get({
            mode: "setOrg",
            org_id: args.org_id
        }).then(function(resp) {
            var model = allocManager.gridOpts.api.getFilterModel();
            allocManager.setGridData(resp.data.tableData); //set grid data
            allocManager.gridOpts.api.setFilterModel(model);
        });
    });

    $rootScope.$on('ProjChanged', function(event, args) {
        c.targetProj = args.proj_id;
        c.server.get({
            mode: "setProj",
            proj_id: args.proj_id
        }).then(function(resp) {
            var model = allocManager.gridOpts.api.getFilterModel();
            allocManager.setGridData(resp.data.tableData); //set grid data
            allocManager.gridOpts.api.setFilterModel(model);
        });
    });

	$rootScope.$on('BudgetChanged', function(event, args) {
        c.targetProj = args.proj_id;
        c.server.get({
            mode: "setProj",
            proj_id: args.proj_id
        }).then(function(resp) {
            var model = allocManager.gridOpts.api.getFilterModel();
            allocManager.setGridData(resp.data.tableData); //set grid data
            allocManager.gridOpts.api.setFilterModel(model);       
			//allocManager.setGridFilter('fy', 'equals', args.fy);
        });
    });
    
    $rootScope.$on('BudgetDetailsGridChanged', function(event, args) {
        c.loadYears();
    });
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.yearSelection {
    float: left;
    margin-right: 5px;
}
.yearLabel {
    margin-top: 5px;
}
.select2-input {
    min-width: 100px !important;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>project_allocation_grid</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Project Allocation Grid</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

	data.selectedOrg = "";
	data.selectedProj = "";
	data.selectedFY = "";
	
	//gs.addInfoMessage("load"+data.selectedProj+"test");
    var FMSUtility = new x_g_irm_fms.FMSUtilities(); //helper utility for FMS queries
    var FMSPermissions = new x_g_irm_fms.FMSPermissions();
    var session = gs.getSession();
	if (session.getClientData('org_id') && session.getClientData('org_id').length > 0)
		data.selectedOrg = session.getClientData('org_id');
	if (session.getClientData('proj_id') && session.getClientData('proj_id').length > 0)
		data.selectedProj = session.getClientData('proj_id');
	if (session.getClientData('fintran_fy') && session.getClientData('fintran_fy').length > 0)
		data.selectedFY = session.getClientData('fintran_fy');
	
    if (input) { //input holds the data coming back to the server
        if (input.mode == "deleteRow") {
			var successDelete = FMSUtility.deleteRecord(FMSConstants.TABLE_PROJECT_ALLOCATION, input.rowID);
            if (!successDelete) {
                data.isError = true;
            }
        }
        if (input.mode == "setOrg") {
            data.selectedOrg = input.org_id.toString();
           
		}
        if (input.mode == "setProj") {
            data.selectedProj = input.proj_id.toString();
        }
			
			if (input.mode == "getTransData") {
            data.selectedFY = input.selFY.toString();
            session.putClientData('fintran_fy', data.selectedFY);
        }

	} else if ($sp.getParameter("budget_id") && $sp.getParameter("budget_id").length > 0) {
		data.selectedBudgetID = $sp.getParameter("budget_id");
		var bud = FMSUtility.getTableData(FMSConstants.TABLE_BUDGET, "sys_id=" + data.selectedBudgetID, true)[0];
		if (bud) { data.selectedProj = bud.project_ref_rawval; data.selectedFY = bud.fy; }
    }
     else {
         data.fiscalYears = FMSUtility.getFiscalYears();
        data.fiscalYears.reverse();
        data.selectedFY = FMSUtility.getCurrentFY();
        session.putClientData('fintran_fy', data.selectedFY);
       
    }

	var filter = "fyIN" + data.selectedFY;;
	if (data.selectedProj.length > 0) filter += "^project_ref=" + data.selectedProj;
	else if (data.selectedOrg.length > 0) filter += "^project_ref.organization_ref=" + data.selectedOrg;
    data.tableData = FMSUtility.getTableData(FMSConstants.TABLE_PROJECT_ALLOCATION, filter, true); 

    data.tableName = FMSConstants.TABLE_PROJECT_ALLOCATION;

})();



]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>MarkelJR@state.gov</sys_created_by>
        <sys_created_on>2020-05-20 12:59:28</sys_created_on>
        <sys_id>1fc21bc31b305c101f7e113d9c4bcb0d</sys_id>
        <sys_mod_count>117</sys_mod_count>
        <sys_name>Project Allocation Grid</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy/>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sp_widget_1fc21bc31b305c101f7e113d9c4bcb0d</sys_update_name>
        <sys_updated_by>PuriA@state.gov</sys_updated_by>
        <sys_updated_on>2021-04-09 17:33:49</sys_updated_on>
        <template><![CDATA[<div style="width: 100%; height: 100%" ng-init="c.onload()">
<link href="//cdnjs.cloudflare.com/ajax/libs/select2/4.0.1/css/select2.min.css" rel="stylesheet" />
  <div class="container">
    <div class="row">
      <div class="form-group col-sm-12 fms-list-header">
        <div class="fms-header-buttons">
          <div class="yearSelection yearLabel" ng-show="!c.showDiv()"> 
                Fiscal Years Loaded: 
            </div>
            <div class="yearSelection" ng-show="!c.showDiv()"> 
              <select id="yearSelect" class="js-example-basic-multiple" multiple="multiple"/>
            </div>
          <a href="javascript:void(0)" ng-click="c.exportExcel();" class="btn btn-primary excel-button">Export to Excel</a>
          <a href="javascript:void(0)" ng-click="c.addNew();" ng-show="c.canAdd()" class="btn btn-info new-button">Add Allocation</a>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-sm-12">

        <div id="allocGrid" class="ag-theme-balham full-grid"></div>

      </div>
    </div>
  </div>

</div>]]></template>
    </sp_widget>
</record_update>
