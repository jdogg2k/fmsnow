<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, AGGridFactory, $timeout) {
    /* widget controller */
    var c = this;
    c.targetOrg = c.data.selectedOrg;
    c.targetProj = c.data.selectedProj;
    c.userAuth = $rootScope.userAuth;

    var allocManager = new AGGridFactory();

    c.addNew = function() {
        allocManager.editRow("-1", "project_ref=" + c.targetProj, c.data.tableName);
    }

    c.canAdd = function() {
        if (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst) {
            if (c.userAuth.orgs.indexOf(c.targetOrg) >= 0)
                return true;
            else
                return false;
        } else
            return false;
    }

    c.canEdit = function(auth, data) {
        if (auth.orgs.indexOf(c.targetOrg) >= 0 && (auth.roles.isOrgAdmin || auth.roles.isAnalyst))
            return true;
        else
            return false;
    }

    c.canDelete = function(auth, data) {
        return c.canEdit(auth, data);
    }

    c.exportExcel = function() {
        allocManager.exportExcel();
    }

    var allocColumnDefs = [
		{
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'editCell',
            cellRendererParams: function(params) {
                return {
                    "show": c.canEdit(c.userAuth, params.data)
                };
            }
        },
        {
            field: 'project_ref',
            headerName: 'Project',
            filter: 'agTextColumnFilter',
			rowGroup: true,
			hide: true
        },
        {
            field: 'fund_source',
            headerName: 'Fund Source',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'fy',
            headerName: 'FY',
            filter: 'agTextColumnFilter',
			rowGroup: true,
			hide: true
        },
        {
            field: 'appropriation_ref',
            headerName: 'Appropriation',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'allocation_group_ref',
            headerName: 'Allocation Group',
            filter: 'agTextColumnFilter',
			rowGroup: true,
			hide: true
        },
        {
            field: 'allocation_amt',
            headerName: 'Allocation Amount',
            cellStyle: {
                textAlign: 'right'
            },
            type: 'currency',
            filter: 'agNumberColumnFilter',
            aggFunc: 'sum',
            headerComponentParams: {
                template: '<div class="ag-cell-label-container" role="presentation">' +
                    '<span ref="eText" class="ag-header-cell-text" role="columnheader"></span>' +
                    '</div>'
            }
        },
        {
            field: 'carryforward',
            headerName: 'Carry-forward',
            cellRenderer: 'checkbox'
        },
        {
            field: 'transfer_type_ref',
            headerName: 'Transfer Type',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'xfer_project_ref',
            headerName: 'Transfer Project',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'organization_reimburse_ref',
            headerName: 'Reimburse Organization',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'agreement_nmbr',
            headerName: 'Ref/Agreement',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'deleteCell',
            cellRendererParams: function(params) {
                return {
                    "show": c.canDelete(c.userAuth, params.data)
                };
            }
        }
    ];

    var allocProps = {
        pageController: c,
        tableName: c.data.tableName,
        dataArray: null,
        pageType: 'Project Allocation',
        linkedField: '',
        detailsPage: ''
    }

    allocManager.setColumns(allocColumnDefs);
    allocManager.setPageProperties(allocProps);
    allocManager.setRenderers('project_ref'); //build renderers and set display field to show on delete attempt
    allocManager.renderGrid('allocGrid'); //render grid objects
    allocManager.setGridData(c.data.tableData); //set grid data
    allocManager.setColumnsVisible(['edit', 'delete'], (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst));
    $timeout(function() {
        allocManager.fitColumns();
    }, 250);

    $rootScope.$on('OrgChanged', function(event, args) {
        c.targetOrg = args.org_id;
        c.server.get({
            mode: "setOrg",
            org_id: args.org_id
        }).then(function(resp) {
            allocManager.setGridData(resp.data.tableData); //set grid data
        });
    });

    $rootScope.$on('ProjChanged', function(event, args) {
        c.targetProj = args.proj_id;
        c.server.get({
            mode: "setProj",
            proj_id: args.proj_id
        }).then(function(resp) {
            allocManager.setGridData(resp.data.tableData); //set grid data
        });
    });

}]]></client_script>
        <controller_as>c</controller_as>
        <css>.full-grid {&#13;
    width: 94vw;&#13;
    height: calc(100vh - 210px);&#13;
    clear: both;&#13;
}&#13;
.fms-list-header {&#13;
    margin-bottom: 0px !important;&#13;
}&#13;
.pageLabel {&#13;
    float: left;&#13;
    margin-right: 10px;&#13;
}&#13;
.row-button {&#13;
    cursor: pointer;&#13;
}&#13;
.new-button {&#13;
    float: left;&#13;
}&#13;
.excel-button {&#13;
    float: right;&#13;
}&#13;
.edit-pencil {&#13;
    color: #003ade;&#13;
    font-size: 13px;&#13;
}&#13;
.delete-x {&#13;
    color: #000000;&#13;
    font-size: 13px;&#13;
}&#13;
.updated-row {&#13;
    background-color: #FFFFCC;&#13;
}&#13;
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>project_allocation_grid</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Project Allocation Grid</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

	data.selectedOrg = "";
	data.selectedProj = "";
    var FMSUtility = new x_g_irm_fms.FMSUtilities(); //helper utility for FMS queries

    var session = gs.getSession();
	if (session.getClientData('org_id') && session.getClientData('org_id').length > 0)
		data.selectedOrg = session.getClientData('org_id');
	if (session.getClientData('proj_id') && session.getClientData('proj_id').length > 0)
		data.selectedProj = session.getClientData('proj_id');

    if (input) { //input holds the data coming back to the server
        if (input.mode == "deleteRow") {
            FMSUtility.deleteRecord(FMSConstants.TABLE_PROJECT_ALLOCATION, input.rowID);
        }
        if (input.mode == "setOrg") {
            data.selectedOrg = input.org_id.toString();
		}
        if (input.mode == "setProj") {
            data.selectedProj = input.proj_id.toString();
        }
    }

	var filter = "";
	if (data.selectedProj.length > 0) filter = "project_ref=" + data.selectedProj;
	else if (data.selectedOrg.length > 0) filter = "project_ref.organization_ref=" + data.selectedOrg;
    data.tableData = FMSUtility.getTableData(FMSConstants.TABLE_PROJECT_ALLOCATION, filter, true); 

    data.tableName = FMSConstants.TABLE_PROJECT_ALLOCATION;

})();



]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>MarkelJR@state.gov</sys_created_by>
        <sys_created_on>2020-05-20 12:59:28</sys_created_on>
        <sys_id>1fc21bc31b305c101f7e113d9c4bcb0d</sys_id>
        <sys_mod_count>14</sys_mod_count>
        <sys_name>Project Allocation Grid</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy/>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sp_widget_1fc21bc31b305c101f7e113d9c4bcb0d</sys_update_name>
        <sys_updated_by>RoseJL@state.gov</sys_updated_by>
        <sys_updated_on>2020-06-02 19:42:17</sys_updated_on>
        <template><![CDATA[<div style="width: 100%; height: 100%">

  <div class="container">
    <div class="row">
      <div class="form-group col-sm-12 fms-list-header">
        <div class="fms-header-buttons">
          <a href="javascript:void(0)" ng-click="c.addNew();" ng-show="c.canAdd()" class="btn btn-info new-button">Add Allocation</a>
          <a href="javascript:void(0)" ng-click="c.exportExcel();" class="btn btn-primary excel-button">Export to Excel</a>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-sm-12">

        <div id="allocGrid" class="ag-theme-balham full-grid"></div>

      </div>
    </div>
  </div>

</div>]]></template>
    </sp_widget>
</record_update>
