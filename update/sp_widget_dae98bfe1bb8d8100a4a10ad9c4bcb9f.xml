<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, AGGridFactory, $timeout) {
    /* widget controller */
    var c = this;
    c.targetOrg = c.data.budgetData['project_ref.organization_ref'];
    c.targetBudget = c.data.selectedBudget;
    c.userAuth = $rootScope.userAuth;

    var bitemManager = new AGGridFactory();

    c.addNew = function() {
        bitemManager.editRow("-1", "budget_ref=" + c.targetBudget);
    }
	
	c.canAdd = function() { 
		if (c.data.budgetData.locked == true) return false;
		if (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst) {
			if (c.userAuth.orgs.indexOf(c.targetOrg) >= 0) 
				return true;
			else
				return false;
		}
		else
			return false;
	}

	c.canEdit = function(auth, data) {
		if (c.data.budgetData.locked == true) return false;
		if (auth.orgs.indexOf(c.targetOrg) >= 0 && (auth.roles.isOrgAdmin || auth.roles.isAnalyst)) 
			return true;
		else
			return false;
	}

	c.canDelete = function(auth, data) { return c.canEdit(auth, data); }

    c.exportExcel = function() {
        bitemManager.exportExcel();
    }

    var bitemColumnDefs = [
		{
            headerName: 'Budget Code',
            field: 'sys_id',
            minWidth: 175,
			filter: 'agTextColumnFilter',
            cellRenderer: 'agGroupCellRenderer',
            showRowGroup: true,
            cellRendererParams: {
                suppressCount: true,
                checkbox: false,
                suppressDoubleClickExpand: true,
                suppressEnterExpand: true,
                innerRenderer: 'myGroupCellRenderer',
				banner: { type: 'standard', 
						 columns: [{ label: '', name: 'expense_item_ref.budget_code_ref.budget_code' }]
						} 
            }
        },
		{
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
			suppressMenu: true,
			sortable: false,
            cellRenderer: 'editCell',
			cellRendererParams: function(params) { 
				return { "show": c.canEdit(c.userAuth, params.data),
					     "editType": "inline" }; 
			}
        },
        {
            field: 'expense_item_ref.budget_code_ref.budget_code',
            headerName: 'Budget Code',
            filter: 'agTextColumnFilter',
			sort: 'asc',
			rowGroup: true,
			hide: true
        },
        {
            field: 'expense_item_ref',
            headerName: 'Expense Item',
            sort: 'asc',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'budget_amt',
            headerName: c.data.budgetData.budget_type == "Actual" ? 'Transaction Amount' : 'Budget Amount',
			filter: 'agNumberColumnFilter',
            cellStyle: {
                textAlign: 'right'
            },
			type: 'currency',
			aggFunc: 'sum',
			editable: true,
			cellEditor: 'numericCellEditor'
			/*headerComponentParams : {
              template:
                '<div class="ag-cell-label-container" role="presentation">' +
                '<span ref="eText" class="ag-header-cell-text" role="columnheader"></span>' +
                '</div>'
            }*/
        },
        {
            field: 'projected_amt',
            headerName: 'Balance',
			filter: 'agNumberColumnFilter',
            cellStyle: {
                textAlign: 'right'
            },
			type: 'currency',
			aggFunc: 'sum',
			editable: true,
			hide: (c.data.budgetData.budget_type != "Actual"),
			cellEditor: 'numericCellEditor'
			/*headerComponentParams : {
              template:
                '<div class="ag-cell-label-container" role="presentation">' +
                '<span ref="eText" class="ag-header-cell-text" role="columnheader"></span>' +
                '</div>'
            }*/
        },
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
			suppressMenu: true,
			sortable: false,
            cellRenderer: 'deleteCell',
			cellRendererParams: function(params) { 
				return { "show": c.canDelete(c.userAuth, params.data) }; 
			}
        }
    ];

    var bitemProps = {
        pageController: c,
        tableName: c.data.tableName,
        dataArray: null,
        pageType: 'Budget Item',
        linkedField: '',
        detailsPage: '',
		showTotals: true
    }

    bitemManager.setColumns(bitemColumnDefs);
    bitemManager.setPageProperties(bitemProps);
    bitemManager.setRenderers('expense_item_ref'); //build renderers and set display field to show on delete attempt
	bitemManager.setGridOption('groupDefaultExpanded', -1);
	bitemManager.setGridOption('pinnedBottomRowData', [{expense_item_ref: "Test 1", 
														budget_amt: c.data.tableData.reduce(function(accum, row) { return accum + row.budget_amt }, 0)}]);
	bitemManager.renderGrid('bitemGrid'); //render grid objects
    bitemManager.setGridData(c.data.tableData); //set grid data
    bitemManager.setColumnsVisible(['edit', 'delete'], c.canEdit(c.userAuth, null));
	$timeout(function () { bitemManager.fitColumns(); }, 250);
	if (c.data.tableData.length == 0 && c.canAdd()) c.addNew();

    $rootScope.$on('BudgetChanged', function(event, args) {
        c.server.get({
            mode: "refresh",
            budget_id: args.budget_id
        }).then(function(resp) {
			c.data.budgetData = resp.data.budgetData;
			c.targetOrg = resp.data.budgetData['project_ref.organization_ref'];
			c.targetBudget = resp.data.selectedBudget;
            bitemManager.setGridData(resp.data.tableData); //set grid data
			bitemManager.setColumnsVisible(['edit', 'delete'], c.canEdit(c.userAuth, null));
			$timeout(function () { bitemManager.fitColumns(); }, 250);
        });
    });
}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>budget_item_grid</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Budget Item Grid</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

	data.selectedBudget = "";
    var FMSUtility = new x_g_irm_fms.FMSUtilities(); //helper utility for FMS queries
    var budgetUtil = new x_g_irm_fms.FMSBudgetUtils(); //helper utility for budget

    var session = gs.getSession();
    if ($sp.getParameter("budget_id") && $sp.getParameter("budget_id").length > 0)
		data.selectedBudget = $sp.getParameter('budget_id');

    if (input) { //input holds the data coming back to the server
        if (input.mode == "updateRow") {
            FMSUtility.updateRecord(FMSConstants.TABLE_BUDGET_ITEM, input.row);
        }
        if (input.mode == "deleteRow") {
            FMSUtility.deleteRecord(FMSConstants.TABLE_BUDGET_ITEM, input.rowID);
        }
        if (input.mode == "refresh") {
            data.selectedBudget = input.budget_id;
        }
    }

	var budgetInclude = [ 'project_ref.organization_ref' ];
	var itemInclude = [ 'expense_item_ref.budget_code_ref.budget_code' ];
	data.budgetData = FMSUtility.getTableData(FMSConstants.TABLE_BUDGET, "sys_id=" + data.selectedBudget, true, budgetInclude)[0];
	if (data.budgetData && data.budgetData.budget_type == "Actual") {
		budgetUtil.updateActual(data.budgetData.sys_id);
	}
    data.tableData = FMSUtility.getTableData(FMSConstants.TABLE_BUDGET_ITEM, "budget_ref=" + data.selectedBudget, true, itemInclude); 

    data.tableName = FMSConstants.TABLE_BUDGET_ITEM;

})();



]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>MarkelJR@state.gov</sys_created_by>
        <sys_created_on>2020-05-19 17:42:10</sys_created_on>
        <sys_id>dae98bfe1bb8d8100a4a10ad9c4bcb9f</sys_id>
        <sys_mod_count>89</sys_mod_count>
        <sys_name>Budget Item Grid</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy/>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sp_widget_dae98bfe1bb8d8100a4a10ad9c4bcb9f</sys_update_name>
        <sys_updated_by>MarkelJR@state.gov</sys_updated_by>
        <sys_updated_on>2020-11-23 20:02:12</sys_updated_on>
        <template><![CDATA[<div style="width: 100%; height: 100%">
  <div class="container">
    <div class="row">
      <div class="form-group col-sm-12 fms-list-header">
        <div class="fms-header-buttons">
          <a href="javascript:void(0)" ng-click="c.addNew();" ng-show="c.canAdd()" class="btn btn-info new-button" style="float: left;">Add Budget Item</a>
          <a href="javascript:void(0)" ng-click="c.exportExcel();" class="btn btn-primary excel-button">Export to Excel</a>
        </div>
      </div>
    </div>
    <div class="rowFullWidth">
      <div class="col-md-12">
		  <div id="bitemGrid" class="ag-theme-balham full-grid"></div>
      </div>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
