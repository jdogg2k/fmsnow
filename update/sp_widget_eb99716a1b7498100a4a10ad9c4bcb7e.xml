<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function (AGAllocationPoolGridFactory, $timeout) {
    /* widget controller */
    var c = this;
    c.targetOrg = c.data.selectedOrg;
    c.userAuth = $rootScope.userAuth;

    var poolManager = new AGAllocationPoolGridFactory();

    c.addNew = function () {
        poolManager.editRow("-1", "organization_ref=" + c.targetOrg, c.data.tableName);
    }

    c.exportExcel = function () {
        poolManager.exportExcel();
    }

    c.canAdd = function () {
        if (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst) {
			if (c.userAuth.orgs.indexOf(c.targetOrg) >= 0) 
				return true;
			else
				return false;
		}
		else
            return false;
    }

    c.canEdit = function (auth, data) {
        if (auth.orgs.indexOf(c.targetOrg) >= 0) 
			return true;
		else
            return false;
    }

    c.canDelete = function (auth, data) {
        return c.canEdit(auth, data);
    }

    c.setYear = function() {
        c.server.get({
            mode: 'getData', //this mode doesn't really matter, we just need to refresh the data server-side
            selectedFY: c.data.selectedFY
        }).then(function (saveResp) {
            poolManager.setGridData(saveResp.data.tableData);
        });
    }

    //define AG Grid columns
    var poolColumns = [{
            field: 'pool_type',
            headerName: 'Edit / Distribute / Allocate',
            minWidth: 200,
            cellRenderer: 'agGroupCellRenderer',
            showRowGroup: true,
            cellRendererParams: {
                suppressCount: true,
                checkbox: false,
                innerRenderer: 'myGroupCellRenderer',
                suppressDoubleClickExpand: true,
                suppressEnterExpand: true
            }
        },
        {
            field: 'organization_source_ref',
            headerName: 'Source Organization'
        },
        {
            field: 'pool_status',
            headerName: 'Pool Status'
        },
        {
            field: 'fy',
            headerName: 'FY',
            filter: 'agTextColumnFilter',
            suppressMenu: true
        },
        {
            field: 'fy_qtr',
            headerName: 'Qtr',
            filter: 'agTextColumnFilter',
            suppressMenu: true,
            rowGroup: true
        },
        {
            field: 'request_date',
            headerName: 'Requested Date'
        },
        {
            field: 'request_amt',
            headerName: 'Requested Amount',
            type: 'currency',
            aggFunc: 'sum'
        },
        {
            field: 'receive_date',
            headerName: 'Received Date'
        },
        {
            field: 'receive_amt',
            headerName: 'Received Amount',
            type: 'currency',
            aggFunc: 'sum'
        },
        {
            field: 'appropriation_type_ref',
            headerName: 'Appropriation Type',
            filter: 'agTextColumnFilter',
            suppressMenu: true
        },
        {
            field: 'investment_ref',
            headerName: 'Investment',
            filter: 'agTextColumnFilter',
            suppressMenu: true
        },
        {
            field: 'pool_purpose',
            headerName: 'Pool Purpose'
        },
        {
            field: 'ams_ref_nmbr',
            headerName: 'AMS Reference'
        },
        {
            field: 'ibis_document',
            headerName: 'IBIS Document'
        },
        {
            field: 'distributed_amt',
            headerName: 'Distributed Amount',
            type: 'currency',
            aggFunc: 'sum'
        },
        {
            field: 'allocated_amt',
            headerName: 'Allocated Amount',
            type: 'currency',
            aggFunc: 'sum'
        },
        {
            field: 'unassigned_amt',
            headerName: 'Unassigned Amount',
            type: 'currency',
            aggFunc: 'sum',
            cellStyle: function (params) {
                if (!params.node.group) {
                    if (params.value > 0) {
                        return {
                            color: 'white',
                            backgroundColor: 'red',
                            textAlign: 'right'
                        };
                    } else {
                        return {
                            color: 'white',
                            backgroundColor: 'green',
                            textAlign: 'right'
                        };
                    }
                }
            }
        },
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'deleteCell',
            cellRendererParams: function (params) {
                return {
                    "show": c.canDelete(c.userAuth, params.data)
                };
            }
        }
    ]

    var distColumns = [{
        field: 'organization_ref',
        headerName: 'Organization'
    },
    {
        field: 'pool_type',
        headerName: 'Pool Type'
    },
    {
        field: 'fy',
        headerName: 'FY',
        filter: 'agTextColumnFilter',
        suppressMenu: true
    },
    {
        field: 'fy_qtr',
        headerName: 'Qtr',
        filter: 'agTextColumnFilter',
        suppressMenu: true
    },
    {
        field: 'receive_date',
        headerName: 'Received Date'
    },
    {
        field: 'receive_amt',
        headerName: 'Received Amount',
        type: 'currency',
        aggFunc: 'sum'
    },
    {
        field: 'pool_purpose',
        headerName: 'Pool Purpose'
    },
    {
        field: 'ams_ref_nmbr',
        headerName: 'AMS Reference'
    },
    {
        field: 'ibis_document',
        headerName: 'IBIS Document'
    },
    {
        field: 'distributed_amt',
        headerName: 'Distributed Amount',
        type: 'currency',
        aggFunc: 'sum'
    },
    {
        field: 'allocated_amt',
        headerName: 'Allocated Amount',
        type: 'currency',
        aggFunc: 'sum'
    },
    {
        field: 'unassigned_amt',
        headerName: 'Unassigned Amount',
        type: 'currency',
        aggFunc: 'sum',
        cellStyle: function (params) {
            if (!params.node.group) {
                if (params.value > 0) {
                    return {
                        color: 'white',
                        backgroundColor: 'red',
                        textAlign: 'right'
                    };
                } else {
                    return {
                        color: 'white',
                        backgroundColor: 'green',
                        textAlign: 'right'
                    };
                }
            }
        }
    }];

    var projAllocColumns = [
        {
            field: 'edit_projalloc',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'editCell',
            cellRendererParams: function(params) {
                return {
                    "show": c.canEdit(c.userAuth, params.data)
                };
            }
        },
        {
            field: 'allocation_pool_ref',
            hide: true,
            rowGroup: true
        },
        {
            field: 'project_ref',
            headerName: 'Project Name'
        },
        {
            field: 'fund_source',
            headerName: 'Fund Source'
        },
        {
            field: 'fy',
            headerName: 'FY'
        },
        {
            field: 'appropriation_ref',
            headerName: 'Appropriation'
        },
        {
            field: 'allotment',
            headerName: 'Allotment'
        },
        {
            field: 'allocation_date',
            headerName: 'Date'
        },
        {
            field: 'allocation_group_ref',
            headerName: 'Allocation Group'
        },
        {
            field: 'allocation_amt',
            headerName: 'Amount',
            cellStyle: {
                textAlign: 'right'
            },
            type: 'currency',
            aggFunc: 'sum',
            headerComponentParams: {
                template: '<div class="ag-cell-label-container" role="presentation">' +
                    '<span ref="eText" class="ag-header-cell-text" role="columnheader"></span>' +
                    '</div>'
            }
        },
        {
            field: 'carryforward',
            headerName: 'Carry-forward',
            cellRenderer: 'checkbox'
        },
        {
            field: 'transfer_type_ref',
            headerName: 'Transfer Type'
        },
        {
            field: 'xfer_project_ref',
            headerName: 'Other Office / Project'
        },
        {
            field: 'organization_reimburse_ref',
            headerName: 'Reimburse Organization'
        },
        {
            field: 'agreement_nmbr',
            headerName: 'Ref/Agreement'
        },
        {
            field: 'delete_project',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'deleteCell',
            cellRendererParams: function(params) {
                return {
                    "show": c.canDelete(c.userAuth, params.data)
                };
            }
        }

     ];

    var pageProps = {
        pageController: c,
        tableName: c.data.tableName,
        dataArray: null,
        pageType: 'Allocation Pool',
        linkedField: '',
        detailsPage: '',
        usePaging: true
    }

    poolManager.setColumns(poolColumns);
    poolManager.setPageProperties(pageProps, c.data.projAllocTableName);
    poolManager.setRenderers('allocation_pool_display', distColumns, projAllocColumns); //build renderers and set display field to show on delete attempt
    poolManager.renderGrid('allocationPoolGrid'); //render grid objects
    poolManager.setGridData(c.data.tableData); //set grid data
    poolManager.setColumnsVisible(['edit', 'delete'], (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst));
    poolManager.fitColumns();

    $rootScope.$on('OrgChanged', function (event, args) {
        c.server.get({
            mode: "setOrg",
            org_id: args.org_id,
            sel_fy: c.data.selectedFY
        }).then(function (resp) {
            c.targetOrg = resp.data.selectedOrg;
            c.data.canDistribute = resp.data.canDistribute;
            poolManager.setGridData(resp.data.tableData); //set grid data
        });
    });
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.full-grid {
    width: 94vw;
    height: calc(100vh - 210px);
    clear: both;
}

.fms-list-header {
    margin-bottom: 0px !important;
}

.pageLabel {
    float: left;
    margin-right: 10px;
}

.row-button {
    cursor: pointer;
}

.new-button {
    float: left;
}

.excel-button {
    float: right;
}

.edit-pencil {
    color: #003ade;
    font-size: 16px;
    margin-right: 5px;
}

.action-enabled {
    color: #0b8800;
    font-size: 16px;
    margin-right: 5px;
    cursor: pointer;
}

.action-disabled {
    color: #808080;
    font-size: 16px;
    margin-right: 5px;
}

.delete-x {
    color: #000000;
    font-size: 13px;
}

.updated-row {
    background-color: #FFFFCC;
}

.ag-header-cell-label .ag-header-icon.ag-sort-order {
    display: none
}

.ag-row-group {
    font-weight: bold;
}

.full-width-panel {
    position: relative;
    background: #EDF6FF;
    height: 100%;
    width: 100%;
    padding: 5px;
}

.full-row-details {
    position: relative;
    background: #FFFFFF;
    height: 100%;
    width: 100%;
    padding-left: 12px;
    padding-top: 4px;
}

.call-record-cell {
    text-align: right;
}

.full-width-detail {
    padding-top: 4px;
}

.full-width-title {
    font-size: 10pt;
    font-weight: bold;
    float: left;
}

.contract-button {
    float: right;
    margin-top: -13px;
}

.full-width-details {
    float: left;
    padding: 5px;
    margin: 5px;
    width: 100%;
    clear: both;
}

.details-grid {
    display: block;
    clear: both;
    height: 100px;
    margin-bottom: 5px;
}

.full-width-grid-toolbar {
    top: 4px;
    left: 30px;
    margin-left: 150px;
    display: block;
    position: absolute;
}

.full-width-phone-icon {
    padding-right: 10px;
}

.full-width-search {
    border: 1px solid #eee;
    margin-left: 10px;
}
.selectLabel {
    float: left;
    margin-left: 10px;
    margin-top: 6px;
    margin-right: 10px;
    margin-bottom: 12px;
}
.fyDropDown {
    float: left;
    width: 100px;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>allocation_pool_grid</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Allocation Pool Grid</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

	data.selectedOrg = "";
    var FMSUtility = new x_g_irm_fms.FMSUtilities(); //helper utility for FMS queries

    

    var session = gs.getSession();

    if (input) { //input holds the data coming back to the server

        if (input.mode == "getData") {
            data.selectedFY = input.selectedFY;
        }

        if (input.mode == "getNewRec") {

            data.newRec = FMSUtility.getTableData(input.targetTable, "sys_id=" + input.newSysID, true)[0];

            var poolRefID = "";
            if (input.targetTable == FMSConstants.TABLE_PROJECT_ALLOCATION) {
                poolRefID = data.newRec.allocation_pool_ref_rawval;
            } else {
                poolRefID = data.newRec.pool_parent_ref_rawval;
            }

            data.parentRec = FMSUtility.getTableData(FMSConstants.TABLE_ALLOCATION_POOL, "sys_id=" + poolRefID, true)[0];
        }

        if (input.mode == "deleteRow") {
            
            if (input.delTable != FMSConstants.TABLE_ALLOCATION_POOL) { //removing allocation so let's update parent
                var deletedRec = new GlideRecord(input.delTable);
                deletedRec.get(input.rowID);
                var dParentID = deletedRec.allocation_pool_ref.toString();
            }    
                
            FMSUtility.deleteRecord(input.delTable, input.rowID);

            if (input.delTable != FMSConstants.TABLE_ALLOCATION_POOL) {
                data.parentRec = FMSUtility.getTableData(FMSConstants.TABLE_ALLOCATION_POOL, "sys_id=" + dParentID, true)[0];
            }

        }
        if (input.mode == "setOrg") {
            data.selectedOrg = input.org_id.toString();
            data.selectedFY = input.sel_fy.toString();
        }
    } else {
        data.fiscalYears = FMSUtility.getFiscalYears();
        data.selectedFY = FMSUtility.getCurrentFY();
    }

    data.pageID = $sp.getParameter("id");

	if (data.selectedOrg.length == 0 && session.getClientData('org_id') && session.getClientData('org_id').length > 0)
        data.selectedOrg = session.getClientData('org_id');

    data.tableData = FMSUtility.getAllAllocationData(FMSConstants.TABLE_ALLOCATION_POOL, "organization_ref=" + data.selectedOrg + "^fy=" + data.selectedFY, true); 
    data.tableName = FMSConstants.TABLE_ALLOCATION_POOL;
    data.projAllocTableName = FMSConstants.TABLE_PROJECT_ALLOCATION;

    data.canDistribute = false;
    var subOrgs = FMSUtility.getTableData(FMSConstants.TABLE_ORGANIZATION, "organization_parent_ref=" + data.selectedOrg);
    if (subOrgs.length > 0)
        data.canDistribute = true;

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>RoseJL@state.gov</sys_created_by>
        <sys_created_on>2020-05-18 17:12:53</sys_created_on>
        <sys_id>eb99716a1b7498100a4a10ad9c4bcb7e</sys_id>
        <sys_mod_count>88</sys_mod_count>
        <sys_name>Allocation Pool Grid</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy/>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sp_widget_eb99716a1b7498100a4a10ad9c4bcb7e</sys_update_name>
        <sys_updated_by>RoseJL@state.gov</sys_updated_by>
        <sys_updated_on>2020-06-01 15:54:43</sys_updated_on>
        <template><![CDATA[<div style="width: 100%; height: 100%">

    <div class="container">
        <div class="row">
            <div class="form-group col-sm-12 fms-list-header">
                <div class="fms-header-buttons">
                    <a href="javascript:void(0)" ng-click="c.addNew();" ng-show="c.canAdd()" class="btn btn-info new-button">Add Allocation Pool</a>
                    <div class="form-group">
                        <label for="selFY" class="selectLabel">Fiscal Year:</label>
                        <select class="form-control fyDropDown" id="selFY" ng-change="c.setYear()"
                            ng-model="c.data.selectedFY">
                            <option ng-repeat="year in data.fiscalYears" value="{{year}}">{{year}}
                            </option>
                        </select>
                    </div>
                    <a href="javascript:void(0)" ng-click="c.exportExcel();" class="btn btn-primary excel-button">Export to Excel</a>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <div id="allocationPoolGrid" class="ag-theme-balham full-grid"></div>
            </div>
        </div>
    </div>

</div>]]></template>
    </sp_widget>
</record_update>
