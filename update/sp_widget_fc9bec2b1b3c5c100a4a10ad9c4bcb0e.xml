<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, AGGridFactory, $timeout) {
    /* widget controller */
    var c = this;
    c.targetOrg = c.data.selectedOrg;
    c.targetProj = c.data.selectedProj;
    c.userAuth = $rootScope.userAuth;

    var fintranManager = new AGGridFactory();

    c.addNew = function() {
        fintranManager.editRow("-1", "project_ref=" + c.targetProj, c.data.tableName);
    }

    c.canAdd = function() {
        if (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst) {
            if (c.userAuth.orgs.indexOf(c.targetOrg) >= 0)
                return true;
            else
                return false;
        } else
            return false;
    }

    c.canEdit = function(auth, data) {
        if (!data) return false;
        if (auth.orgs.indexOf(c.targetOrg) >= 0 && (auth.roles.isOrgAdmin || auth.roles.isAnalyst))
            return true;
        else
            return false;
    }

    c.canDelete = function(auth, data) {
        return c.canEdit(auth, data);
    }

    c.exportExcel = function() {
        fintranManager.exportExcel();
    }

    var fintranColumnDefs = [{
            headerName: 'Project / FY',
            field: 'sys_id',
            minWidth: 175,
            cellRenderer: 'agGroupCellRenderer',
            showRowGroup: true,
            cellRendererParams: {
                suppressCount: true,
                checkbox: false,
                suppressDoubleClickExpand: true,
                suppressEnterExpand: true,
                innerRenderer: 'myGroupCellRenderer',
				banner: { type: 'standard', columns: [{ label: '', name: 'project_ref' }, { label: " | FY: ", name: "fy" }] }
            },
        },
        {
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'editCell',
            cellRendererParams: function(params) {
                return {
                    "show": c.canEdit(c.userAuth, params)
                };
            }
        },
        {
            field: 'project_ref',
            headerName: 'Project',
            filter: 'agTextColumnFilter',
            sort: 'asc',
            hide: true
        },
        {
            field: 'tran_type',
            headerName: 'Tran Type',
            filter: 'agTextColumnFilter',
            sort: 'asc',
        },
        {
            field: 'tran_status',
            headerName: 'Status',
            filter: 'agTextColumnFilter',
            sort: 'asc',
        },
        {
            field: 'fy',
            headerName: 'FY',
            filter: 'agSetColumnFilter',
			filterParams: { 
				values: c.data.fiscalYears
			},
            sort: 'desc',
            rowGroup: true   
        },
        {
            field: 'description',
            headerName: 'Description',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'tran_date',
            headerName: 'Trans. Date',
            filter: 'agDateColumnFilter',
			sort: 'desc'
        },
        {
            field: 'transaction_total_amt',
            headerName: 'Tran. Amount',
            cellStyle: {
                textAlign: 'right'
            },
            type: 'currency',
            filter: 'agNumberColumnFilter',
            aggFunc: 'sum',
            headerComponentParams: {
                template: '<div class="ag-cell-label-container" role="presentation">' +
                    '<span ref="eText" class="ag-header-cell-text" role="columnheader"></span>' +
                    '</div>'
            }
        },
        {
            field: 'appropriation_ref',
            headerName: 'Appropriation',
            filter: 'agTextColumnFilter',
            hide: true
        },
        {
            field: 'allocation_group_ref',
            headerName: 'Allocation Group',
            filter: 'agTextColumnFilter',
            hide: true
        },
        {
            field: 'cost_pool_ref',
            headerName: 'Cost Pool',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'contract_ref',
            headerName: 'Contract',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'obligation',
            headerName: 'Obligation',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'obligation_date',
            headerName: 'Obligation Date',
            filter: 'agDateColumnFilter'
        },
        {
            field: 'void',
            headerName: 'Void?',
            cellRenderer: 'checkbox'
        },
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'deleteCell',
            cellRendererParams: function(params) {
                return {
                    "show": c.canDelete(c.userAuth, params.data),
                    "banner": !params.node.group ? ("Financial Transaction - " + params.data.fin_tran_display) : null
                };
            }
        }
    ];

    var fintranItemDefs = [{
            field: 'edit_item',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'editCell',
            cellRendererParams: function(params) {
                return {
                    "show": c.canEdit(c.userAuth, params.data),
                    "table": c.data.itemTableName,
                    "parent": params.data.fin_tran_ref_rawval,
                    "banner": "Financial Transaction Item"
                };
            }
        },
        {
            field: 'item_qty',
            headerName: 'Order Quantity'
        },
        {
            field: 'estimated_cost',
            headerName: 'Estimated Cost',
            cellStyle: {
                textAlign: 'right'
            },
            type: 'currency',  
            aggFunc: 'sum',
            headerComponentParams: {
                template: '<div class="ag-cell-label-container" role="presentation">' +
                    '<span ref="eText" class="ag-header-cell-text" role="columnheader"></span>' +
                    '</div>'
            }
        },
        {
            field: 'received_qty',
            headerName: 'Received Quantity',
            filter: 'agNumberColumnFilter'
        },
        {
            field: 'actual_cost',
            headerName: 'Actual Cost',
            cellStyle: {
                textAlign: 'right'
            },
            type: 'currency',  
            aggFunc: 'sum',
            headerComponentParams: {
                template: '<div class="ag-cell-label-container" role="presentation">' +
                    '<span ref="eText" class="ag-header-cell-text" role="columnheader"></span>' +
                    '</div>'
            }
        },
        {
            field: 'expense_item_ref',
            headerName: 'Expense Item',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'post_ref',
            headerName: 'Post',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'omb_category_ref',
            headerName: 'OMB Category',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'delete_item',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            cellRenderer: 'deleteCell',
            cellRendererParams: function(params) {
                return {
                    "show": c.canEdit(c.userAuth, params.data),
                    "table": c.data.itemTableName,
                    "parent": params.data.fin_tran_ref_rawval,
                    "banner": "Financial Transaction Item - " + params.data.fin_tran_item_display
                };
            }
        }
    ];

    var fintranProps = {
        pageController: c,
        tableName: c.data.tableName,
        dataArray: null,
        pageType: 'Financial Transaction',
        linkedField: '',
        detailsPage: '',
        detailsHeight: 150,
		childTables: [{ banner: 'Transaction Items', name: c.data.itemTableName, columnDefs: fintranItemDefs, parentRef: 'fin_tran_ref' }]
    }

    fintranManager.setColumns(fintranColumnDefs);
    fintranManager.setPageProperties(fintranProps);
    fintranManager.setRenderers(); //build renderers 
    fintranManager.renderGrid('fintranGrid'); //render grid objects
    fintranManager.setGridData(c.data.tableData); //set grid data
	fintranManager.setGridFilter('fy', 'equals', c.data.selectedFY);
    fintranManager.setColumnsVisible(['edit', 'delete'], (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst));
    $timeout(function() {
        fintranManager.fitColumns();
    }, 250);

    $rootScope.$on('OrgChanged', function(event, args) {
        c.targetOrg = args.org_id;
        c.server.get({
            mode: "setOrg",
            org_id: args.org_id
        }).then(function(resp) {
            fintranManager.setGridData(resp.data.tableData); //set grid data
        });
    });

    $rootScope.$on('ProjChanged', function(event, args) {
        c.targetProj = args.proj_id;
        c.server.get({
            mode: "setProj",
            proj_id: args.proj_id
        }).then(function(resp) {
            fintranManager.setGridData(resp.data.tableData); //set grid data
        });
    });

}]]></client_script>
        <controller_as>c</controller_as>
        <css>.full-grid {&#13;
    width: 94vw;&#13;
    height: calc(100vh - 210px);&#13;
    clear: both;&#13;
}&#13;
&#13;
.fms-list-header {&#13;
    margin-bottom: 0px !important;&#13;
}&#13;
&#13;
.pageLabel {&#13;
    float: left;&#13;
    margin-right: 10px;&#13;
}&#13;
&#13;
.row-button {&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.new-button {&#13;
    float: left;&#13;
}&#13;
&#13;
.excel-button {&#13;
    float: right;&#13;
}&#13;
&#13;
.edit-pencil {&#13;
    color: #003ade;&#13;
    font-size: 13px;&#13;
}&#13;
&#13;
.delete-x {&#13;
    color: #000000;&#13;
    font-size: 13px;&#13;
}&#13;
&#13;
.updated-row {&#13;
    background-color: #FFFFCC;&#13;
}&#13;
&#13;
.tier-1-row {&#13;
    background-color: #ff707a;&#13;
}&#13;
&#13;
.tier-2-row {&#13;
    background-color: #ffffe0;&#13;
}&#13;
&#13;
.tier-3-row {&#13;
    background-color: #90ee90;&#13;
}&#13;
&#13;
.expired-row {&#13;
    background-color: #c5c5c5;&#13;
}&#13;
&#13;
.full-width-panel {&#13;
    position: relative;&#13;
    background: #EDF6FF;&#13;
    height: 100%;&#13;
    width: 100%;&#13;
    padding: 5px;&#13;
}&#13;
&#13;
.call-record-cell {&#13;
    text-align: right;&#13;
}&#13;
&#13;
.full-width-detail {&#13;
    padding-top: 4px;&#13;
}&#13;
&#13;
.full-width-title {&#13;
    font-size: 10pt;&#13;
    font-weight: bold;&#13;
    float: left;&#13;
}&#13;
&#13;
.details-button {&#13;
    float: right;&#13;
    margin-top: -13px;&#13;
}&#13;
&#13;
.full-width-details {&#13;
    float: left;&#13;
    padding: 5px;&#13;
    margin: 5px;&#13;
    width: 100%;&#13;
    clear: both;&#13;
}&#13;
&#13;
.details-grid {&#13;
    display: block;&#13;
    clear: both;&#13;
    height: 100px;&#13;
    margin-bottom: 5px;&#13;
}&#13;
&#13;
.full-width-grid-toolbar {&#13;
    top: 4px;&#13;
    left: 30px;&#13;
    margin-left: 150px;&#13;
    display: block;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.full-width-phone-icon {&#13;
    padding-right: 10px;&#13;
}&#13;
&#13;
.full-width-search {&#13;
    border: 1px solid #eee;&#13;
    margin-left: 10px;&#13;
}&#13;
&#13;
.ag-react-container {&#13;
    display: inline-block;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.ag-cell-focus,&#13;
.ag-cell-no-focus {&#13;
    border: none !important;&#13;
    box-shadow: none !important;&#13;
}&#13;
&#13;
.ag-cell:focus {&#13;
    border: none !important;&#13;
    outline: none;&#13;
    box-shadow: none !important;&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>financial_transaction_grid</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Financial Transaction Grid</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

	data.selectedOrg = "";
	data.selectedProj = "";
    var FMSUtility = new x_g_irm_fms.FMSUtilities(); //helper utility for FMS queries

    var session = gs.getSession();
	if (session.getClientData('org_id') && session.getClientData('org_id').length > 0)
		data.selectedOrg = session.getClientData('org_id');
	if (session.getClientData('proj_id') && session.getClientData('proj_id').length > 0)
		data.selectedProj = session.getClientData('proj_id');

    if (input) { //input holds the data coming back to the server
        if (input.mode == "getDetailData") {
            data[FMSConstants.TABLE_FINANCIAL_TRANSACTION_ITEM] = FMSUtility.getTableData(FMSConstants.TABLE_FINANCIAL_TRANSACTION_ITEM, input.parentRef + '=' + input.parentID, true); 
        }
        if (input.mode == "deleteRow") {
            FMSUtility.deleteRecord(FMSConstants.TABLE_FINANCIAL_TRANSACTION, input.rowID);
        }
        if (input.mode == "setOrg") {
            data.selectedOrg = input.org_id.toString();
		}
        if (input.mode == "setProj") {
            data.selectedProj = input.proj_id.toString();
        }
		
    } else {
        data.fiscalYears = FMSUtility.getFiscalYears();
        data.selectedFY = FMSUtility.getCurrentFY();
    }

	var filter = "";
	if (data.selectedProj.length > 0) filter = "project_ref=" + data.selectedProj;
	else if (data.selectedOrg.length > 0) filter = "project_ref.organization_ref=" + data.selectedOrg;
    data.tableData = FMSUtility.getTableData(FMSConstants.TABLE_FINANCIAL_TRANSACTION, filter, true); 

    data.tableName = FMSConstants.TABLE_FINANCIAL_TRANSACTION;
    data.itemTableName = FMSConstants.TABLE_FINANCIAL_TRANSACTION_ITEM;

})();



]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>MarkelJR@state.gov</sys_created_by>
        <sys_created_on>2020-05-21 14:05:50</sys_created_on>
        <sys_id>fc9bec2b1b3c5c100a4a10ad9c4bcb0e</sys_id>
        <sys_mod_count>120</sys_mod_count>
        <sys_name>Financial Transaction Grid</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy/>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sp_widget_fc9bec2b1b3c5c100a4a10ad9c4bcb0e</sys_update_name>
        <sys_updated_by>MarkelJR@state.gov</sys_updated_by>
        <sys_updated_on>2020-06-11 13:30:21</sys_updated_on>
        <template><![CDATA[<div style="width: 100%; height: 100%">

  <div class="container">
    <div class="row">
      <div class="form-group col-sm-12 fms-list-header">
        <div class="fms-header-buttons">
          <a href="javascript:void(0)" ng-click="c.addNew();" ng-show="c.canAdd()" class="btn btn-info new-button">Add Financial Transaction</a>
          <a href="javascript:void(0)" ng-click="c.exportExcel();" class="btn btn-primary excel-button">Export to Excel</a>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-sm-12">

        <div id="fintranGrid" class="ag-theme-balham full-grid"></div>

      </div>
    </div>
  </div>

</div>]]></template>
    </sp_widget>
</record_update>
