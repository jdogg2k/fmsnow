<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($scope, AGGridFactory, $timeout, spUtil, $uibModal, $http) {
    /* widget controller */
    var c = this;
    c.targetOrg = c.data.selectedOrg;
    c.targetProj = c.data.selectedProj;
    c.userAuth = $rootScope.userAuth;
    c.addingNewTrans = false;
    
    var fintranManager = new AGGridFactory();

    c.onload = function() {
        c.loadYears();
    }	

    c.loadYears = function() {
        $.each(c.data.fiscalYears, function( index, value ) {
            $('select.js-example-basic-multiple').append("<option value='" + value + "'>" + value + "</option>");
        });
        
        $('select.js-example-basic-multiple').select2({
            placeholder: 'Select a Year'
        }).val(c.data.selectedFY).trigger('change');
        
        $('select.js-example-basic-multiple').on('change', function (e) {
            if (e.val) {
                if (e.val.length > 0) {
                    c.server.get({
                        mode: "getTransData",
                        selFY: e.val.join(",")
                    }).then(function(resp) {
                        var model = fintranManager.gridOpts.api.getFilterModel();
                        fintranManager.setGridData(resp.data.tableData); //set grid data
                        fintranManager.gridOpts.api.setFilterModel(model);
                        //fintranManager.setGridFilter('fy', 'equals', resp.data.selectedFY);
                    });
                } else {
                    var model = fintranManager.gridOpts.api.getFilterModel();
                    fintranManager.setGridData([]); //set grid data
                    fintranManager.gridOpts.api.setFilterModel(model);
                    spUtil.addInfoMessage("Please select a valid fiscal year...");
                }
            }
        });
    }

  c.showDiv = function () {
		var page_id = $scope.page.sys_id;
		
		if(page_id =='62c511e11b7c94100a4a10ad9c4bcb75'){
			//alert(page_id);
			return true;
		}
		
		else
			return false;
	}

    c.addNew = function () {
        fintranManager.editRow("-1", "project_ref=" + c.targetProj, c.data.tableName);
			 // fintranManager.editRow("-1", "project_ref=" + c.targetProj, 'x_g_irm_fms_contract');
			
    }

    c.canAdd = function () {
        if (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst) {
            if (c.userAuth.orgs.indexOf(c.targetOrg) >= 0)
                return true;
            else
                return false;
        } else
            return false;
    }

    c.canEdit = function (auth, data) {
        if (!data) return false;
        if (auth.orgs.indexOf(c.targetOrg) >= 0 && (auth.roles.isOrgAdmin || auth.roles.isAnalyst))
            return true;
        else
            return false;
    }

    c.canDelete = function (auth, data) {
        return c.canEdit(auth, data);
    }

    c.exportExcel = function () {
        fintranManager.exportExcel();
        console.log($('#yearSelect').select2('data'));
    }

    var fintranColumnDefs = [{
            headerName: 'Project',
            field: 'project_ref',
            minWidth: 175,
		      filter: 'agTextColumnFilter',
		      	rowGroup: true,
            cellRenderer: 'agGroupCellRenderer',
            showRowGroup: true,
			
            cellRendererParams: {
                suppressCount: true,
                checkbox: false,
                suppressDoubleClickExpand: true,
                suppressEnterExpand: true,
                innerRenderer: 'myGroupCellRenderer',
                banner: {
                    type: 'standard',
                    columns: [{
                        label: '',
                        name: 'project_ref'
                    }]/*, {
                        label: " | FY: ",
                        name: "fy"
                    }]*/
                }
							
            }
        },
        {
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'editCell',
            cellRendererParams: function (params) {
                return {
                    "show": c.canEdit(c.userAuth, params)
                };
            }
        },
        {
            field: 'project_ref',
            headerName: 'Project',
            filter: 'agTextColumnFilter',
            sort: 'asc',
            hide: true
        },
        {
            field: 'tran_type',
            headerName: 'Tran Type',
            filter: 'agSetColumnFilter',
            sort: 'asc'
        },
        {
            field: 'tran_status',
            headerName: 'Status',
            filter: 'agSetColumnFilter',
            sort: 'asc',
            editable: function(params) {
                return c.canEdit(c.userAuth, params.data);
            }
        },
        {
            field: 'fy',
            headerName: 'FY',
            filter: 'agSetColumnFilter',
            sort: 'desc',
            editable: function(params) {
                return c.canEdit(c.userAuth, params.data);
            }
        },
        {
            field: 'description',
            headerName: 'Description',
            filter: 'agTextColumnFilter',
            editable: function(params) {
                return c.canEdit(c.userAuth, params.data);
            }
        },
        {
            field: 'tran_date',
            headerName: 'Trans. Date',
			type:'date',
            sort: 'desc',
            editable: function(params) {
                return c.canEdit(c.userAuth, params.data);
            }
        },
        {
            field: 'transaction_total_amt',
            headerName: 'Tran. Amount',
            cellStyle: {
                textAlign: 'right'
            },
            type: 'currency',
            filter: 'agNumberColumnFilter',
            aggFunc: 'sum',
            /*headerComponentParams: {
                template: '<div class="ag-cell-label-container" role="presentation">' +
                    '<span ref="eText" class="ag-header-cell-text" role="columnheader"></span>' +
                    '</div>'
            },*/
            sortable: true
        },
        {
            field: 'project_appropriation_ref',
            headerName: 'Appropriation',
            filter: 'agTextColumnFilter',
            editable: function(params) {
                return c.canEdit(c.userAuth, params.data);
            }
        },
        {
            field: 'allocation_group_ref',
            headerName: 'Allocation Group',
            filter: 'agTextColumnFilter',
            hide: true,
            editable: function(params) {
                return c.canEdit(c.userAuth, params.data);
            }
        },
		{
            field: 'project_appropriation_ref.appropriation_ref.appropriation_type.appropriation_type_display',
            headerName: 'Appropriation Type',
            filter: 'agSetColumnFilter'
        },							 
       /* {
            field: 'cost_pool_ref',
            headerName: 'Cost Pool',
            filter: 'agTextColumnFilter'
        },*/
					
        {
            field: 'contract_ref',
            headerName: 'Contract',
            filter: 'agTextColumnFilter',
            editable: function(params) {
                return c.canEdit(c.userAuth, params.data);
            }
        },
        {
            field: 'obligation',
            headerName: 'Obligation',
            filter: 'agTextColumnFilter',
            editable: function(params) {
                return c.canEdit(c.userAuth, params.data);
            },
            cellStyle: {
                color: 'blue',
                'text-decoration': 'underline',
                'cursor': 'pointer'
            }
        },
        {
            field: 'obligation_date',
            headerName: 'Obligation Date',
            type: 'date',
            editable: function(params) {
                return c.canEdit(c.userAuth, params.data);
            }
        },
        {
            field: 'void',
            headerName: 'Void?',
					  filter: 'agSetColumnFilter',
            filterParams: {
                values: [ true, false ]
            },
            cellRenderer: 'checkbox'
        },
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'deleteCell',
            cellRendererParams: function (params) {
                return {
                    "show": c.canDelete(c.userAuth, params.data),
                    "banner": !params.node.group ? ("Financial Transaction - " + params.data.fin_tran_display) : null
                };
            }
        }
    ];

    var fintranItemDefs = [{
            field: 'edit_item',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'editCell',
            cellRendererParams: function (params) {
                if (params.data) {
                    return {
                        "show": c.canEdit(c.userAuth, params.data),
                        "table": c.data.itemTableName,
                        "parent": params.data.fin_tran_ref_rawval,
                        "banner": "Financial Transaction Item"
                    };
                } else {
                    return {};
                }
            }
        },
        {
            field: 'tran_item',
            headerName: 'Item',
			sort: 'asc'
        },
        {
            field: 'item_qty',
            headerName: 'Order Quantity',
            editable: function(params) {
                return c.canEdit(c.userAuth, params.data);
            }
        },
        {
            field: 'item_cost',
            headerName: 'Estimated Cost',
            cellStyle: {
                textAlign: 'right'
            },
            type: 'currency',
            editable: function(params) {
                return c.canEdit(c.userAuth, params.data);
            },
            aggFunc: 'sum'
            /*headerComponentParams: {
                template: '<div class="ag-cell-label-container" role="presentation">' +
                    '<span ref="eText" class="ag-header-cell-text" role="columnheader"></span>' +
                    '</div>'
            }*/
        },
        {
            field: 'received_qty',
            headerName: 'Received Quantity',
            filter: 'agNumberColumnFilter',
            editable: function(params) {
                return c.canEdit(c.userAuth, params.data);
            }
        },
        {
            field: 'actual_cost',
            headerName: 'Actual Cost',
            cellStyle: {
                textAlign: 'right'
            },
            type: 'currency',
            editable: function(params) {
                return c.canEdit(c.userAuth, params.data);
            },
            aggFunc: 'sum'
            /*headerComponentParams: {
                template: '<div class="ag-cell-label-container" role="presentation">' +
                    '<span ref="eText" class="ag-header-cell-text" role="columnheader"></span>' +
                    '</div>'
            }*/
        },
			  {
            field: 'item_total',
            headerName: 'Total Cost',
            cellStyle: {
                textAlign: 'right'
            },
            type: 'currency',
            aggFunc: 'sum'
				},	
				{
            field: 'unliquidated_obligation',
            headerName: 'Unliquidated Obligation	',
            cellStyle: {
                textAlign: 'right'
            },
            type: 'currency',
            aggFunc: 'sum'
				},											 
        {
            field: 'expense_item_ref',
            headerName: 'Expense Item',
            filter: 'agTextColumnFilter',
            editable: function(params) {
                return c.canEdit(c.userAuth, params.data);
            }
        },
				{
            field: 'irm_f_cost_pool',
            headerName: 'BOC/Cost Pool',
            filter: 'agTextColumnFilter',
            editable: function(params) {
                return c.canEdit(c.userAuth, params.data);
            }
        },
														 
        {
            field: 'post_ref',
            headerName: 'Post',
            filter: 'agTextColumnFilter',
            editable: function(params) {
                return c.canEdit(c.userAuth, params.data);
            }
        },
        {
            field: 'omb_category_ref',
            headerName: 'OMB Category',
            filter: 'agTextColumnFilter',
            editable: function(params) {
                return c.canEdit(c.userAuth, params.data);
            }
        },
        {
            field: 'delete_item',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            cellRenderer: 'deleteCell',
            cellRendererParams: function (params) {
                if (params.data) {
                    return {
                        "show": c.canEdit(c.userAuth, params.data),
                        "table": c.data.itemTableName,
                        "parent": params.data.fin_tran_ref_rawval,
                        "banner": "Financial Transaction Item - " + params.data.fin_tran_item_display
                    };
                } else {
                    return {};
                }
            }
        }
    ];

    var fintranProps = {
        pageController: c,
        tableName: c.data.tableName,
        dataArray: null,
        pageType: 'Financial Transaction',
        linkedField: 'obligation',
        detailsPage: 'obligation_reconciliation',
        detailsHeight: 150,
        groupDefaultExpanded: 1,
		enableSNowInlineEdit: true,
        childTables: [{
            banner: 'Transaction Items',
            name: c.data.itemTableName,
            columnDefs: fintranItemDefs,
            parentRef: 'fin_tran_ref',
					  showButton: c.canAdd()
        }]
    }

    fintranManager.setColumns(fintranColumnDefs);
    fintranManager.setPageProperties(fintranProps);
    fintranManager.setRenderers(); //build renderers 
    fintranManager.renderGrid('fintranGrid'); //render grid objects
    fintranManager.setGridData(c.data.tableData); //set grid data
    //fintranManager.setGridFilter('fy', 'equals', c.data.selectedFY);
    fintranManager.setColumnsVisible(['edit', 'delete'], (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst));
    $timeout(function () {
        fintranManager.fitColumns();
    }, 250);

    $rootScope.$on('fmsgrid.recordAdded.refresh', function (event, args) { //branch out proper row on transaction add
        var targetSys = args.sys_id;
        var targetTable = args.table;

        if (targetTable == c.data.tableName) {
            fintranManager.gridOpts.api.forEachNode(function(rowNode, index) {
                if (rowNode.data) {
                    if (rowNode.data.sys_id == targetSys) {
										
                        c.addingNewTrans = true;
											
                        rowNode.setExpanded(true); //expand
                    }      
                }
            });
        }

    });

    $rootScope.$on('fms.transgrid.visible', function (event, args) { //branch out proper row on transaction add
		
        if (!c.addingNewTrans) {
					
            fintranManager.editDetailGridRow("-1", "fin_tran_ref=" + args.sys_id, c.data.itemTableName, args.detailName, "detail_" + args.detailTable + args.sys_id);
            c.addingNewTrans = false;
        }
    });


    $rootScope.$on('OrgChanged', function (event, args) {
        c.targetOrg = args.org_id;
        c.server.get({
            mode: "setOrg",
            org_id: args.org_id
        }).then(function (resp) {
            var model = fintranManager.gridOpts.api.getFilterModel();
            fintranManager.setGridData(resp.data.tableData); //set grid data
            fintranManager.gridOpts.api.setFilterModel(model);
        });
    });

    $rootScope.$on('ProjChanged', function (event, args) {
        c.targetProj = args.proj_id;
        c.server.get({
            mode: "setProj",
            proj_id: args.proj_id
        }).then(function (resp) {
            var model = fintranManager.gridOpts.api.getFilterModel();
            fintranManager.setGridData(resp.data.tableData); //set grid data
            fintranManager.gridOpts.api.setFilterModel(model);
        });
    });

	$rootScope.$on('BudgetChanged', function(event, args) {
        c.targetProj = args.proj_id;
        c.server.get({
            mode: "setProj",
            proj_id: args.proj_id
        }).then(function(resp) {
            var model = fintranManager.gridOpts.api.getFilterModel();
            fintranManager.setGridData(resp.data.tableData); //set grid data
            fintranManager.gridOpts.api.setFilterModel(model);
			//fintranManager.setGridFilter('fy', 'equals', args.fy);
        });
    });

    $rootScope.$on('BudgetDetailsGridChanged', function(event, args) {
        c.loadYears();
    });

	$rootScope.$on('fmsgrid.recordAdded', function(event, args) {
		updateParentRow(args.table, args.sys_id, args.row_data); 
    });
	$rootScope.$on('fmsgrid.recordUpdated', function(event, args) {
		updateParentRow(args.table, args.sys_id, args.row_data);  
    });
	$rootScope.$on('fmsgrid.recordDeleted', function(event, args) {
		updateParentRow(args.table, args.sys_id, args.row_data);  
    });

    function updateParentRow(tableName, rowID, rowData) {
		if (tableName != c.data.itemTableName) return; 
		c.server.get({
			mode: 'getParent',
			sys_id: rowID,
			targetTable: tableName,
			row_data: rowData
		}).then(function (response) {
			var updatedParent = response.data.parentRec;
			fintranManager.gridOpts.api.forEachNode(function (rowNode, index) {
				if (rowNode.data) {
					if (rowNode.data.sys_id == updatedParent.sys_id) {
						rowNode.setDataValue("transaction_total_amt", updatedParent.transaction_total_amt);
					}
				}
			});
			fintranManager.gridOpts.api.redrawRows(); //redraw the renderer so we the icons can change
		});
    }
	
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.yearSelection {&#13;
    float: left;&#13;
    margin-right: 5px;&#13;
}&#13;
.yearLabel {&#13;
    margin-top: 5px;&#13;
}&#13;
.select2-input {&#13;
    min-width: 100px !important;&#13;
}&#13;
&#13;
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>financial_transaction_grid</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Financial Transaction Grid</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

    data.selectedOrg = "";
    data.selectedProj = "";
    data.selectedFY = "";
    // data.isOnSpecific = true;


    //	gs.addInfoMessage("load"+data.selectedProj+"test");
    var FMSUtility = new x_g_irm_fms.FMSUtilities(); //helper utility for FMS queries
    var FMSPermissions = new x_g_irm_fms.FMSPermissions();

    var session = gs.getSession();
    if (session.getClientData('org_id') && session.getClientData('org_id').length > 0)
        data.selectedOrg = session.getClientData('org_id');
    if (session.getClientData('proj_id') && session.getClientData('proj_id').length > 0)
        data.selectedProj = session.getClientData('proj_id');
    if (session.getClientData('fintran_fy') && session.getClientData('fintran_fy').length > 0)
        data.selectedFY = session.getClientData('fintran_fy');

    if (input) { //input holds the data coming back to the server

        if (input.mode == "getDetailData") {
            data[input.detailTable] = FMSUtility.getTableData(input.detailTable, input.parentRef + '=' + input.parentID, true);
        }
        if (input.mode == "getNewRec") {
            data.newRec = FMSUtility.getTableData(input.targetTable, "sys_id=" + input.newSysID, true)[0];
        }
        if (input.mode == "getParent") {
			var itemRec;
            var financialRefID = "";
			if (input.row_data)
				itemRec = input.row_data;
			else
				itemRec = FMSUtility.getTableData(input.targetTable, "sys_id=" + input.sys_id, true)[0];

            financialRefID = itemRec.fin_tran_ref_rawval;
            data.parentRec = FMSUtility.getTableData(FMSConstants.TABLE_FINANCIAL_TRANSACTION, "sys_id=" + financialRefID, true)[0];
        }
        if (input.mode == "deleteRow") {
           // if (FMSPermissions.canDeletefinTrans(input.rowID)) {
                FMSUtility.deleteRecord(input.delTable, input.rowID);
          //  } else {
          //      data.isError = true;
          //      data.errorMsg = "This Transaction cannot be deleted as it is linked to existing Purchase Order";
         //   }
        }
        if (input.mode == "setOrg") {
            data.selectedOrg = input.org_id.toString();
        }
        if (input.mode == "setProj") {
            data.selectedProj = input.proj_id.toString();
        }
        if (input.mode == "getTransData") {
            data.selectedFY = input.selFY.toString();
            session.putClientData('fintran_fy', data.selectedFY);
        }

    } else if ($sp.getParameter("budget_id") && $sp.getParameter("budget_id").length > 0) {
        data.selectedBudgetID = $sp.getParameter("budget_id");
        var bud = FMSUtility.getTableData(FMSConstants.TABLE_BUDGET, "sys_id=" + data.selectedBudgetID, true)[0];
        if (bud) {
            data.selectedProj = bud.project_ref_rawval;
            data.selectedFY = bud.fy;
        }
    } else {
        data.fiscalYears = FMSUtility.getFiscalYears();
        data.fiscalYears.reverse();
        data.selectedFY = FMSUtility.getCurrentFY();
        session.putClientData('fintran_fy', data.selectedFY);
    }

    //var filter = "fy=2021"; make FYs come from client control
    var filter = "fyIN" + data.selectedFY;
    if (data.selectedProj.length > 0) filter += "^project_ref=" + data.selectedProj;
    else if (data.selectedOrg.length > 0) filter += "^project_ref.organization_ref=" + data.selectedOrg;

    var appropriationTypeInclude = ['project_appropriation_ref.appropriation_ref.appropriation_type.appropriation_type_display'];
    data.tableData = FMSUtility.getTableData(FMSConstants.TABLE_FINANCIAL_TRANSACTION, filter, true, appropriationTypeInclude);

    data.tableName = FMSConstants.TABLE_FINANCIAL_TRANSACTION;
    data.itemTableName = FMSConstants.TABLE_FINANCIAL_TRANSACTION_ITEM;

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>MarkelJR@state.gov</sys_created_by>
        <sys_created_on>2020-05-21 14:05:50</sys_created_on>
        <sys_id>fc9bec2b1b3c5c100a4a10ad9c4bcb0e</sys_id>
        <sys_mod_count>625</sys_mod_count>
        <sys_name>Financial Transaction Grid</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy/>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sp_widget_fc9bec2b1b3c5c100a4a10ad9c4bcb0e</sys_update_name>
        <sys_updated_by>PuriA@state.gov</sys_updated_by>
        <sys_updated_on>2021-05-21 19:23:21</sys_updated_on>
        <template><![CDATA[<div style="width: 100%; height: 100%" ng-init="c.onload()">
 <link href="//cdnjs.cloudflare.com/ajax/libs/select2/4.0.1/css/select2.min.css" rel="stylesheet" />
    <div class="container">
      <div class="row">
        <div class="form-group col-sm-12 fms-list-header">
          <div class="fms-header-buttons">
            <div class="yearSelection yearLabel" ng-show="!c.showDiv()"> 
               
                Fiscal Years Loaded: 
            </div>
            <div class="yearSelection" ng-show="!c.showDiv()"> 
              <select id="yearSelect" class="js-example-basic-multiple" multiple="multiple"/>
            </div>
              
            <a href="javascript:void(0)" ng-click="c.exportExcel();" class="btn btn-primary excel-button">Export to Excel</a>
            <a href="javascript:void(0)" ng-click="c.addNew();" ng-show="c.canAdd()" class="btn btn-info new-button">Add Financial Transaction</a>
          </div>
        </div>
      </div>
  
      <div class="row">
        <div class="col-sm-12">
             <div id="fintranGrid" class="ag-theme-balham full-grid"></div>
        </div>
      </div>
    </div>
  
  </div>]]></template>
    </sp_widget>
</record_update>
