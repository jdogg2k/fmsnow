<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function ($timeout, $scope, spUtil, spModal) {
	/* widget controller */

	var c = this;
	c.savedStates = {};
	c.gridActive = false;
	c.targetOrg = c.data.selectedOrgID;
	c.rowGrps = [];
	c.usePivot = true;
	c.canSort = true;
	c.hideValues = false;
	c.userAuth = $rootScope.userAuth;
	c.selectedBudgetType = "Baseline";
	c.datesSelected = false;
	c.selectedProject = "";
	c.loadCount = 0;
	
	if (c.data.projects.length > 0 && c.data.reportType == "phasing")
		c.selectedProject = c.data.projects[0].value;

	c.reportData = [];

	c.data.obligationTypes = [{
		name: "Liquidated",
		value: "liquidated"
	},
	{
		name: "Unliquidated",
		value: "unliquidated"
	},
	{
		name: "Both",
		value: "both"
	}];

	c.selectedObligationType = "unliquidated";

	function getCurrentFinancialYear(type) {
		var startYear = "";
		var endYear = "";
		var docDate = new Date();
		if ((docDate.getMonth() + 1) <= 8) {
			startYear = docDate.getFullYear() - 1;
			endYear = docDate.getFullYear();
		} else {
			startYear = docDate.getFullYear();
			endYear = docDate.getFullYear() + 1;
		}

		if (type == "end") {
			return new Date(endYear, 8, 30);
		} else if (type == "start") {
			return new Date(startYear, 9, 1);
		} else {
			return endYear.toString();
		}
	}

	function parseDate(s) {
		var d = new Date();
		var retDate = s;
		var months = {jan:0,feb:1,mar:2,apr:3,may:4,jun:5,jul:6,aug:7,sep:8,oct:9,nov:10,dec:11};
		
		if ( Object.prototype.toString.call(s) === "[object Date]" )  {
			d = s;
			retDate = d.toISOString().split('T')[0];
		}

		return retDate;
	}
	
	c.saveState = function() {
		c.savedStates.columnState = gridOptions.columnApi.getColumnState();
		c.savedStates.groupState = gridOptions.columnApi.getColumnGroupState();
		c.savedStates.sortState = gridOptions.api.getSortModel();
		c.savedStates.filterState = gridOptions.api.getFilterModel();
	};
	c.setState = function(savedStates) {
		gridOptions.columnApi.setColumnState(savedStates.columnState);
		gridOptions.columnApi.setColumnGroupState(savedStates.groupState);
		gridOptions.api.setSortModel(savedStates.sortState);
		gridOptions.api.setFilterModel(savedStates.filterState);
	};

	c.savePref = function(rptType) {
		spModal.confirm("Save the current report layout as ongoing default format?").then(function(confirmed) {
			if (confirmed) {
				c.server.get({
					mode: "savePreference",
					value: { 
						columnState: gridOptions.columnApi.getColumnState(),
						groupState: gridOptions.columnApi.getColumnGroupState(),
						sortState: gridOptions.api.getSortModel(),
						filterState: gridOptions.api.getFilterModel()
					}
				}).then(function(resp) {
					spUtil.addTrivialMessage("Report preference saved");
				});
			}
		});
	};

	c.deletePref = function(rptType) {
		spModal.confirm("Restore the default report layout?").then(function(confirmed) {
			if (confirmed) {
				c.data.reportPref = null;
				c.setState(c.savedStates);
				spUtil.setPreference(c.data.prefPrefix + c.data.reportType + ".state", null);
				spUtil.addTrivialMessage("Report preference deleted");
				c.generateReport();
			} 
		});
	};

	c.startdt = {
		displayValue: getCurrentFinancialYear("start").toLocaleDateString(),
		value: getCurrentFinancialYear("start"),
		name: 'startdt'
	};
	c.enddt = {
		displayValue: getCurrentFinancialYear("end").toLocaleDateString(),
		value: getCurrentFinancialYear("end"),
		name: 'enddt'
	};

	c.setDates = function() {
		if (!c.datesSelected) {
			c.datesSelected = true;
		} else {
			c.generateReport();
			c.datesSelected = false;
		}
	};

	c.generateReport = function () {

		if (c.targetOrg != "") {
			c.saveState();
			var reportObj = {
				mode: 'buildReport',
				orgs: c.targetOrg
			};

			if (c.data.reportType == "budget_plans" || c.data.reportType == "phasing")
				reportObj.budget_type = c.selectedBudgetType;

			if (c.data.reportType == "phasing")
				reportObj.project = c.selectedProject;

			if (c.data.reportType == "obligation")
				reportObj.obStatus = c.selectedObligationType;

			if (c.data.reportType == "financial_transaction") {
				reportObj.start_date = parseDate(c.startdt.value);
				reportObj.end_date = parseDate(c.enddt.value);
			} else {
				reportObj.fy = c.selectedFY;
			}

			c.server.get(reportObj).then(function (reportResults) {
				c.reportData = reportResults.data.reportData;
				gridOptions.api.setColumnDefs(generateColumns());
				gridOptions.api.setRowData(c.reportData);

				if (c.data.reportType == "financial_transaction") {
					var allColumnIds = [];
					gridOptions.columnApi.getAllColumns().forEach(function (column) {
						allColumnIds.push(column.colId);
					});

					gridOptions.columnApi.autoSizeColumns(allColumnIds, false);
				}
				

				if (c.data.reportType != "phasing" && c.data.reportType != "financial_transaction")
					gridOptions.api.sizeColumnsToFit();
				if (c.data.reportType == "financial_transaction" || c.data.reportType == "phasing"){
					c.toggleExpand(true);
				}
					
				if (c.data.reportPref && c.data.reportPref.columnState != null) {
					if (c.loadCount ==0 ) spUtil.addTrivialMessage("Report preferred laout loaded");
					c.setState(c.data.reportPref);
				} 
			});
		}
	};
	
	c.getReportTitle = function() {
		var title = "";
		c.usePivot = true;
		c.hideValues = false;

		switch (c.data.reportType) {
			case "allocation":
				title = "Allocation Activity";
				c.rowGrps = [ "investment", "project", "appropriation" ];
				break;
			case "baseline":
				title = "Baseline Activity";
				c.rowGrps = [ "investment", "project", "budget_code", "activity_code" ];
				break;
			case "budget_plans":
				title = "Budget Plans";
				c.rowGrps = [ "org_name", "project", "budget_code", "activity_code" ];
				break;
			case "financial_transaction":
				title = "Financial Transaction Detail";
				c.rowGrps = [ "investment", "project", "budget_code", "activity_code" ];
				c.usePivot = false;
				c.hideValues = true;
				break;
			case "funding_due_in":
				title = "Funding Due-In";
				c.rowGrps = [ "budget_code", "activity_code" ];
				break;
			case "monthly_expenditure":
				title = "Monthly Expenditure";
				c.rowGrps = [ "budget_code", "activity_code" ];
				break;
			case "obligation":
				title = "Obligation Reconciliation";
				c.rowGrps = [ "obligation" ];
				c.usePivot = false;
				c.hideValues = true;
				break;
			case "phasing":
				title = "Phasing Plan";
				c.rowGrps = [ "budget_code", "activity_code" ];
				c.usePivot = false;
				c.hideValues = true;
				c.canSort = false;
		}
		title += " Report";
		return title;
	};

	c.reportTitle = c.getReportTitle();

	c.toggleExpand = function (mode) {
		gridOptions.api.forEachNode(function (rowNode, index) {
			if (rowNode.group)
				rowNode.setExpanded(mode);
		});
	};

	function currencyCssFunc(params) {
		if (params.value !== null && params.value !== undefined && params.value < 0) {
			return {
				"color": "red",
				"font-weight": "bold",
				"text-align": "right"
			};
		} else {
			return {
				"text-align": "right"
			};
		}
	}

	function currencyFormatter(params) {
		if (params.value != 0 && (params.value === null || params.value === undefined || params.value == "")) {
			return null;
		} else if (isNaN(params.value)) {
			return '$' + parseFloat(0).toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
		} else {
			if (parseFloat(params.value) >= 0) {
				return '$' + parseFloat(params.value).toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
			} else {
				return currencyNegative(params.value);
			}
		}
	}

	function phasingCurrencyFormatter(params) {
		if (params.value != 0 && (params.value === null || params.value === undefined || params.value == "")) {
			return null;
		} else if (isNaN(params.value)) {
			return '$' + parseFloat(0).toFixed(0).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
		} else {
			if (parseFloat(params.value) > 0) {
				return '$' + parseFloat(params.value).toFixed(0).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
			} else if (parseFloat(params.value) == 0) {
				return '-';
			} else {
				return currencyNegative(params.value);
			}
		}
	}

	function currencyNegative(tVal) {
		return '$(' + parseFloat(tVal).toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,").replace("-", "") + ")";
	}

	function generateColumns() {
		var colArray = [];
		if (c.data.reportType == "allocation" || c.data.reportType == "financial_transaction") {

			var appropCol = {
				headerName: 'Appropriation',
				field: 'appropriation',
				colId: 'appropriation',			
				enableRowGroup: true,
				enablePivot: true,
				filter: true
			};

			if (c.data.reportType == "financial_transaction") {
				appropCol.hide = true;
			}

			colArray.push(appropCol);

			if (c.data.reportType == "allocation") {
				colArray.push({
					headerName: 'Appropriation Type',
					field: 'appropriation_type',
					colId: 'appropriation_type',
					enableRowGroup: true,
					enablePivot: true,
					hide: c.hideValues,
					filter: true
				});
			}

			colArray.push({
				headerName: 'Allocation Group',
				field: 'allocation_group',
				colId: 'allocation_group',
				enableRowGroup: true,
				hide: c.hideValues,
				filter: true
            });
		}

		if (c.data.reportType == "budget_plans") {
			colArray.push({
                headerName: 'Budget',
                field: 'budget_name',
				colId: 'budget_name',
				enableRowGroup: true,
				filter: true
			});
		}
		
		if (c.data.reportType != "allocation" && c.data.reportType != "obligation") {
			
            colArray.push({
                headerName: 'Budget Code',
                field: 'budget_code',
				colId: 'budget_code',
                enableRowGroup: true,
				filter: true,
				hide: c.hideValues,
				minWidth: 225
			});
			colArray.push({
                headerName: 'Activty Code',
                field: 'activity_code',
				colId: 'activity_code',
				enableRowGroup: true,
				filter: true,
				hide: c.hideValues,
				minWidth: 175
			});

		}

		if (c.data.reportType == "baseline" || c.data.reportType == "budget_plans" || c.data.reportType == "financial_transaction" || c.data.reportType == "monthly_expenditure") {
			
            colArray.push({
                headerName: 'Parent Budget Code',
                field: 'budget_code_roll',
				colId: 'budget_code_roll',
                enableRowGroup: true,
				rowGroup: false,
				filter: true,
				hide: true,
				minWidth: 225
			});
			colArray.push({
                headerName: 'Parent Activity Code',
                field: 'activity_code_roll',
				colId: 'activity_code_roll',
				enableRowGroup: true,
				rowGroup: false,
				filter: true,
				hide: true,
				minWidth: 175
			});

		}

		if (c.data.reportType != "obligation") {

			colArray.push({
				headerName: 'Investment',
				field: 'investment',
				colId: 'investment',
				enableRowGroup: true,
				filter: true,
				hide: c.hideValues
			});
			
		}

		var orgCol = {
			headerName: 'Organization',
			field: 'org_name',
			colId: 'org_name',
			enablePivot: true,
			enableRowGroup: true,
			filter: true,
			hide: c.hideValues
		};

		colArray.push(orgCol);

		if (c.data.reportType != "phasing") {
			var projCol = {
				headerName: 'Project',
				field: 'project',
				colId: 'project',
				pivot: false,
				enablePivot: true,
				enableRowGroup: true,
				filter: true,
				hide: c.hideValues
			};

			colArray.push(projCol);
		}
        colArray.push({
            headerName: 'OMB Project',
            field: 'omb_project',
			colId: 'omb_project',
            pivot: false,
            enablePivot: true,
            enableRowGroup: true,
			filter: true,
			hide: c.hideValues
		});

		if (c.data.reportType != "obligation") {
			colArray.push({
				headerName: 'IT Tower',
				field: 'it_tower',
				colId: 'it_tower',
				pivot: false,
				enablePivot: true,
				enableRowGroup: true,
				filter: true,
				hide: c.data.reportType != "financial_transaction"
			});
		}

		if (c.data.reportType == "budget_plans") {
			colArray.push({
                headerName: 'Budget Amount',
                field: 'budget',
				colId: 'budget',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
		}

		if (c.data.reportType == "obligation") {
			colArray.push({
                headerName: 'Obligation',
				field: 'obligation',
				colId: 'obligation',
				enableRowGroup: true,
				filter: true,
				hide: c.hideValues
			});
			colArray.push({
                headerName: 'Source',
				field: 'source',
				colId: 'source',
				filter: true,
                enableValue: true
			});
			colArray.push({
                headerName: 'Status',
				field: 'status',
				colId: 'status',
				filter: true,
                enableValue: true
			});
			colArray.push({
                headerName: 'Trans. Amount',
                field: 'trans_amount',
				colId: 'trans_amount',
				aggFunc: 'sum',
				filter: 'agNumberColumnFilter',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'Invoice Amount',
				field: 'invoice_amount',
				colId: 'invoice_amount',
				aggFunc: 'sum',
				type: 'currency',
				filter: 'agNumberColumnFilter',
                enableValue: true
			});
			colArray.push({
                headerName: 'Paid Amount',
				field: 'paid_amount',
				colId: 'paid_amount',
				aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'Paid Date',
                field: 'paid_date',
				colId: 'paid_date',
                enableValue: true
			});
			colArray.push({
                headerName: 'Estimated Cost',
				field: 'estimated_cost',
				colId: 'estimated_cost',
				aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'Invoice Number',
                field: 'invoice_number',
				colId: 'invoice_number',
                enableValue: true
			});
			colArray.push({
                headerName: 'Contract PIID',
                field: 'contract_piid',
				colId: 'contract_piid',
                enableValue: true
			});
			colArray.push({
                headerName: 'Reference Number',
                field: 'reference_number',
				colId: 'reference_number',
                enableValue: true
			});
			colArray.push({
				headerName: 'Remaining',
				field: 'remaining',
				colId: 'remaining',
				aggFunc: 'sum',
                type: 'currency',
                enableValue: true,
				filter: 'agNumberColumnFilter'
			});
			colArray.push({
                headerName: 'Notes',
                field: 'notes',
				colId: 'notes',
                enableValue: true
			});
		}

		if (c.data.reportType == "phasing") {
			colArray.push({
                headerName: 'Budget',
                field: 'budget',
				colId: 'budget',
				filter: true,
				hide: true,
				enableRowGroup: true
			});
			colArray.push({
                headerName: '',
				field: 'm1',
				colId: 'm1',
				width: 50,
				lockVisible: true
			});
			colArray.push({
                headerName: 'Q1',
                field: 'q1',
				colId: 'q1',
				filter: 'agNumberColumnFilter',
				type: 'phasingCurrency',
				width: 130,
                lockVisible: true
			});
			colArray.push({
                headerName: '',
				field: 'm2',
				colId: 'm2',
				width: 50,
				lockVisible: true
			});
			colArray.push({
                headerName: 'Q2',
                field: 'q2',
				colId: 'q2',
				filter: 'agNumberColumnFilter',
                type: 'phasingCurrency',
				width: 130,
                lockVisible: true
			});
			colArray.push({
                headerName: '',
				field: 'm3',
				colId: 'm3',
				width: 50,
				lockVisible: true
			});
			colArray.push({
                headerName: 'Q3',
                field: 'q3',
				colId: 'q3',
				filter: 'agNumberColumnFilter',
                type: 'phasingCurrency',
				width: 130,
                lockVisible: true
			});
			colArray.push({
                headerName: '',
				field: 'm4',
				colId: 'm4',
				width: 55,
				lockVisible: true
			});
			colArray.push({
                headerName: 'Q4',
                field: 'q4',
				colId: 'q4',
				filter: 'agNumberColumnFilter',
                type: 'phasingCurrency',
				width: 130,
                lockVisible: true
			});
			colArray.push({
				headerName: 'Total',
				field: 'total',
				colId: 'qtotal',
				filter: 'agNumberColumnFilter',
                type: 'phasingCurrency',
				width: 130,
				lockVisible: true,
				valueGetter: function(params) {
					if (params.data) {
						if (params.data.m1 == "Q1:")
							return params.data.total;
					}
				}
			});
		}

		if (c.data.reportType == "financial_transaction") {
			colArray.push({
                headerName: 'Trans. Amount',
                field: 'trans_amount',
				colId: 'trans_amount',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'Trans. Date',
                field: 'trans_date',
				colId: 'trans_date',
                enableValue: true
			});
			colArray.push({
                headerName: 'Item Number',
                field: 'item_number',
				colId: 'item_number',
                enableValue: true,
				hide: true
			});
			colArray.push({
                headerName: 'Item Qty',
                field: 'item_qty',
				colId: 'item_qty',
                enableValue: true,
				hide: true
			});
		}
		
		if (c.data.reportType == "baseline" || c.data.reportType == "funding_due_in") {
            colArray.push({
                headerName: 'Baseline',
                field: 'baseline',
				colId: 'baseline',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'Execution',
                field: 'execution',
				colId: 'execution',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			if (c.data.reportType == "baseline") {
				colArray.push({
					headerName: 'Transfer',
					field: 'transfer',
                    colId: 'transfer',
					aggFunc: 'sum',
					type: 'currency',
					enableValue: true
				});
				colArray.push({
					headerName: 'In Progress',
					field: 'in_progress',
                    colId: 'in_progress',
					aggFunc: 'sum',
					type: 'currency',
					enableValue: true
				});
				colArray.push({
					headerName: 'Initiated',
					field: 'initiated',
                    colId: 'initiated',
					aggFunc: 'sum',
					type: 'currency',
					enableValue: true
				});
				colArray.push({
					headerName: 'Committed',
					field: 'committed',
                    colId: 'committed',
					aggFunc: 'sum',
					type: 'currency',
					enableValue: true
				});
				colArray.push({
					headerName: 'Obligated',
					field: 'obligated',
                    colId: 'obligated',
					aggFunc: 'sum',
					type: 'currency',
					enableValue: true
				});
			} else {
				colArray.push({
					headerName: 'Q1',
					field: 'q1',
                    colId: 'q1',
					aggFunc: 'sum',
					type: 'currency',
					enableValue: true
				});
				colArray.push({
					headerName: 'Q2',
					field: 'q2',
                    colId: 'q2',
					aggFunc: 'sum',
					type: 'currency',
					enableValue: true
				});
				colArray.push({
					headerName: 'Q3',
					field: 'q3',
                    colId: 'q3',
					aggFunc: 'sum',
					type: 'currency',
					enableValue: true
				});
				colArray.push({
					headerName: 'Q4',
					field: 'q4',
                    colId: 'q4',
					aggFunc: 'sum',
					type: 'currency',
					enableValue: true
				});
				colArray.push({
					headerName: 'Due-In Amount',
					field: 'due_in',
                    colId: 'due_in',
					aggFunc: 'sum',
					type: 'currency',
					enableValue: true
				});
			}
		}

		if (c.data.reportType == "financial_transaction") {
			colArray.push({
                headerName: 'Void',
				field: 'void',
				colId: 'void',
				filter: true,
				hide: true,
				lockVisible: false
			});
			colArray.push({
                headerName: 'Item Cost',
                field: 'item_cost',
				colId: 'item_cost',
                type: 'currency',
                enableValue: true,
				hide: true
			});
			colArray.push({
                headerName: 'Actual Cost',
                field: 'actual_cost',
				colId: 'actual_cost',
                type: 'currency',
                enableValue: true,
				hide: true
			});
			colArray.push({
                headerName: 'Received Qty',
                field: 'received_qty',
				colId: 'received_qty',
                enableValue: true,
				hide: true
			});
			colArray.push({
                headerName: 'OMB300 Category',
                field: 'omb_category',
				colId: 'omb_category',
				filter: true,
				enableRowGroup: true,
               enableValue: true
			});
			colArray.push({
                headerName: 'Allotment',
				field: 'allotment',
				colId: 'allotment',
				enableRowGroup: true,
				filter: true,
				hide: true,
				lockVisible: true
			});
			colArray.push({
               headerName: 'BOC / Cost Pool',
				field: 'cost_pool',
				colId: 'cost_pool',
				enableRowGroup: true,
				filter: true
			});
			colArray.push({
                headerName: 'Sub Cost Pool',
				field: 'sub_cost_pool',
				colId: 'sub_cost_pool',
				enableRowGroup: true,
				filter: true
			});
			colArray.push({
                headerName: 'Cloud Related?',
				field: 'cloud_related',
				colId: 'cloud_related',
				filter: true
			});
			colArray.push({
				headerName: 'Post',
				enableRowGroup: true,
                field: 'post',
				colId: 'post',
                enableValue: true,
				hide: true
			});
			colArray.push({
				headerName: 'Trans. Type',
				enableRowGroup: true,
                field: 'trans_type',
				colId: 'trans_type',
                enableValue: true,
				filter: true
			});
			colArray.push({
				headerName: 'Trans. Status',
				enableRowGroup: true,
                field: 'trans_status',
				colId: 'trans_status',
                enableValue: true,
				filter: true
			});
			colArray.push({
                headerName: 'Obligation',
				field: 'obligation',
				colId: 'obligation',
				enableRowGroup: true,
                enableValue: true,
				filter: true
			});
			colArray.push({
				headerName: 'PR Number',
                field: 'pr_number',
				colId: 'pr_number',
                enableValue: true,
				filter: true
			});
			colArray.push({
				headerName: 'Contract PIID',
				enableRowGroup: true,
                field: 'contract_piid',
				colId: 'contract_piid',
                enableValue: true
			});
			colArray.push({
				headerName: 'Award Number',
				enableRowGroup: true,
                field: 'award_number',
				colId: 'award_number',
                enableValue: true,
				hide: true
			});
			colArray.push({
                headerName: 'Description',
				field: 'description',
				colId: 'description',
                enableValue: true
			});
			colArray.push({
                headerName: 'Quote Vendor Name',
				field: 'quote_vendor_name',
				colId: 'quote_vendor_name',
                enableValue: true,
				hide: true
			});
			colArray.push({
                headerName: 'Vendor Name',
				field: 'vendor_name',
				colId: 'vendor_name',
                enableValue: true
            });
            colArray.push({
                headerName: 'Updated By',
				field: 'sys_updated_by',
				colId: 'sys_updated_by',
				filter: true,
                hide: true
			});
			colArray.push({
                headerName: 'Updated On',
				field: 'sys_updated_on',
				colId: 'sys_updated_on',
                hide: true
			});
		}

        if (c.data.reportType == "allocation") {
            colArray.push({
                headerName: 'Allocations',
                field: 'allocations',
				colId: 'allocations',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
            });
            colArray.push({
                headerName: 'Reimbursements',
                field: 'reimbursements',
				colId: 'reimbursements',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
            });
            colArray.push({
                headerName: 'Transfer In',
                field: 'trans_in',
				colId: 'trans_in',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
            });
            colArray.push({
                headerName: 'Transfer Out',
                field: 'trans_out',
				colId: 'trans_out',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
            });
            colArray.push({
                headerName: 'VG Labor',
                field: 'vg_labor',
				colId: 'vg_labor',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
            });
            colArray.push({
                headerName: 'Off. Adjustments',
                field: 'off_adjustments',
				colId: 'off_adjustments',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
            });
            colArray.push({
                headerName: 'Expended',
                field: 'expended',
				colId: 'expended',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
            });
		}

		if (c.data.reportType == "monthly_expenditure") {
            colArray.push({
                headerName: 'October',
                field: 'month_10',
				colId: 'month_10',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
            });
			colArray.push({
                headerName: 'November',
                field: 'month_11',
				colId: 'month_11',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'December',
                field: 'month_12',
				colId: 'month_12',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'January',
                field: 'month_1',
				colId: 'month_1',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'February',
                field: 'month_2',
				colId: 'month_2',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'March',
                field: 'month_3',
				colId: 'month_3',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'April',
                field: 'month_4',
				colId: 'month_4',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'May',
                field: 'month_5',
				colId: 'month_5',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'June',
                field: 'month_6',
				colId: 'month_6',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'July',
                field: 'month_7',
				colId: 'month_7',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'August',
                field: 'month_8',
				colId: 'month_8',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'September',
                field: 'month_9',
				colId: 'month_9',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'Total',
				colId: 'month_total',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true,
				valueGetter: function(params) {

					if (params.data) {
						var colTotal = 0;
						var displayedColumns = params.columnApi.getAllDisplayedColumns();
						displayedColumns.forEach(function (col) {
							if (col.colDef.field)
								if (col.colDef.field.indexOf("month") > -1)
									colTotal += params.data[col.colDef.field];
						});

						return colTotal;
					}
				}
            });
		}

		if (c.data.reportType == "baseline" || (c.data.reportType == "budget_plans" && c.selectedBudgetType == "Actual")) {
			colArray.push({
				headerName: 'Balance',
				field: 'balance',
				colId: 'balance',
				aggFunc: 'sum',
				type: 'currency',
				enableValue: true
			});
		}

		if (c.data.reportType == "allocation") {
			colArray.push({
				headerName: 'Balance',
				colId: 'balance_total',
				aggFunc: 'sum',
				type: 'currency',
				enableValue: true,
				valueGetter: function(params) {
					if (params.data) {
						var colTotal = 0;
						var displayedColumns = params.columnApi.getAllDisplayedColumns();
						displayedColumns.forEach(function (col) {
							if (col.colDef.field && params.data)
								if (col.colDef.type == "currency")
									colTotal += params.data[col.colDef.field];
							if(colTotal < 0)
								if(colTotal > -0.01)
							   colTotal = colTotal*-1;
						});

						return colTotal;
					}
				}
			});
		}

        var grpCols = colArray.filter(function(col) { return c.rowGrps.includes(col.field); });
        grpCols.forEach(function(col) {
            col.rowGroup = true;
            col.rowGroupIndex = c.rowGrps.indexOf(col.field);
        });
		
        return colArray;
    }

		var gridOptions = {
			columnDefs: generateColumns(),
			onRowDataChanged: function () {
				if (c.loadCount > 1) {
					c.setState(c.savedStates);
				} else {
					c.loadCount++;
				}
			},
			defaultColDef: {
				//flex: 1,
				//minWidth: 100,
				sortable: c.canSort,
				resizable: true
			},
			autoGroupColumnDef: {
				width: 300,
				cellRendererParams: {
					suppressCount: true
				}
			},
			suppressAggFuncInHeader: true,
            groupMultiAutoColumn: true,
	//		showOpenedGroup: true,         needs version  v25+
			multiSortKey: 'ctrl',
			accentedSort: true,
			pivotMode: c.usePivot,
            groupIncludeFooter: true,
            groupIncludeTotalFooter: true,
			sideBar: {
				toolPanels: [
				  {
					id: 'columns',
					labelDefault: 'Columns',
					labelKey: 'columns',
					iconKey: 'columns',
					toolPanel: 'agColumnsToolPanel',
				  },
				  {
					id: 'filters',
					labelDefault: 'Filters',
					labelKey: 'filters',
					iconKey: 'filter',
					toolPanel: 'agFiltersToolPanel',
				  },
				],
				position: 'right',
				defaultToolPanel: c.data.defaultToolPanel,
			},
			columnTypes: {
				'currency': {
					valueFormatter: currencyFormatter,
					cellStyle: currencyCssFunc,
					cellRenderer: 'agAnimateShowChangeCellRenderer'
				},
				'phasingCurrency': {
					valueFormatter: phasingCurrencyFormatter,
					cellStyle: currencyCssFunc,
					cellRenderer: 'agAnimateShowChangeCellRenderer'
				}
			},
			rowClassRules: {
				// apply green to 2008
				'phaseTotals': function(params) { 
					var isTotal = false;
					if (c.data.reportType == "phasing" && params.data)
						if ((params.data.activity_code.indexOf("Total") > -1 || params.data.budget_code.indexOf("Total") > -1) && params.data.m1 == "Q1:")
							isTotal = true;

					return isTotal;
				},
				'phaseTotalRow': function(params) { 
					var isTotalRow = false;
					if (c.data.reportType == "phasing" && params.data)
						if (params.data.activity_code.indexOf("Total") > -1 || params.data.budget_code.indexOf("Total") > -1)
							isTotalRow = true;

					return isTotalRow;
				}
			}
		};

		if (c.data.reportType != "phasing")
			gridOptions.autoGroupColumnDef.sort = 'asc';

		if (c.data.reportType == "budget_plans")
			gridOptions.groupIncludeTotalFooter = true;

		c.fiscalYears = [];

		for (var i = 2026; i >= 2000; i--) {
			c.fiscalYears.push(i.toString());
		}

		c.selectedFY = getCurrentFinancialYear("year");

		c.exportToCsv = function () {
			gridOptions.api.exportDataAsExcel({
				columnGroups: true,
				//customFooter: getGridTotals() NOTE WILL WORK WITH NEW AG GRID LICENSE
			});
		};

		function getGridTotals() {
			var hasColumns = false;
			var totalCounts = {};
			gridOptions.api.forEachNode(function (rowNode, index) {
				if (rowNode.group && rowNode.level == 0) {
					if (!hasColumns) {
						for (var prop in rowNode.aggData) {
							if (Object.prototype.hasOwnProperty.call(rowNode.aggData, prop)) {
								totalCounts[prop] = 0;
							}
						}
						hasColumns = true;
					}
					for (var prop in rowNode.aggData) {
						if (Object.prototype.hasOwnProperty.call(rowNode.aggData, prop)) {
							totalCounts[prop] += rowNode.aggData[prop];
						}
					}
				}
			});

			var totalCols = [];
			var mergeCount = 0;
			var allCols = gridOptions.columnApi.getAllDisplayedColumns();
			allCols.forEach(function (col) {
				if (col.aggFunc != undefined) {
					totalCols.push({
						data: {
							type: 'Number',
							value: totalCounts[col.colId]
						}
					});
				} else {
					mergeCount++;
				}
			});

			return [
				[],
				[{
					data: {
						type: 'String',
						value: 'Grand Total'
					},
					mergeAcross: mergeCount
				}, totalCols]
			];

		}

		var gridDiv = document.querySelector('#reportGrid');
		new agGrid.Grid(gridDiv, gridOptions);

		c.generateReport();

		$rootScope.$on('multiOrgChanged', function (event, args) {
            
            c.targetOrg = args.org_ids;
            
            if (c.data.reportType == "phasing") {
				var projectObj = {
					mode: 'refreshProjects',
					orgs: c.targetOrg
				};
		
				c.server.get(projectObj).then(function (projResults) {
					c.data.projects = projResults.data.projects;
					c.selectedProject = c.data.projects[0].value;
					c.generateReport();
				});
			} else {
				c.generateReport();
			}
		});
	};
]]></client_script>
        <controller_as>c</controller_as>
        <css>.no-orgs {&#13;
    margin: auto;&#13;
    text-align: center;&#13;
    margin-top: 125px;&#13;
    font-size: 22px;&#13;
    font-weight: bold;&#13;
}&#13;
&#13;
.full-grid {&#13;
    width: 94vw;&#13;
    height: calc(100vh - 210px);&#13;
    clear: both;&#13;
}&#13;
&#13;
.fms-list-header {&#13;
    margin-bottom: 0px !important;&#13;
}&#13;
&#13;
.pageLabel {&#13;
    float: left;&#13;
    margin-right: 10px;&#13;
}&#13;
&#13;
.row-button {&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.new-button {&#13;
    float: right;&#13;
    margin-right: 5px;&#13;
}&#13;
&#13;
.excel-button {&#13;
    float: right;&#13;
}&#13;
&#13;
.edit-pencil {&#13;
    color: #003ade;&#13;
    font-size: 16px;&#13;
    margin-right: 5px;&#13;
}&#13;
&#13;
.action-enabled {&#13;
    color: #0b8800;&#13;
    font-size: 16px;&#13;
    margin-right: 5px;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.action-disabled {&#13;
    color: #808080;&#13;
    font-size: 16px;&#13;
    margin-right: 5px;&#13;
}&#13;
&#13;
.delete-x {&#13;
    color: #000000;&#13;
    font-size: 13px;&#13;
}&#13;
&#13;
.updated-row {&#13;
    background-color: #FFFFCC;&#13;
}&#13;
&#13;
.phaseTotalRow {&#13;
    background-color: #eaf3d2;&#13;
}&#13;
&#13;
.ag-header-cell-label .ag-header-icon.ag-sort-order {&#13;
    display: none&#13;
}&#13;
&#13;
.ag-row-group {&#13;
    font-weight: bold;&#13;
}&#13;
&#13;
.full-width-panel {&#13;
    position: relative;&#13;
    background: #EDF6FF;&#13;
    height: 100%;&#13;
    width: 100%;&#13;
    padding: 5px;&#13;
}&#13;
&#13;
.full-row-details {&#13;
    position: relative;&#13;
    background: #FFFFFF;&#13;
    height: 100%;&#13;
    width: 100%;&#13;
    padding-left: 12px;&#13;
    padding-top: 4px;&#13;
}&#13;
&#13;
.call-record-cell {&#13;
    text-align: right;&#13;
}&#13;
&#13;
.full-width-detail {&#13;
    padding-top: 4px;&#13;
}&#13;
&#13;
.full-width-title {&#13;
    font-size: 10pt;&#13;
    font-weight: bold;&#13;
    float: left;&#13;
}&#13;
&#13;
.contract-button {&#13;
    float: right;&#13;
    margin-top: -13px;&#13;
}&#13;
&#13;
.full-width-details {&#13;
    float: left;&#13;
    padding: 5px;&#13;
    margin: 5px;&#13;
    width: 100%;&#13;
    clear: both;&#13;
}&#13;
&#13;
.details-grid {&#13;
    display: block;&#13;
    clear: both;&#13;
    height: 100px;&#13;
    margin-bottom: 5px;&#13;
}&#13;
&#13;
.full-width-grid-toolbar {&#13;
    top: 4px;&#13;
    left: 30px;&#13;
    margin-left: 150px;&#13;
    display: block;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.full-width-phone-icon {&#13;
    padding-right: 10px;&#13;
}&#13;
&#13;
.full-width-search {&#13;
    border: 1px solid #eee;&#13;
    margin-left: 10px;&#13;
}&#13;
&#13;
.reportSelect {&#13;
    padding: 6px 12px;&#13;
    font-size: 14px;&#13;
    border: 1px solid #ccc;&#13;
    border-radius: 4px;&#13;
}&#13;
&#13;
.reportTitle {&#13;
    float: left;&#13;
    margin-right: 23px;&#13;
    padding-top: 4px;&#13;
    font-weight: bold;&#13;
    font-size: 16px;&#13;
}&#13;
&#13;
.orgSpan { &#13;
    float: left;&#13;
}&#13;
&#13;
.select2-container-multi .select2-choices, .select2-drop, .select2-drop-active {&#13;
  max-width: 325px;&#13;
}&#13;
&#13;
.datePick {&#13;
    float: left;&#13;
    width: 140px !important;&#13;
    margin-left: 5px;&#13;
  }&#13;
&#13;
  .phaseTotals {&#13;
      font-weight: bold;&#13;
  }&#13;
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>fms_reports</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>FMS Reports</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function(options) {

    data.reportType = options.report_type.toString();
    data.projects = [];
    var user = gs.getUser();
    data.prefPrefix = "x_g_irm_fms.reports.";
    data.defaultToolPanel = user.getPreference(data.prefPrefix + "toolPanel") || 'columns';
    try {
        data.reportPref = JSON.parse(user.getPreference(data.prefPrefix + data.reportType + ".state"));
    } catch (err) {
        gs.addErrorMessage("Error parsing report column preferences.");
    }

    var OrgHierarchy = new x_g_irm_fms.OrgHierarchy(); //org helper
    var FMSUtility = new x_g_irm_fms.FMSUtilities(); //helper utility for FMS queries
    var orgName = "";
    var session = gs.getSession();
    var allOrgs = [];

    var getMonth = function(tQuery) {
        var tDate = tQuery.ft_obligation_date.toString();
        var month = parseInt(tDate.split('-')[1]);
        return month;
    };

    function blankMonths() {
        var monthObj = {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0
        };
        return monthObj;
    }

    function getPhasingValues(tItem) {
        var newObj = {};
        newObj.budget = tItem.budget;
        newObj.org_ref = tItem.org_ref;
        newObj.org_name = tItem.org_name;
        newObj.project = tItem.project;
        newObj.omb_project = tItem.omb_project;
        newObj.project_ref = tItem.project_ref;
        newObj.it_tower_ref = tItem.it_tower_ref;
        newObj.it_tower = tItem.it_tower;
        newObj.investment = tItem.investment;
        newObj.activity_code = tItem.activity_code;
        newObj.budget_code = tItem.budget_code;
        newObj.budget_code_short = tItem.budget_code_short;
        return newObj;
    }

    function getProjects() {

        var projOrgs = allOrgs;
        if (projOrgs.length == 0)
            projOrgs.push(data.selectedOrgID);

        var projectQ = new GlideRecord(FMSConstants.TABLE_PROJECT);
        projectQ.addEncodedQuery("organization_refIN" + projOrgs.join(","));
        projectQ.orderBy("project_name");
        projectQ.query();
        while (projectQ.next()) {
            var tProjObj = {};
            tProjObj.name = projectQ.project_name.toString();
            tProjObj.value = projectQ.sys_id.toString();
            data.projects.push(tProjObj);
        }
    }

    function round2Fixed(value) {
        value = +value;

        if (isNaN(value)) return NaN;

        // Shift
        value = value.toString().split('e');
        value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] + 2) : 2)));

        // Shift back
        value = value.toString().split('e');
        return (+(value[0] + 'e' + (value[1] ? (+value[1] - 2) : -2))).toFixed(2);
    }

    var setBaselineDefaults = function(calcQ, rollUp, tOrg) {

        var expItemRec = calcQ.fti_expense_item_ref;
        var expRef = expItemRec.toString();

        var baseSupObj = {};
        baseSupObj.expense_item_ref = expRef;
        baseSupObj.budget_ref = "";
        baseSupObj.budget_type = "";
        baseSupObj.org_ref = calcQ.proj_organization_ref.toString();
        baseSupObj.org_name = calcQ.proj_organization_ref.getDisplayValue();
        baseSupObj.project = calcQ.ft_project_ref.getDisplayValue();
        baseSupObj.omb_project = calcQ.ft_project_ref.omb_project_name.toString();
        baseSupObj.project_ref = calcQ.ft_project_ref.toString();
        baseSupObj.it_tower_ref = calcQ.ft_project_ref.irm_f_it_tower.toString();
        baseSupObj.it_tower = calcQ.ft_project_ref.irm_f_it_tower.getDisplayValue();
        baseSupObj.investment = calcQ.proj_investment.investment.getDisplayValue();
        baseSupObj.activity_code = expItemRec.activity_code.toString();
        baseSupObj.budget_code = expItemRec.budget_code_ref.getDisplayValue();
        if (doRollUp) {
            var rollupRec = OrgHierarchy.getRollupExpense(expRef, tOrg);
            baseSupObj.expense_item_ref_roll = rollupRec.toString();
            baseSupObj.activity_code_roll = rollupRec.activity_code.toString();
            baseSupObj.budget_code_roll = rollupRec.budget_code_ref.getDisplayValue();
        } else {
            baseSupObj.activity_code_roll = expItemRec.activity_code.toString();
            baseSupObj.budget_code_roll = expItemRec.budget_code_ref.getDisplayValue();
        }
        baseSupObj.baseline = 0;
        baseSupObj.execution = 0;
        baseSupObj.transfer = 0;
        baseSupObj.in_progress = 0;
        baseSupObj.initiated = 0;
        baseSupObj.committed = 0;
        baseSupObj.obligated = 0;
        baseSupObj.balance = 0;

        return baseSupObj;
    };

    var setDueInBaselineDefaults = function(dueInBaseObj, dueInBaseline) {
        dueInBaseObj.budget_item_ref = dueInBaseline.sys_id.toString();
        dueInBaseObj.expense_item_ref = dueInBaseline.expense_item_ref.toString();
        dueInBaseObj.org_ref = dueInBaseline.budget_ref.project_ref.organization_ref.toString();
        dueInBaseObj.org_name = dueInBaseline.budget_ref.project_ref.organization_ref.getDisplayValue();
        dueInBaseObj.project = dueInBaseline.budget_ref.project_ref.getDisplayValue();
        dueInBaseObj.omb_project = dueInBaseline.budget_ref.project_ref.omb_project_name.toString();
        dueInBaseObj.project_ref = dueInBaseline.budget_ref.project_ref.toString();
        dueInBaseObj.it_tower_ref = dueInBaseline.budget_ref.project_ref.irm_f_it_tower.toString();
        dueInBaseObj.it_tower = dueInBaseline.budget_ref.project_ref.irm_f_it_tower.getDisplayValue();
        dueInBaseObj.investment = dueInBaseline.budget_ref.project_ref.investment.investment.toString();
        dueInBaseObj.activity_code = dueInBaseline.expense_item_ref.activity_code.toString();
        dueInBaseObj.budget_code = dueInBaseline.expense_item_ref.budget_code_ref.getDisplayValue();
        dueInBaseObj.q1 = 0;
        dueInBaseObj.q2 = 0;
        dueInBaseObj.q3 = 0;
        dueInBaseObj.q4 = 0;
        dueInBaseObj.due_in = 0;
        return dueInBaseObj;
    };

    var buildObligation = function(obligQ, sourceType) {
        var obligObj = {};
        obligObj.sys_id = obligQ.sys_id.toString();
        obligObj.obligation = obligQ.obligation.toString();
        obligObj.org_ref = obligQ.project_ref.organization_ref.toString();
        obligObj.org_name = obligQ.project_ref.organization_ref.getDisplayValue();
        obligObj.source = sourceType;
        obligObj.status = obligQ.tran_status.toString();
        obligObj.trans_amount = parseFloat(obligQ.transaction_total_amt.toString());
        obligObj.invoice_amount = 0;
        obligObj.paid_amount = 0;
        obligObj.paid_date = "";
        obligObj.estimated_cost = 0;
        obligObj.invoice_number = "";
        obligObj.contract_piid = obligQ.contract_ref.contract_piid.toString();
        obligObj.reference_number = "";
        obligObj.remaining = 0;
        obligObj.notes = obligQ.description.toString();
        return obligObj;
    };

    if ($sp.getParameter("org_id") && $sp.getParameter("org_id").length > 0)
        data.selectedOrgID = $sp.getParameter("org_id");
    else
        data.selectedOrgID = gs.getUser().getPreference("x_g_irm_fms.reports.defaultOrgs") || session.getClientData('org_id');

    data.orgSelectionOpts = {
        "selectedOrg": data.selectedOrgID,
        "hide_widget": false,
        "hide_project": true,
        "multi_select": true
    };

    if ($sp.getParameter("id") == "phasing_plan_report")
        getProjects();

    if (input) {
        if (input.mode == "savePreference") {
            user.savePreference(data.prefPrefix + data.reportType + ".state", JSON.stringify(input.value));
        }
        if (input.mode == "buildReport" || input.mode == "refreshProjects") {
            data.reportData = [];

            var arrayUtil = new global.ArrayUtil();
            allOrgs = [];
            var inputOrgs = input.orgs.split(",");
            var doRollUp = false;

            inputOrgs.forEach(function(org) { //build a set of orgs to query against based on user input
                var childOrgs = OrgHierarchy.getOrgChildren(org);
                childOrgs.forEach(function(child) {
                    if (!arrayUtil.contains(allOrgs, child))
                        allOrgs.push(child);
                });
                if (!arrayUtil.contains(allOrgs, org))
                    allOrgs.push(org);
            });
           
            if (allOrgs.length > 1)
                doRollUp = true;

            if (input.mode == "buildReport") {

                if (data.reportType == "monthly_expenditure") {
                    var monthlyQ = new GlideRecord(FMSConstants.VIEW_FIN_TRAN_REPORT);
                    monthlyQ.addEncodedQuery("proj_organization_refIN" + allOrgs.join(",") + "^ft_fy=" + input.fy + "^ft_void=false");
                    monthlyQ.query();
                    while (monthlyQ.next()) {

                        var tMonthObj = {};
                        var isMonthlyExisting = false;
                        var bCode = monthlyQ.fti_expense_item_ref.budget_code_ref.budget_code.toString();
                        var aCode = monthlyQ.fti_expense_item_ref.activity_code.toString();
                        var oCode = monthlyQ.proj_organization_ref.getDisplayValue();
                        var pCode = monthlyQ.ft_project_ref.getDisplayValue();
                        var iCode = monthlyQ.proj_investment.getDisplayValue();

                        //check for existing object in the array
                        var existingMonthlyData = data.reportData.filter(function(el) {
                            return el.budget_code == bCode && el.activity_code == aCode && el.org_name == oCode && el.project == pCode && el.investment == iCode;
                        });

                        if (existingMonthlyData.length > 0) { //use existing object
                            isMonthlyExisting = true;
                            tMonthObj = existingMonthlyData[0];
                        } else {
                            tMonthObj.budget_code = bCode;
                            tMonthObj.activity_code = aCode;
                            if (doRollUp) {
                                var monthlyRollup = OrgHierarchy.getRollupExpense(monthlyQ.fti_expense_item_ref, data.selectedOrgID);
                                tMonthObj.expense_item_ref_roll = monthlyRollup.toString();
                                tMonthObj.activity_code_roll = monthlyRollup.activity_code.toString();
                                tMonthObj.budget_code_roll = monthlyRollup.budget_code_ref.getDisplayValue();
                            } else {
                                tMonthObj.activity_code_roll = bCode;
                                tMonthObj.budget_code_roll = aCode;
                            }
                            tMonthObj.org_name = oCode;
                            tMonthObj.project = pCode;
                            tMonthObj.it_tower = monthlyQ.ft_project_ref.irm_f_it_tower.getDisplayValue();
                            tMonthObj.investment = iCode;
                            tMonthObj.omb_project = monthlyQ.ft_project_ref.omb_project_name.toString();
                            for (var mCount = 1; mCount <= 12; mCount++) {
                                tMonthObj["month_" + mCount] = 0;
                            }
                        }

                        tMonthObj["month_" + getMonth(monthlyQ)] += parseFloat(monthlyQ.fti_item_total);

                        if (!isMonthlyExisting)
                            data.reportData.push(tMonthObj);

                    }
                }

                if (data.reportType == "allocation") {


                    //get project allocation data
                    var projQ = new GlideAggregate(FMSConstants.TABLE_PROJECT_ALLOCATION);
                    projQ.addEncodedQuery("fy=" + input.fy + "^project_ref.organization_refIN" + allOrgs.join(","));
                    projQ.groupBy("appropriation_ref");
                    projQ.groupBy("allocation_group_ref");
                    projQ.groupBy("project_ref.organization_ref");
                    projQ.groupBy("project_ref");
                    projQ.groupBy("fund_source");
                    projQ.groupBy("transfer_type_ref");
                    projQ.addAggregate("SUM", "allocation_amt");
                    projQ.query();
                    while (projQ.next()) {

                        var projVal = projQ.project_ref.toString();
                        var allocGroupVal = projQ.allocation_group_ref.toString();
                        var appropVal = projQ.appropriation_ref.appropriation_ref.toString();
                        var orgVal = projQ.project_ref.organization_ref.toString();

                        var reportObj = {};
                        var isExisting = false;

                        //check for existing object in the array
                        var existingData = data.reportData.filter(function(el) {
                            return el.project_ref == projVal && el.allocation_group_ref == allocGroupVal && el.appropriation_ref == appropVal && el.org_ref == orgVal;
                        });

                        if (existingData.length > 0) { //use existing object
                            isExisting = true;
                            reportObj = existingData[0];
                        }

                        if (!isExisting) { //new entry to the array, define the default values

                            reportObj.org_ref = orgVal;
                            reportObj.org_name = projQ.project_ref.organization_ref.getDisplayValue();
                            reportObj.project = projQ.project_ref.getDisplayValue();
                            reportObj.project_ref = projVal;
                            reportObj.omb_project = projQ.project_ref.omb_project_name.toString();
                            reportObj.it_tower_ref = projQ.project_ref.irm_f_it_tower.toString();
                            reportObj.it_tower = projQ.project_ref.irm_f_it_tower.getDisplayValue();
                            reportObj.investment = projQ.project_ref.investment.investment.getDisplayValue();
                            reportObj.appropriation_type = projQ.appropriation_ref.appropriation_ref.appropriation_type.getDisplayValue();
                            reportObj.appropriation_type_ref = projQ.appropriation_ref.appropriation_ref.appropriation_type.toString();
                            reportObj.appropriation = projQ.appropriation_ref.appropriation_ref.getDisplayValue();
                            reportObj.appropriation_ref = appropVal;
                            reportObj.allocation_group = projQ.allocation_group_ref.getDisplayValue();
                            reportObj.allocation_group_ref = allocGroupVal;
                            reportObj.allocations = 0;
                            reportObj.reimbursements = 0;
                            reportObj.trans_in = 0;
                            reportObj.trans_out = 0;
                            reportObj.toaa = 0;
                            reportObj.toa = 0;
                            reportObj.vg_labor = 0;
                            reportObj.off_adjustments = 0;
                            reportObj.expended = 0;
                            reportObj.balance = 0;

                        }

                        //JLR continue here

                        if (projQ.fund_source == "Allocation")
                            reportObj.allocations += parseFloat(projQ.getAggregate("SUM", "allocation_amt"));

                        if (projQ.fund_source == "Reimbursement")
                            reportObj.reimbursements += parseFloat(projQ.getAggregate("SUM", "allocation_amt"));

                        if (projQ.fund_source == "Transfer In")
                            reportObj.trans_in += parseFloat(projQ.getAggregate("SUM", "allocation_amt"));

                        if (projQ.fund_source == "Transfer In" && projQ.transfer_type_ref == '9aa3f65d1b0850501f7e113d9c4bcbe6') //TOAA
                            reportObj.toaa += parseFloat(projQ.getAggregate("SUM", "allocation_amt"));

                        if (!isExisting) {
                            data.reportData.push(reportObj);
                        }
                    }

                    //Get supporting info
                    var endQ = new GlideAggregate(FMSConstants.VIEW_FIN_TRAN_REPORT);
                    /*var endQS = "";
                    appropriationsChecked.forEach(function(appVal){
                        endQS += "^ft_project_appropriation_ref.appropriation_ref!=" + appVal;
                    });*/
                    endQ.addEncodedQuery("proj_organization_refIN" + allOrgs.join(",") + "^ft_fy=" + input.fy + "^ft_void=false");
                    endQ.groupBy("ft_allocation_group_ref");
                    endQ.groupBy("ft_project_ref");
                    endQ.groupBy("ft_project_appropriation_ref");
                    endQ.groupBy("proj_organization_ref");
                    endQ.groupBy("proj_investment");
                    endQ.groupBy("ft_tran_type");
                    endQ.addAggregate("SUM", "fti_item_total");
                    endQ.query();
                    while (endQ.next()) {

                        var endprojVal = endQ.ft_project_ref.toString();
                        var endallocGroupVal = endQ.ft_allocation_group_ref.toString();
                        var endappropVal = endQ.ft_project_appropriation_ref.appropriation_ref.toString();
                        var endorgVal = endQ.proj_organization_ref.toString();

                        var endObj = {};
                        var isExists = false;

                        //check for existing object in the array
                        var prevData = data.reportData.filter(function(el) {
                            return el.project_ref == endprojVal && el.allocation_group_ref == endallocGroupVal && el.appropriation_ref == endappropVal && el.org_ref == endorgVal;
                        });

                        if (prevData.length > 0) { //use existing object
                            isExists = true;
                            endObj = prevData[0];
                        }

                        if (!isExists) { //new entry to the array, define the default values
                            endObj.org_ref = endorgVal;
                            endObj.org_name = endQ.proj_organization_ref.getDisplayValue();
                            endObj.project = endQ.ft_project_ref.getDisplayValue();
                            endObj.project_ref = endprojVal;
                            endObj.omb_project = endQ.ft_project_ref.omb_project_name.toString();
                            endObj.investment = endQ.proj_investment.investment.getDisplayValue();
                            //endObj.appropriation_type = endQ.ft_project_appropriation_ref.appropriation_ref.appropration_type.getDisplayValue();
                            //endObj.appropriation_type_ref = endQ.ft_project_appropriation_ref.appropriation_ref.appropration_type.toString();
                            endObj.it_tower_ref = endQ.ft_project_ref.irm_f_it_tower.toString();
                            endObj.it_tower = endQ.ft_project_ref.irm_f_it_tower.getDisplayValue();
                            endObj.appropriation_type = "";
                            endObj.appropriation_type_ref = "";
                            endObj.appropriation = endQ.ft_project_appropriation_ref.appropriation_ref.getDisplayValue();
                            endObj.appropriation_ref = endappropVal;
                            endObj.allocation_group = endQ.ft_allocation_group_ref.getDisplayValue();
                            endObj.allocation_group_ref = endallocGroupVal;
                            endObj.allocations = 0;
                            endObj.reimbursements = 0;
                            endObj.trans_in = 0;
                            endObj.trans_out = 0;
                            endObj.toaa = 0;
                            endObj.toa = 0;
                            endObj.vg_labor = 0;
                            endObj.off_adjustments = 0;
                            endObj.expended = 0;
                            endObj.balance = 0;
                        }

                        var finalCost = parseFloat(endQ.getAggregate("SUM", "fti_item_total"));
                        if (endQ.ft_tran_type == "TE" || endQ.ft_tran_type == "TI" || endQ.ft_tran_type == "TVGT") {
                            endObj.trans_out += finalCost;
                        } else if (endQ.ft_tran_type == "TVGL") {
                            endObj.vg_labor += finalCost;
                        } else if (endQ.ft_tran_type == "TOA") {
                            endObj.toa += finalCost;
                        } else {
                            endObj.expended += finalCost;
                        }

                        if (!isExists) {
                            data.reportData.push(endObj);
                        }

                    }

                    //total and make negative
                    data.reportData.forEach(function(item) {
                        item.vg_labor = item.vg_labor * -1;
                        item.trans_out = item.trans_out * -1;
                        item.expended = item.expended * -1;
                        item.off_adjustments = (item.toaa - item.toa);
                    });
                }

                if (data.reportType == "baseline" || data.reportType == "budget_plans") {

                    var baseProjects = "";
                    var baseEQ = "budget_ref.project_ref.organization_refIN" + allOrgs.join(",") + "^budget_ref.fy=" + input.fy + "^budget_ref.current=true";
                    if (data.reportType == "budget_plans") {
                        if (input.budget_type == "Actual") {
                            baseEQ += "^budget_ref.budget_typeINActual,Execution";

                            var actualProjects = [];

                            //filter on actual budget's project
                            var actualQuery = new GlideRecord(FMSConstants.TABLE_BUDGET);
                            actualQuery.addEncodedQuery("project_ref.organization_refIN" + allOrgs.join(",") + "^fy=" + input.fy + "^budget_type=Actual");
                            actualQuery.query();
                            while (actualQuery.next()) {
                                actualProjects.push(actualQuery.project_ref.toString());
                            }

                            if (actualProjects.length > 0)
                                baseEQ += "^budget_ref.project_ref.sys_idIN" + actualProjects.join(", ");

                        } else {
                            baseEQ += "^budget_ref.budget_type=" + input.budget_type;
                            if (input.budget_type == "baseline")
                                baseEQ += "^budget_ref.budget_status=Approved";
                        }

                    }

                    var baseQ = new GlideAggregate(FMSConstants.TABLE_BUDGET_ITEM);
                    baseQ.addEncodedQuery(baseEQ);
                    baseQ.groupBy("budget_ref");
                    baseQ.groupBy("expense_item_ref");
                    baseQ.groupBy("budget_ref.budget_type");
                    baseQ.addAggregate("SUM", "budget_amt");
                    baseQ.query();

                    while (baseQ.next()) {

                        var reportObj = {};
                        var baseExists = false;
                        var budgetRef = baseQ.budget_ref.toString();
                        var expRef = baseQ.expense_item_ref.toString();
                        var typeRef = baseQ.budget_ref.budget_type.toString();
                        var expItemRec = baseQ.expense_item_ref;

                        //check for existing object in the array
                        var existBaseline = data.reportData.filter(function(el) {
                            return el.budget_ref == budgetRef && el.expense_item_ref == expRef && el.budget_type == typeRef;
                        });

                        if (existBaseline.length > 0) { //use existing object
                            baseExists = true;
                            reportObj = existBaseline[0];
                        }

                        if (!baseExists) { //new entry to the array, define the default values

                            reportObj.expense_item_ref = expRef;
                            reportObj.budget_ref = budgetRef;
                            reportObj.budget_type = typeRef;
                            reportObj.org_ref = baseQ.budget_ref.project_ref.organization_ref.toString();
                            reportObj.org_name = baseQ.budget_ref.project_ref.organization_ref.getDisplayValue();
                            reportObj.project = baseQ.budget_ref.project_ref.getDisplayValue();
                            reportObj.omb_project = baseQ.budget_ref.project_ref.omb_project_name.toString();
                            reportObj.project_ref = baseQ.budget_ref.project_ref.toString();
                            reportObj.it_tower_ref = baseQ.budget_ref.project_ref.irm_f_it_tower.toString();
                            reportObj.it_tower = baseQ.budget_ref.project_ref.irm_f_it_tower.getDisplayValue();
                            reportObj.investment = baseQ.budget_ref.project_ref.investment.investment.toString();
                            reportObj.activity_code = expItemRec.activity_code.toString();
                            reportObj.budget_code = expItemRec.budget_code_ref.getDisplayValue();
                            if (doRollUp) {
                                var rollupRec = OrgHierarchy.getRollupExpense(expRef, data.selectedOrgID);
                                reportObj.expense_item_ref_roll = rollupRec.toString();
                                reportObj.activity_code_roll = rollupRec.activity_code.toString();
                                reportObj.budget_code_roll = rollupRec.budget_code_ref.getDisplayValue();
                            } else {
                                reportObj.activity_code_roll = expItemRec.activity_code.toString();
                                reportObj.budget_code_roll = expItemRec.budget_code_ref.getDisplayValue();
                            }
                            if (data.reportType == "baseline") {
                                reportObj.baseline = 0;
                                reportObj.execution = 0;
                                reportObj.transfer = 0;
                                reportObj.in_progress = 0;
                                reportObj.initiated = 0;
                                reportObj.committed = 0;
                                reportObj.obligated = 0;
                                reportObj.balance = 0;
                                baseProjects += reportObj.project_ref + ",";
                            } else {
                                reportObj.execution = 0;
                                reportObj.budget = 0;
                                reportObj.balance = 0;
                                reportObj.budget_name = baseQ.budget_ref.project_ref.project_name.toString() + " v" + baseQ.budget_ref.budget_version.toString() + "r" + baseQ.budget_ref.budget_revision.toString();
                            }

                        }

                        if (data.reportType == "baseline") {

                            if (reportObj.budget_type == "Baseline") {
                                reportObj.baseline += parseFloat(baseQ.getAggregate("SUM", "budget_amt"));
                            }

                            if (reportObj.budget_type == "Execution") {
                                reportObj.execution += parseFloat(baseQ.getAggregate("SUM", "budget_amt"));
                            }

                        } else {

                            if (input.budget_type == "Actual") {
                                if (reportObj.budget_type == "Actual") {
                                    reportObj.budget += parseFloat(baseQ.getAggregate("SUM", "budget_amt"));
                                }

                                if (reportObj.budget_type == "Execution") {
                                    reportObj.execution += parseFloat(baseQ.getAggregate("SUM", "budget_amt"));
                                }
                            } else {
                                reportObj.budget += parseFloat(baseQ.getAggregate("SUM", "budget_amt"));
                            }
                        }

                        data.reportData.push(reportObj);
                    }

                    if (data.reportType == "baseline") {

                        var calcQ = new GlideAggregate(FMSConstants.VIEW_FIN_TRAN_REPORT);
                        calcQ.addEncodedQuery("proj_organization_refIN" + allOrgs.join(",") + "^ft_fy=" + input.fy + "^ft_tran_type=TVGL^ORft_tran_type=TE^ORft_tran_type=TI^ORft_tran_type=TOA^ORft_tran_type=TVGT^ft_void=false^fti_expense_item_ref!=NULL"); //todo, remove empty clause
                        calcQ.groupBy("ft_project_ref");
                        calcQ.groupBy("fti_expense_item_ref");
                        calcQ.groupBy("proj_organization_ref");
                        calcQ.addAggregate("SUM", "fti_item_total");
                        calcQ.query();
                        while (calcQ.next()) {

                            //if (baseProjects.indexOf(calcQ.ft_project_ref.toString()) > -1) {

                            var baseSupObj = {};
                            baseSupObj = setBaselineDefaults(calcQ, doRollUp, data.selectedOrgID);
                            baseSupObj.transfer = parseFloat(calcQ.getAggregate("SUM", "fti_item_total"));
                            data.reportData.push(baseSupObj);

                            //}
                        }

                        var inProgQ = new GlideAggregate(FMSConstants.VIEW_FIN_TRAN_REPORT);
                        inProgQ.addEncodedQuery("proj_organization_refIN" + allOrgs.join(",") + "^ft_fy=" + input.fy + "^ft_tran_type!=TVGL^ft_tran_type!=TE^ft_tran_type!=TI^ft_tran_type!=TOA^ft_tran_type!=TVGT^ft_void=false^fti_expense_item_ref!=NULL");
                        inProgQ.groupBy("ft_project_ref");
                        inProgQ.groupBy("fti_expense_item_ref");
                        inProgQ.groupBy("proj_organization_ref");
                        inProgQ.groupBy("ft_tran_status");
                        inProgQ.addAggregate("SUM", "fti_item_total");
                        inProgQ.query();
                        while (inProgQ.next()) {

                            var progressObj = {};
                            progressObj = setBaselineDefaults(inProgQ, doRollUp, data.selectedOrgID);

                            if (inProgQ.ft_tran_status == "In-Progress")
                                progressObj.in_progress = parseFloat(inProgQ.getAggregate("SUM", "fti_item_total"));

                            if (inProgQ.ft_tran_status == "Initiated")
                                progressObj.initiated = parseFloat(inProgQ.getAggregate("SUM", "fti_item_total"));

                            if (inProgQ.ft_tran_status == "Committed")
                                progressObj.committed = parseFloat(inProgQ.getAggregate("SUM", "fti_item_total"));

                            if (inProgQ.ft_tran_status == "Obligated")
                                progressObj.obligated = parseFloat(inProgQ.getAggregate("SUM", "fti_item_total"));

                            data.reportData.push(progressObj);

                        }

                        //calculate balances
                        data.reportData.forEach(function(item) {
                            item.balance = item.execution - (item.transfer + item.in_progress + item.initiated + item.committed + item.obligated);
                        });

                    } else {
                        if (input.budget_type == "Actual") {
                            //calculate balances
                            data.reportData.forEach(function(item) {
                                item.balance = (item.execution - item.budget);
                            });
                        }
                    }

                }

                if (data.reportType == "financial_transaction") {
                    var finTranQ = new GlideRecord(FMSConstants.TABLE_FINANCIAL_TRANSACTION_ITEM);
                    finTranQ.addEncodedQuery("fin_tran_ref.project_ref.organization_refIN" + allOrgs.join(",") + "^fin_tran_ref.tran_dateBETWEENjavascript:gs.dateGenerate('" + input.start_date + "','start')@javascript:gs.dateGenerate('" + input.end_date + "','end')");
                    finTranQ.query();
                    while (finTranQ.next()) {

                        var finTranObj = {};

                        finTranObj.org_ref = finTranQ.fin_tran_ref.project_ref.organization_ref.toString();
                        finTranObj.org_name = finTranQ.fin_tran_ref.project_ref.organization_ref.getDisplayValue();
                        finTranObj.project = finTranQ.fin_tran_ref.project_ref.getDisplayValue();
                        finTranObj.project_ref = finTranQ.fin_tran_ref.project_ref.toString();
                        finTranObj.omb_project = finTranQ.fin_tran_ref.project_ref.omb_project_name.toString();
                        finTranObj.omb_category = finTranQ.omb_category_ref.getDisplayValue();
                        finTranObj.it_tower_ref = finTranQ.irm_f_it_tower.toString();
                        finTranObj.it_tower = finTranQ.irm_f_it_tower.getDisplayValue();
                        finTranObj.investment = finTranQ.fin_tran_ref.project_ref.investment.getDisplayValue();
                        finTranObj.appropriation = finTranQ.fin_tran_ref.project_appropriation_ref.appropriation_ref.getDisplayValue();
                        finTranObj.appropriation_ref = finTranQ.fin_tran_ref.project_appropriation_ref.appropriation_ref.toString();
                        finTranObj.allocation_group = finTranQ.fin_tran_ref.allocation_group_ref.getDisplayValue();
                        finTranObj.allocation_group_ref = finTranQ.fin_tran_ref.allocation_group_ref.toString();
                        finTranObj.allotment = finTranQ.fin_tran_ref.allotment_ref.allotment.toString();
                        finTranObj.description = finTranQ.fin_tran_ref.description.toString();
                        finTranObj.cost_pool = finTranQ.irm_f_cost_pool.getDisplayValue();
                        finTranObj.cost_pool_ref = finTranQ.irm_f_cost_pool.toString();
                        finTranObj.sub_cost_pool = finTranQ.irm_f_sub_cost_pool.getDisplayValue();
                        finTranObj.sub_cost_pool_ref = finTranQ.irm_f_sub_cost_pool.toString();
                        finTranObj.cloud_related = finTranQ.cloud_related.getDisplayValue();
                        finTranObj.activity_code = finTranQ.expense_item_ref.activity_code.toString();
                        finTranObj.budget_code = finTranQ.expense_item_ref.budget_code_ref.getDisplayValue();
                        if (doRollUp) {
                            var transRollup = OrgHierarchy.getRollupExpense(finTranQ.expense_item_ref, data.selectedOrgID);
                            finTranObj.expense_item_ref_roll = transRollup.toString();
                            finTranObj.activity_code_roll = transRollup.activity_code.toString();
                            finTranObj.budget_code_roll = transRollup.budget_code_ref.getDisplayValue();
                        } else {
                            finTranObj.activity_code_roll = finTranQ.expense_item_ref.activity_code.toString();
                            finTranObj.budget_code_roll = finTranQ.expense_item_ref.budget_code_ref.getDisplayValue();
                        }
                        finTranObj.trans_status = finTranQ.fin_tran_ref.tran_status.toString();
                        finTranObj.trans_type = finTranQ.fin_tran_ref.tran_type.toString();
                        finTranObj.trans_date = finTranQ.fin_tran_ref.tran_date.toString();
                        finTranObj.obligation = finTranQ.fin_tran_ref.obligation.toString();
                        finTranObj['void'] = finTranQ.fin_tran_ref['void'].toString();
                        finTranObj.post = finTranQ.post_ref.getDisplayValue();
                        finTranObj.contract_piid = finTranQ.fin_tran_ref.contract_ref.contract_piid.toString();
                        finTranObj.item_number = parseInt(finTranQ.tran_item.toString());
                        finTranObj.item_qty = parseInt(finTranQ.item_qty.toString());
                        finTranObj.received_qty = parseInt(finTranQ.received_qty.toString());
                        finTranObj.item_cost = parseFloat(finTranQ.item_cost.toString());
                        finTranObj.actual_cost = parseFloat(finTranQ.actual_cost.toString());
                        finTranObj.trans_amount = parseFloat(finTranQ.item_total.toString());
                        finTranObj.sys_updated_by = finTranQ.sys_updated_by.toString();
                        finTranObj.sys_updated_on = finTranQ.sys_updated_on.toString();

                        //get PO info
                        var finTranPOQ = new GlideRecord(FMSConstants.TABLE_FINANCIAL_TRANSACTION_ITEM_PO);
                        finTranPOQ.addEncodedQuery("fin_tran_ref=" + finTranQ.fin_tran_ref.toString());
                        finTranPOQ.query();
                        while (finTranPOQ.next()) {
                            finTranObj.award_number = finTranPOQ.award_nmbr.toString();
                            finTranObj.pr_number = finTranPOQ.po_nmbr.toString();
                            finTranObj.vendor_name = finTranPOQ.award_vendor_name.toString();
                            finTranObj.quote_vendor_name = finTranPOQ.quote_vendor_name.toString();
                        }

                        data.reportData.push(finTranObj);

                    }

                }

                if (data.reportType == "obligation") {

                    var obligationStatus = input.obStatus;
                    var allObligations = [];

                    var obligQ = new GlideRecord(FMSConstants.TABLE_FINANCIAL_TRANSACTION);
                    obligQ.addEncodedQuery("project_ref.organization_refIN" + allOrgs.join(",") + "^fy=" + input.fy + "^tran_status=Obligated");
                    obligQ.query();
                    while (obligQ.next()) {

                        var obligObj = buildObligation(obligQ, "FinTran");

                        var foundObligation = data.reportData.filter(function(el) {
                            return el.obligation == obligObj.obligation;
                        });

                        if (foundObligation.length == 0)
                            allObligations.push(obligObj.obligation);

                        data.reportData.push(obligObj);
                    }

                    allObligations.forEach(function(item) {
                        var obligDetails = new GlideRecord(FMSConstants.TABLE_FINANCIAL_TRANSACTION);
                        obligDetails.addEncodedQuery("obligation=" + item);
                        obligDetails.query();
                        while (obligDetails.next()) {
                            var existObligation = data.reportData.filter(function(el) {
                                return el.sys_id == obligDetails.sys_id.toString();
                            });

                            if (existObligation.length == 0) {
                                var supportOblig = {};
                                supportOblig.sys_id = obligDetails.sys_id.toString();
                                supportOblig.source = "FinTran";
                                supportOblig.status = obligDetails.tran_status.toString();
                                supportOblig.trans_amount = parseFloat(obligDetails.transaction_total_amt.toString());
                                supportOblig.invoice_amount = 0;
                                supportOblig.paid_amount = 0;
                                supportOblig.paid_date = "";
                                supportOblig.estimated_cost = 0;
                                supportOblig.invoice_number = "";
                                supportOblig.contract_piid = obligDetails.contract_ref.contract_piid.toString();
                                supportOblig.reference_number = "";
                                supportOblig.notes = obligDetails.description.toString();
                                data.reportData.push(supportOblig);
                            }
                        }

                        //check invoices
                        var invoiceQ = new GlideRecord(FMSConstants.TABLE_INVOICE);
                        invoiceQ.addEncodedQuery("obligation=" + item);
                        invoiceQ.query();
                        while (invoiceQ.next()) {
                            var invoiceObj = {};
                            invoiceObj.sys_id = invoiceQ.sys_id.toString();
                            invoiceObj.obligation = item;
                            invoiceObj.source = "Invoice";
                            invoiceObj.status = "Billed";
                            invoiceObj.trans_amount = 0;
                            invoiceObj.invoice_amount = parseFloat(invoiceQ.invoice_amount.toString());
                            invoiceObj.paid_amount = parseFloat(invoiceQ.paid_amount.toString());
                            invoiceObj.paid_date = invoiceQ.paid_date.toString();
                            invoiceObj.estimated_cost = parseFloat(invoiceQ.estimated_cost.toString());
                            invoiceObj.invoice_number = invoiceQ.invoice_nmbr.toString();
                            invoiceObj.contract_piid = "";
                            invoiceObj.reference_number = invoiceQ.contract_number.toString();
                            invoiceObj.notes = invoiceQ.notes.toString();
                            data.reportData.push(invoiceObj);

                        }
                    });

                    var filteredObligations = [];

                    allObligations.forEach(function(thisOb) {

                        var allObs = data.reportData.filter(function(el) {
                            return el.obligation == thisOb;
                        });

                        var remainCount = 0;

                        allObs.forEach(function(obRec) {
                            obRec.remaining = (obRec.trans_amount - obRec.paid_amount);
                            remainCount += obRec.remaining;
                        });

                        var remainFinal = round2Fixed(remainCount);

                        if (obligationStatus == "both" || (obligationStatus == "liquidated" && remainFinal == "0.00") || (obligationStatus == "unliquidated" && remainFinal != "0.00"))
                            filteredObligations.push(thisOb);

                    });

                    var newObData = [];

                    filteredObligations.forEach(function(thisOb) {

                        var allObs = data.reportData.filter(function(el) {
                            return el.obligation == thisOb;
                        });

                        allObs.forEach(function(obRec) {
                            newObData.push(obRec);
                        });

                    });

                    data.reportData = newObData;


                }

                if (data.reportType == "funding_due_in") {
                    //https://bmpdev.servicenowservices.com/x_g_irm_fms_budget_item_phase_list.do?sysparm_query=budget_item_ref.budget_ref.project_ref.organization_ref%3D294b043d1bc090500a4a10ad9c4bcb00%5Ebudget_item_ref.budget_ref.budget_type%3DExecution%5Ebudget_item_ref.budget_ref.fy%3D2019&sysparm_view=
                    //budget_item_ref.budget_ref.project_ref.organization_ref=294b043d1bc090500a4a10ad9c4bcb00^budget_item_ref.budget_ref.budget_type=Execution^budget_item_ref.budget_ref.fy=2019
                    //budget_item_ref.budget_ref.project_ref.organization_ref=294b043d1bc090500a4a10ad9c4bcb00^budget_item_ref.budget_ref.budget_type=Baseline^budget_item_ref.budget_ref.fy=2019^budget_item_ref.budget_ref.current=true


                    //https://bmpdev.servicenowservices.com/x_g_irm_fms_budget_item_list.do?sysparm_query=budget_ref.fy%3D2019%5Ebudget_ref.project_ref.organization_ref%3Ded4bc03d1bc090500a4a10ad9c4bcb4f%5Ebudget_ref.budget_type%3DBaseline%5Ebudget_ref.current%3Dtrue&sysparm_view=
                    //budget_ref.fy=2019^budget_ref.project_ref.organization_ref=ed4bc03d1bc090500a4a10ad9c4bcb4f^budget_ref.budget_type=Baseline^budget_ref.current=true
                    //budget_ref.fy=2019^budget_ref.project_ref.organization_ref=ed4bc03d1bc090500a4a10ad9c4bcb4f^budget_ref.budget_type=Execution

                    var dueInBaseline = new GlideRecord(FMSConstants.TABLE_BUDGET_ITEM);
                    dueInBaseline.addEncodedQuery("budget_ref.fy=" + input.fy + "^budget_ref.project_ref.organization_refIN" + allOrgs.join(",") + "^budget_ref.budget_type=Baseline^budget_ref.current=true");
                    dueInBaseline.query();
                    while (dueInBaseline.next()) {

                        var dueInBaseObj = {};
                        dueInBaseObj = setDueInBaselineDefaults(dueInBaseObj, dueInBaseline);
                        dueInBaseObj.baseline = parseFloat(dueInBaseline.budget_amt.toString());
                        dueInBaseObj.execution = 0;

                        data.reportData.push(dueInBaseObj);

                    }

                    var dueInExecution = new GlideRecord(FMSConstants.TABLE_BUDGET_ITEM);
                    dueInExecution.addEncodedQuery("budget_ref.fy=" + input.fy + "^budget_ref.project_ref.organization_refIN" + allOrgs.join(",") + "^budget_ref.budget_type=Execution");
                    dueInExecution.query();
                    while (dueInExecution.next()) {

                        var dueInExObj = {};
                        var dueInBaseExists = false;
                        var expRef = dueInExecution.expense_item_ref.toString();
                        var projRef = dueInExecution.budget_ref.project_ref.toString();

                        //check for existing object in the array
                        var existDueBaseline = data.reportData.filter(function(el) {
                            return el.expense_item_ref == expRef && el.project_ref == projRef;
                        });

                        if (existDueBaseline.length > 0) { //use existing object
                            dueInBaseExists = true;
                            dueInExObj = existDueBaseline[0];
                        } else {
                            dueInExObj = setDueInBaselineDefaults(dueInExObj, dueInExecution);
                        }

                        dueInExObj.execution = parseFloat(dueInExecution.budget_amt.toString());

                        if (!dueInBaseExists) {
                            dueInExObj.baseline = 0;
                            data.reportData.push(dueInExObj);
                        }

                    }

                    //add in quarter phasing 

                    var phaseQuery = new GlideRecord(FMSConstants.TABLE_BUDGET_ITEM_PHASE);
                    phaseQuery.addEncodedQuery("budget_item_ref.budget_ref.project_ref.organization_refIN" + allOrgs.join(",") + "^budget_item_ref.budget_ref.fy=" + input.fy + "^budget_item_ref.budget_ref.budget_type=Execution");
                    phaseQuery.query();
                    while (phaseQuery.next()) {
                        var phaseItem = {};
                        var phaseBudgetItem = phaseQuery.budget_item_ref.sys_id.toString();
                        var phaseExpenseItem = phaseQuery.budget_item_ref.expense_item_ref.toString();
                        var phaseProject = phaseQuery.budget_item_ref.budget_ref.project_ref.toString();

                        var existingItems = data.reportData.filter(function(el) {
                            return el.expense_item_ref == phaseExpenseItem && el.project_ref == phaseProject && el.budget_item_ref == phaseBudgetItem;
                        });

                        if (existingItems.length > 0) {
                            phaseItem = existingItems[0];
                        } else {
                            phaseItem.budget_item_ref == phaseBudgetItem;
                            phaseItem.expense_item_ref == phaseExpenseItem;
                            phaseItem.org_ref = phaseQuery.budget_item_ref.budget_ref.project_ref.organization_ref.toString();
                            phaseItem.org_name = phaseQuery.budget_item_ref.budget_ref.project_ref.organization_ref.getDisplayValue();
                            phaseItem.project = phaseQuery.budget_item_ref.budget_ref.project_ref.getDisplayValue();
                            phaseItem.omb_project = phaseQuery.budget_item_ref.budget_ref.project_ref.omb_project_name.toString();
                            phaseItem.project_ref = phaseProject;
                            phaseItem.it_tower_ref = phaseQuery.budget_item_ref.budget_ref.project_ref.irm_f_it_tower.toString();
                            phaseItem.it_tower = phaseQuery.budget_item_ref.budget_ref.project_ref.irm_f_it_tower.getDisplayValue();
                            phaseItem.investment = phaseQuery.budget_item_ref.budget_ref.project_ref.investment.investment.toString();
                            phaseItem.activity_code = phaseQuery.budget_item_ref.expense_item_ref.activity_code.toString();
                            phaseItem.budget_code = phaseQuery.budget_item_ref.expense_item_ref.budget_code_ref.getDisplayValue();
                            phaseItem.q1 = 0;
                            phaseItem.q2 = 0;
                            phaseItem.q3 = 0;
                            phaseItem.q4 = 0;
                            phaseItem.baseline = 0;
                            phaseItem.execution = 0;
                            phaseItem.due_in = 0;
                        }

                        var tMonth = parseInt(phaseQuery.fiscal_month.toString());
                        var tValue = parseFloat(phaseQuery.phase_amt.toString());
                        if (tMonth <= 3)
                            phaseItem.q1 += tValue;
                        if (tMonth >= 4 && tMonth <= 6)
                            phaseItem.q2 += tValue;
                        if (tMonth >= 7 && tMonth <= 9)
                            phaseItem.q3 += tValue;
                        if (tMonth >= 10)
                            phaseItem.q4 += tValue;

                        if (existingItems.length == 0)
                            data.reportData.push(phaseItem);

                    }


                    //calculate due-in
                    data.reportData.forEach(function(item) {
                        item.due_in = (item.q1 + item.q2 + item.q3 + item.q4) - item.execution;
                    });
                }

                if (data.reportType == "phasing") {
                    data.phasingData = [];

                    var phasingQuery = new GlideRecord(FMSConstants.TABLE_BUDGET_ITEM_PHASE);
                    phasingQuery.addEncodedQuery("budget_item_ref.budget_ref.project_ref.organization_refIN" + allOrgs.join(",") + "^budget_item_ref.budget_ref.project_ref=" + input.project + "^budget_item_ref.budget_ref.fy=" + input.fy + "^budget_item_ref.budget_ref.budget_type=" + input.budget_type);
                    phasingQuery.query();
                    while (phasingQuery.next()) {
                        var phasingItem = {};
                        var phasingBudget = phasingQuery.budget_item_ref.expense_item_ref.budget_code_ref.getDisplayValue();
                        var phasingActivity = phasingQuery.budget_item_ref.expense_item_ref.activity_code.toString();

                        var existingPhasing = data.phasingData.filter(function(el) {
                            return el.budget_code == phasingBudget && el.activity_code == phasingActivity;
                        });

                        if (existingPhasing.length > 0) {
                            phasingItem = existingPhasing[0];
                        } else {
                            phasingItem.budget = phasingQuery.budget_item_ref.budget_ref.getDisplayValue();
                            phasingItem.org_ref = phasingQuery.budget_item_ref.budget_ref.project_ref.organization_ref.toString();
                            phasingItem.org_name = phasingQuery.budget_item_ref.budget_ref.project_ref.organization_ref.getDisplayValue();
                            phasingItem.omb_project = phasingQuery.budget_item_ref.budget_ref.project_ref.omb_project_name.toString();
                            phasingItem.project_ref = phasingQuery.budget_item_ref.budget_ref.project_ref.toString();
                            phasingItem.it_tower_ref = phasingQuery.budget_item_ref.budget_ref.project_ref.irm_f_it_tower.toString();
                            phasingItem.it_tower = phasingQuery.budget_item_ref.budget_ref.project_ref.irm_f_it_tower.getDisplayValue();
                            phasingItem.investment = phasingQuery.budget_item_ref.budget_ref.project_ref.investment.investment.toString();
                            phasingItem.activity_code = phasingActivity;
                            phasingItem.budget_code = phasingBudget;
                            phasingItem.budget_code_short = phasingQuery.budget_item_ref.expense_item_ref.budget_code_ref.budget_code.toString();
                            phasingItem.q1 = 0;
                            phasingItem.q2 = 0;
                            phasingItem.q3 = 0;
                            phasingItem.q4 = 0;
                            phasingItem.vals = blankMonths();
                        }

                        var pMonth = parseInt(phasingQuery.fiscal_month.toString());
                        var pValue = parseFloat(phasingQuery.phase_amt.toString());
                        if (pMonth <= 3)
                            phasingItem.q1 += pValue;
                        if (pMonth >= 4 && pMonth <= 6)
                            phasingItem.q2 += pValue;
                        if (pMonth >= 7 && pMonth <= 9)
                            phasingItem.q3 += pValue;
                        if (pMonth >= 10)
                            phasingItem.q4 += pValue;

                        phasingItem.vals[pMonth.toString()] += pValue;

                        if (existingPhasing.length == 0)
                            data.phasingData.push(phasingItem);

                    }


                    var oldBudgetItem = "";
                    var phaseBudgetTotals = {};
                    phaseBudgetTotals.q1 = 0;
                    phaseBudgetTotals.q2 = 0;
                    phaseBudgetTotals.q3 = 0;
                    phaseBudgetTotals.q4 = 0;
                    phaseBudgetTotals.m1 = 0;
                    phaseBudgetTotals.m2 = 0;
                    phaseBudgetTotals.m3 = 0;
                    phaseBudgetTotals.m4 = 0;
                    phaseBudgetTotals.m5 = 0;
                    phaseBudgetTotals.m6 = 0;
                    phaseBudgetTotals.m7 = 0;
                    phaseBudgetTotals.m8 = 0;
                    phaseBudgetTotals.m9 = 0;
                    phaseBudgetTotals.m10 = 0;
                    phaseBudgetTotals.m11 = 0;
                    phaseBudgetTotals.m12 = 0;

                    var phaseBudgetGrandTotals = {};
                    phaseBudgetGrandTotals.q1 = 0;
                    phaseBudgetGrandTotals.q2 = 0;
                    phaseBudgetGrandTotals.q3 = 0;
                    phaseBudgetGrandTotals.q4 = 0;
                    phaseBudgetGrandTotals.m1 = 0;
                    phaseBudgetGrandTotals.m2 = 0;
                    phaseBudgetGrandTotals.m3 = 0;
                    phaseBudgetGrandTotals.m4 = 0;
                    phaseBudgetGrandTotals.m5 = 0;
                    phaseBudgetGrandTotals.m6 = 0;
                    phaseBudgetGrandTotals.m7 = 0;
                    phaseBudgetGrandTotals.m8 = 0;
                    phaseBudgetGrandTotals.m9 = 0;
                    phaseBudgetGrandTotals.m10 = 0;
                    phaseBudgetGrandTotals.m11 = 0;
                    phaseBudgetGrandTotals.m12 = 0;

                    function totalPhasing(totals, mode) {
                        var phasingRowTotal1 = {};
                        phasingRowTotal1 = getPhasingValues(oldBudgetItem);
                        phasingRowTotal1.activity_code = oldBudgetItem.budget_code_short + " Totals: ";
                        if (mode == "grand") {
                            phasingRowTotal1.budget_code = oldBudgetItem.org_name + " Totals:";
                            phasingRowTotal1.activity_code = "";
                        }
                        phasingRowTotal1.m1 = "Oct:";
                        phasingRowTotal1.q1 = totals.m1;
                        phasingRowTotal1.m2 = "Jan:";
                        phasingRowTotal1.q2 = totals.m4;
                        phasingRowTotal1.m3 = "Apr:";
                        phasingRowTotal1.q3 = totals.m7;
                        phasingRowTotal1.m4 = "Jul:";
                        phasingRowTotal1.q4 = totals.m10;
                        phasingRowTotal1.total = 0;
                        data.reportData.push(phasingRowTotal1);

                        var phasingRowTotal2 = {};
                        phasingRowTotal2 = getPhasingValues(oldBudgetItem);
                        phasingRowTotal2.activity_code = oldBudgetItem.budget_code_short + " Totals: ";
                        if (mode == "grand") {
                            phasingRowTotal2.budget_code = oldBudgetItem.org_name + " Totals:";
                            phasingRowTotal2.activity_code = "";
                        }
                        phasingRowTotal2.m1 = "Nov:";
                        phasingRowTotal2.q1 = totals.m2;
                        phasingRowTotal2.m2 = "Feb:";
                        phasingRowTotal2.q2 = totals.m5;
                        phasingRowTotal2.m3 = "May:";
                        phasingRowTotal2.q3 = totals.m8;
                        phasingRowTotal2.m4 = "Aug:";
                        phasingRowTotal2.q4 = totals.m11;
                        phasingRowTotal2.total = 0;
                        data.reportData.push(phasingRowTotal2);

                        var phasingRowTotal3 = {};
                        phasingRowTotal3 = getPhasingValues(oldBudgetItem);
                        phasingRowTotal3.activity_code = oldBudgetItem.budget_code_short + " Totals: ";
                        if (mode == "grand") {
                            phasingRowTotal3.budget_code = oldBudgetItem.org_name + " Totals:";
                            phasingRowTotal3.activity_code = "";
                        }
                        phasingRowTotal3.m1 = "Dec:";
                        phasingRowTotal3.q1 = totals.m3;
                        phasingRowTotal3.m2 = "Mar:";
                        phasingRowTotal3.q2 = totals.m6;
                        phasingRowTotal3.m3 = "Jun:";
                        phasingRowTotal3.q3 = totals.m9;
                        phasingRowTotal3.m4 = "Sept:";
                        phasingRowTotal3.q4 = totals.m12;
                        phasingRowTotal3.total = 0;
                        data.reportData.push(phasingRowTotal3);

                        var phasingRowCodeTotal = {};
                        phasingRowCodeTotal = getPhasingValues(oldBudgetItem);
                        phasingRowCodeTotal.activity_code = oldBudgetItem.budget_code_short + " Totals: ";
                        if (mode == "grand") {
                            phasingRowCodeTotal.budget_code = oldBudgetItem.org_name + " Totals:";
                            phasingRowCodeTotal.activity_code = "";
                        }
                        phasingRowCodeTotal.m1 = "Q1:";
                        phasingRowCodeTotal.q1 = totals.q1;
                        phasingRowCodeTotal.m2 = "Q2:";
                        phasingRowCodeTotal.q2 = totals.q2;
                        phasingRowCodeTotal.m3 = "Q3:";
                        phasingRowCodeTotal.q3 = totals.q3;
                        phasingRowCodeTotal.m4 = "Q4:";
                        phasingRowCodeTotal.q4 = totals.q4;
                        phasingRowCodeTotal.total = totals.q1 + totals.q2 + totals.q3 + totals.q4;
                        data.reportData.push(phasingRowCodeTotal);

                        if (mode != "grand") {

                            phaseBudgetGrandTotals.q1 += totals.q1;
                            phaseBudgetGrandTotals.q2 += totals.q2;
                            phaseBudgetGrandTotals.q3 += totals.q3;
                            phaseBudgetGrandTotals.q4 += totals.q4;
                            phaseBudgetGrandTotals.m1 += totals.m1;
                            phaseBudgetGrandTotals.m2 += totals.m2;
                            phaseBudgetGrandTotals.m3 += totals.m3;
                            phaseBudgetGrandTotals.m4 += totals.m4;
                            phaseBudgetGrandTotals.m5 += totals.m5;
                            phaseBudgetGrandTotals.m6 += totals.m6;
                            phaseBudgetGrandTotals.m7 += totals.m7;
                            phaseBudgetGrandTotals.m8 += totals.m8;
                            phaseBudgetGrandTotals.m9 += totals.m9;
                            phaseBudgetGrandTotals.m10 += totals.m10;
                            phaseBudgetGrandTotals.m11 += totals.m11;
                            phaseBudgetGrandTotals.m12 += totals.m12;

                            totals.q1 = 0;
                            totals.q2 = 0;
                            totals.q3 = 0;
                            totals.q4 = 0;
                            totals.m1 = 0;
                            totals.m2 = 0;
                            totals.m3 = 0;
                            totals.m4 = 0;
                            totals.m5 = 0;
                            totals.m6 = 0;
                            totals.m7 = 0;
                            totals.m8 = 0;
                            totals.m9 = 0;
                            totals.m10 = 0;
                            totals.m11 = 0;
                            totals.m12 = 0;
                        }

                    }


                    data.phasingData.sort(function(a, b) {
                        if (a.budget_code < b.budget_code) {
                            return -1;
                        }
                        if (a.budget_code > b.budget_code) {
                            return 1;
                        }

                        if (a.activity_code < b.activity_code) {
                            return -1;
                        }
                        if (a.activity_code > b.activity_code) {
                            return 1;
                        }

                        return 0;
                    });

                    //calculate row-by-row phasing
                    data.phasingData.forEach(function(item) {

                        if (oldBudgetItem != "") {
                            if (item.budget_code != oldBudgetItem.budget_code) {
                                totalPhasing(phaseBudgetTotals, "regular");
                            }
                        }

                        var phasingRow1 = {};
                        phasingRow1 = getPhasingValues(item);
                        phasingRow1.m1 = "Oct:";
                        phasingRow1.q1 = parseFloat(item.vals["1"].toString());
                        phasingRow1.m2 = "Jan:";
                        phasingRow1.q2 = parseFloat(item.vals["4"].toString());
                        phasingRow1.m3 = "Apr:";
                        phasingRow1.q3 = parseFloat(item.vals["7"].toString());
                        phasingRow1.m4 = "Jul:";
                        phasingRow1.q4 = parseFloat(item.vals["10"].toString());
                        phasingRow1.total = 0;
                        data.reportData.push(phasingRow1);

                        var phasingRow2 = {};
                        phasingRow2 = getPhasingValues(item);
                        phasingRow2.m1 = "Nov:";
                        phasingRow2.q1 = parseFloat(item.vals["2"].toString());
                        phasingRow2.m2 = "Feb:";
                        phasingRow2.q2 = parseFloat(item.vals["5"].toString());
                        phasingRow2.m3 = "May:";
                        phasingRow2.q3 = parseFloat(item.vals["8"].toString());
                        phasingRow2.m4 = "Aug:";
                        phasingRow2.q4 = parseFloat(item.vals["11"].toString());
                        phasingRow2.total = 0;
                        data.reportData.push(phasingRow2);

                        var phasingRow3 = {};
                        phasingRow3 = getPhasingValues(item);
                        phasingRow3.m1 = "Dec:";
                        phasingRow3.q1 = parseFloat(item.vals["3"].toString());
                        phasingRow3.m2 = "Mar:";
                        phasingRow3.q2 = parseFloat(item.vals["6"].toString());
                        phasingRow3.m3 = "Jun:";
                        phasingRow3.q3 = parseFloat(item.vals["9"].toString());
                        phasingRow3.m4 = "Sept:";
                        phasingRow3.q4 = parseFloat(item.vals["12"].toString());
                        phasingRow3.total = 0;
                        data.reportData.push(phasingRow3);

                        var phasingRowTotal = {};
                        phasingRowTotal = getPhasingValues(item);
                        phasingRowTotal.m1 = "Q1:";
                        phasingRowTotal.q1 = item.q1;
                        phasingRowTotal.m2 = "Q2:";
                        phasingRowTotal.q2 = item.q2;
                        phasingRowTotal.m3 = "Q3:";
                        phasingRowTotal.q3 = item.q3;
                        phasingRowTotal.m4 = "Q4:";
                        phasingRowTotal.q4 = item.q4;
                        phasingRowTotal.total = item.q1 + item.q2 + item.q3 + item.q4;
                        data.reportData.push(phasingRowTotal);


                        phaseBudgetTotals.q1 += item.q1;
                        phaseBudgetTotals.q2 += item.q2;
                        phaseBudgetTotals.q3 += item.q3;
                        phaseBudgetTotals.q4 += item.q4;

                        phaseBudgetTotals.m1 += parseFloat(item.vals["1"].toString());
                        phaseBudgetTotals.m2 += parseFloat(item.vals["2"].toString());
                        phaseBudgetTotals.m3 += parseFloat(item.vals["3"].toString());
                        phaseBudgetTotals.m4 += parseFloat(item.vals["4"].toString());
                        phaseBudgetTotals.m5 += parseFloat(item.vals["5"].toString());
                        phaseBudgetTotals.m6 += parseFloat(item.vals["6"].toString());
                        phaseBudgetTotals.m7 += parseFloat(item.vals["7"].toString());
                        phaseBudgetTotals.m8 += parseFloat(item.vals["8"].toString());
                        phaseBudgetTotals.m9 += parseFloat(item.vals["9"].toString());
                        phaseBudgetTotals.m10 += parseFloat(item.vals["10"].toString());
                        phaseBudgetTotals.m11 += parseFloat(item.vals["11"].toString());
                        phaseBudgetTotals.m12 += parseFloat(item.vals["12"].toString());


                        oldBudgetItem = item;
                    });

                    if (data.reportData.length > 0) {
                        totalPhasing(phaseBudgetTotals, "regular");
                        totalPhasing(phaseBudgetGrandTotals, "grand");
                    }

                }

            } else {
                getProjects();
            }

        }
    }



    data.orgData = FMSUtility.getAllAllocationData(FMSConstants.TABLE_ORGANIZATION, '', true);
    data.orgData.sort(function(a, b) {
        var x = a.organization_display.toLowerCase();
        var y = b.organization_display.toLowerCase();
        if (x < y) {
            return -1;
        }
        if (x > y) {
            return 1;
        }
        return 0;
    });

    var budgetTypes = [];
    var typeQuery = new GlideRecord("sys_choice");
    typeQuery.addEncodedQuery("name=x_g_irm_fms_budget^element=budget_type");
    typeQuery.query();
    while (typeQuery.next()) {
        var typeObj = {};
        typeObj.value = typeQuery.value.toString();
        typeObj.name = typeQuery.label.toString();
        budgetTypes.push(typeObj);
    }
    data.budgetTypes = budgetTypes;

})(options);]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>RoseJL@state.gov</sys_created_by>
        <sys_created_on>2020-05-26 15:49:31</sys_created_on>
        <sys_id>ec4336811b85d0500a4a10ad9c4bcbd9</sys_id>
        <sys_mod_count>988</sys_mod_count>
        <sys_name>FMS Reports</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy/>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sp_widget_ec4336811b85d0500a4a10ad9c4bcbd9</sys_update_name>
        <sys_updated_by>MarkelJR@state.gov</sys_updated_by>
        <sys_updated_on>2021-04-01 15:05:41</sys_updated_on>
        <template><![CDATA[<div style="width: 100%; height: 100%">

    <div class="container">
        <div>
            <div class="row">
                <div class="col-auto">
                    <div class="reportTitle">{{c.reportTitle}}</div>
                    <div class="yearSelect orgSpan" ng-if="c.data.reportType != 'financial_transaction'">
                        <label for="selFY" class="selectLabel">FY:</label>
                        <select class="reportSelect" id="selFY" ng-model="c.selectedFY" ng-change="c.generateReport();">
                            <option value="">-Select-</option>
                            <option ng-repeat="year in c.fiscalYears" value="{{year}}">{{year}}
                            </option>
                        </select>
                    </div>
                    <div class="orgSpan"><widget id="organization_selection" options='data.orgSelectionOpts'></widget></div>
                    <div class="yearSelect orgSpan" ng-if="c.data.reportType == 'financial_transaction'">
                        <div class="orgSpan">
                            <label for="startDate" class="selectLabel">Start Date</label>
                            <sp-date-picker class="datePick" id="startDate" ng-model="c.startdt.value" field="c.startdt" sn-include-time="false" sn-change="c.setDates()"></sp-date-picker>
                          </div>
                    
                          <div class="orgSpan">
                            <label for="endDate" class="selectLabel">End Date</label>
                            <sp-date-picker class="datePick" id="endDate" ng-model="c.enddt.value" field="c.enddt" sn-include-time="false" sn-change="c.setDates()"></sp-date-picker>
                          </div>
                    </div>
                    <div class="yearSelect orgSpan" ng-if="c.data.reportType == 'budget_plans' || c.data.reportType == 'phasing'">
                        <label for="selBudgetType" class="selectLabel">Budget Type:</label>
                        <select class="reportSelect" id="selBudgetType" ng-model="c.selectedBudgetType" ng-change="c.generateReport();">
                            <option ng-repeat="type in c.data.budgetTypes" value="{{type.value}}">{{type.name}}
                            </option>
                        </select>
                    </div>
                    <div class="yearSelect orgSpan" ng-if="c.data.reportType == 'phasing'">
                        <label for="selProject" class="selectLabel">Project:</label>
                        <select class="reportSelect" id="selProject" ng-model="c.selectedProject" ng-change="c.generateReport();">
                            <option ng-repeat="project in c.data.projects" value="{{project.value}}">{{project.name}}
                            </option>
                        </select>
                    </div>
                    <div class="yearSelect orgSpan" ng-if="c.data.reportType == 'obligation'">
                        <label for="selObligationType" class="selectLabel">Obligation Status:</label>
                        <select class="reportSelect" id="selObligationType" ng-model="c.selectedObligationType" ng-change="c.generateReport();">
                            <option ng-repeat="type in c.data.obligationTypes" value="{{type.value}}">{{type.name}}
                            </option>
                        </select>
                    </div>
                </div>
                <div class="col-auto form-group">
                    <div class="new-button" uib-dropdown>
                      <button type="button" class="btn btn-light new-button" uib-dropdown-toggle>
                        <i class="icon-menu" style="vertical-align: middle;"></i>
                      </button>
                      <ul class="dropdown-menu" uib-dropdown-menu role="menu" aria-labelledby="split-button" style="left: -120px;">
                        <li role="menuitem">
                            <a href="javascript:void(0)" title="Save current report layout as personal preference" ng-click="c.savePref(c.data.reportType)">Save Layout</a>
                        </li>
                        <li role="menuitem">
                            <a href="javascript:void(0)" title="Delete personal report layout preference and restore application default" ng-click="c.deletePref(c.data.reportType)">Delete Layout</a>
                        </li>
                      </ul>
                    </div>
                    <a href="javascript:void(0)" ng-click="c.toggleExpand(false);" class="btn btn-info new-button">Collapse All Rows</a>
                    <a href="javascript:void(0)" ng-click="c.toggleExpand(true);" class="btn btn-info new-button">Expand All Rows</a>
                    <a href="javascript:void(0)" ng-click="c.exportToCsv();" class="btn btn-success new-button">Export to Excel</a>
                </div>
            </div>
        </div>
        <div class="row" ng-show="c.targetOrg != ''">
            <div class="col-sm-12">
                <div id="reportGrid" class="ag-theme-balham full-grid"></div>
            </div>
        </div>
        <div class="row" ng-show="c.targetOrg == ''">
            <div class="col-sm-12">
                <div class="no-orgs">**Please select at least one Organization to run the report**</div>
            </div>
        </div>
    </div>

</div>]]></template>
    </sp_widget>
</record_update>
