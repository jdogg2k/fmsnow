<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($timeout) {
	/* widget controller */
	var c = this;
	c.targetOrg = c.data.selectedOrg;
	c.usePivot = true;
	c.hideValues = false;
	c.userAuth = $rootScope.userAuth;
	c.selectedBudgetType = "Baseline";
	c.datesSelected = false;

	c.reportData = [];

	function getCurrentFinancialYear(type) {
		var startYear = "";
		var endYear = "";
		var tDate;
		var docDate = new Date();
		if ((docDate.getMonth() + 1) <= 3) {
		  startYear = docDate.getFullYear() - 1;
		  endYear = docDate.getFullYear();
		} else {
		  startYear = docDate.getFullYear();
		  endYear = docDate.getFullYear() + 1;
		}

		startYear--;
		endYear--;

		if (type == "end") {
			return new Date(endYear, 8, 30);
		} else if (type == "start") {
			return new Date(startYear, 9, 1);
		} else {
			return endYear.toString();
		}
	  }

	function parseDate(s) {
		var d = new Date();
		var retDate = s;
		var months = {jan:0,feb:1,mar:2,apr:3,may:4,jun:5,
						jul:6,aug:7,sep:8,oct:9,nov:10,dec:11};
		
		if ( Object.prototype.toString.call(s) === "[object Date]" )  {
			d = s;
			retDate = d.toISOString().split('T')[0]
		}

		return retDate;
	}

	c.startdt = {
		displayValue: getCurrentFinancialYear("start").toLocaleDateString(),
		value: getCurrentFinancialYear("start"),
		name: 'startdt'
	};
	c.enddt = {
		displayValue: getCurrentFinancialYear("end").toLocaleDateString(),
		value: getCurrentFinancialYear("end"),
		name: 'enddt'
	};

	c.setDates = function() {
		if (!c.datesSelected) {
			c.datesSelected = true;
		} else {
			c.generateReport();
			c.datesSelected = false;
		}
	}

	c.generateReport = function () {

		var reportObj = {
			mode: 'buildReport'
		};

		if (c.data.reportType == "budget_plans")
			reportObj.budget_type = c.selectedBudgetType;

		if (c.data.reportType == "financial_transaction") {
			reportObj.start_date = parseDate(c.startdt.value);
			reportObj.end_date = parseDate(c.enddt.value);
		} else {
			reportObj.fy = c.selectedFY;
		}
			

		c.server.get(reportObj).then(function (reportResults) {
			c.reportData = reportResults.data.reportData;
			gridOptions.api.setRowData(c.reportData);
			gridOptions.api.sizeColumnsToFit();
			if (c.data.reportType == "financial_transaction"){
				c.toggleExpand(true);

			}
				
		});
	}
	
	c.getReportTitle = function() {
		var title = "";
		switch (c.data.reportType) {
			case "allocation":
			  title = "Allocation Activity";
			  break;
			case "baseline":
			  title = "Baseline Activity";
			  break;
			case "budget_plans":
			  title = "Budget Plans";
			  break;
			case "financial_transaction":
			  title = "Financial Transaction Detail";
			  c.usePivot = false;
			  c.hideValues = true;
		}
		title += " Report";
		return title
	}

	c.reportTitle = c.getReportTitle();

	c.toggleExpand = function (mode) {
		gridOptions.api.forEachNode(function (rowNode, index) {
			if (rowNode.group)
				rowNode.setExpanded(mode);
		});
	}

	function currencyCssFunc(params) {
		if (params.value !== null && params.value !== undefined && params.value < 0) {
			return {
				"color": "red",
				"font-weight": "bold",
				"text-align": "right"
			};
		} else {
			return {
				"text-align": "right"
			};
		}
	}

	function currencyFormatter(params) {
		if (params.value != 0 && (params.value === null || params.value === undefined || params.value == "")) {
			return null;
		} else if (isNaN(params.value)) {
			return '$' + parseFloat(0).toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
		} else {
			if (parseFloat(params.value) >= 0) {
				return '$' + parseFloat(params.value).toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
			} else {
				return currencyNegative(params.value);
			}
		}
	}

	function currencyNegative(tVal) {
		return '$(' + parseFloat(tVal).toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,").replace("-", "") + ")";
	}

	function generateColumns() {
		var colArray = [];
		if (c.data.reportType == "allocation" || c.data.reportType == "financial_transaction") {

			var appropCol = {
				headerName: 'Appropriation',
				field: 'appropriation',				
				enableRowGroup: true,
				enablePivot: true,
				filter: true
			};

			if (c.data.reportType == "financial_transaction") {
				appropCol.hide = true;
			} else {
				appropCol.rowGroup = true;
				appropCol.rowGroupIndex = 1;
			}

			colArray.push(appropCol);

			if (c.data.reportType == "allocation") {
				colArray.push({
					headerName: 'Appropriation Type',
					field: 'appropriation_type',
					enableRowGroup: true,
					enablePivot: true,
					hide: c.hideValues,
					filter: true
				});
			}

			colArray.push({
				headerName: 'Allocation Group',
				field: 'allocation_group',
				enableRowGroup: true,
				hide: c.hideValues,
				filter: true
            });
		}

		if (c.data.reportType == "budget_plans") {
			colArray.push({
                headerName: 'Budget',
                field: 'budget_name',
				enableRowGroup: true,
				filter: true
			});
		}
		
		if (c.data.reportType == "baseline" || c.data.reportType == "budget_plans" || c.data.reportType == "financial_transaction") {
            colArray.push({
                headerName: 'Budget Code',
                field: 'budget_code',
                enableRowGroup: true,
				rowGroup: true,
				rowGroupIndex: 0,
				filter: true,
				hide: c.hideValues,
				minWidth: 175
			});
			colArray.push({
                headerName: 'Activty Code',
                field: 'activity_code',
                enableRowGroup: true,
				rowGroup: true,
				rowGroupIndex: 1,
				filter: true,
				hide: c.hideValues,
				minWidth: 175
			});
		}

        colArray.push({
            headerName: 'Investment',
            field: 'investment',
            enableRowGroup: true,
			filter: true,
			hide: c.hideValues
        });
        colArray.push({
            headerName: 'Organization',
            field: 'org_name',
            enablePivot: true,
            enableRowGroup: true,
			filter: true,
			hide: c.hideValues
        });
        colArray.push({
            headerName: 'Project',
            field: 'project',
            pivot: false,
            enablePivot: true,
            enableRowGroup: true,
			filter: true,
			hide: c.hideValues
        });
        colArray.push({
            headerName: 'OMB Project',
            field: 'omb_project',
            pivot: false,
            enablePivot: true,
            enableRowGroup: true,
			filter: true,
			hide: c.hideValues
		});

		if (c.data.reportType == "budget_plans") {
			colArray.push({
                headerName: 'Budget Amount',
                field: 'budget',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
		}

		if (c.data.reportType == "financial_transaction") {
			colArray.push({
                headerName: 'Trans. Amount',
                field: 'trans_amount',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'Trans. Date',
                field: 'trans_date',
                enableValue: true
			});
			colArray.push({
                headerName: 'Item Number',
                field: 'item_number',
                enableValue: true
			});
			colArray.push({
                headerName: 'Item Qty',
                field: 'item_qty',
                enableValue: true
			});
		}
		
		if (c.data.reportType == "baseline") {
            colArray.push({
                headerName: 'Baseline',
                field: 'baseline',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'Execution',
                field: 'execution',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'Transfer',
                field: 'transfer',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'In Progress',
                field: 'in_progress',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'Initiated',
                field: 'initiated',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'Committed',
                field: 'committed',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'Obligated',
                field: 'obligated',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
			});
		}

		if (c.data.reportType == "financial_transaction") {
			colArray.push({
                headerName: 'Void',
                field: 'void',
				filter: true,
				hide: true,
				lockVisible: true
			});
			colArray.push({
                headerName: 'Item Cost',
                field: 'item_cost',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'Actual Cost',
                field: 'actual_cost',
                type: 'currency',
                enableValue: true
			});
			colArray.push({
                headerName: 'Received Qty',
                field: 'received_qty',
                enableValue: true
			});
			colArray.push({
                headerName: 'OMB300 Category',
                field: 'omb_category',
				filter: true,
				enableRowGroup: true,
                enableValue: true
			});
			colArray.push({
                headerName: 'Allotment',
				field: 'allotment',
				enableRowGroup: true,
				filter: true,
				hide: true,
				lockVisible: true
			});
			colArray.push({
                headerName: 'Cost Pool',
				field: 'cost_pool',
				enableRowGroup: true,
				filter: true,
				hide: true,
				lockVisible: true
			});
			colArray.push({
				headerName: 'Post',
				enableRowGroup: true,
                field: 'post',
                enableValue: true
			});
			colArray.push({
				headerName: 'Trans. Type',
				enableRowGroup: true,
                field: 'trans_type',
                enableValue: true,
				filter: true
			});
			colArray.push({
				headerName: 'Trans. Status',
				enableRowGroup: true,
                field: 'trans_status',
                enableValue: true,
				filter: true
			});
			colArray.push({
                headerName: 'Obligation',
				field: 'obligation',
				enableRowGroup: true,
                enableValue: true
			});
			colArray.push({
				headerName: 'PR Number',
                field: 'pr_number',
                enableValue: true,
				filter: true
			});
			colArray.push({
				headerName: 'Contract PIID',
				enableRowGroup: true,
                field: 'contract_piid',
                enableValue: true
			});
			colArray.push({
				headerName: 'Award Number',
				enableRowGroup: true,
                field: 'award_number',
                enableValue: true
			});
			colArray.push({
                headerName: 'Description',
				field: 'description',
                enableValue: true
			});
			colArray.push({
                headerName: 'Quote Vendor Name',
				field: 'quote_vendor_name',
                enableValue: true
			});
			colArray.push({
                headerName: 'Vendor Name',
				field: 'vendor_name',
                enableValue: true
			});
		}

        if (c.data.reportType == "allocation") {
            colArray.push({
                headerName: 'Allocations',
                field: 'allocations',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
            });
            colArray.push({
                headerName: 'Reimbursements',
                field: 'reimbursements',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
            });
            colArray.push({
                headerName: 'Transfer In',
                field: 'trans_in',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
            });
            colArray.push({
                headerName: 'Transfer Out',
                field: 'trans_out',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
            });
            colArray.push({
                headerName: 'VG Labor',
                field: 'vg_labor',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
            });
            colArray.push({
                headerName: 'Off. Adjustments',
                field: 'off_adjustments',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
            });
            colArray.push({
                headerName: 'Expended',
                field: 'expended',
                aggFunc: 'sum',
                type: 'currency',
                enableValue: true
            });
		}
		if (c.data.reportType == "allocation" || c.data.reportType == "baseline") {
			colArray.push({
				headerName: 'Balance',
				field: 'balance',
				aggFunc: 'sum',
				type: 'currency',
				enableValue: true
			});
		}

        return colArray;
    }

		var gridOptions = {
			columnDefs: generateColumns(),
			defaultColDef: {
				flex: 1,
				minWidth: 100,
				sortable: true,
				resizable: true
			},
			autoGroupColumnDef: {
				width: 300,
				sort: 'asc',
				cellRendererParams: {
					suppressCount: true
				}
			},
			suppressAggFuncInHeader: true,
			groupMultiAutoColumn: true,
			multiSortKey: 'ctrl',
			accentedSort: true,
			pivotMode: c.usePivot,
			groupIncludeFooter: true,
			groupIncludeTotalFooter: true,
			sideBar: {
				toolPanels: [
				  {
					id: 'columns',
					labelDefault: 'Columns',
					labelKey: 'columns',
					iconKey: 'columns',
					toolPanel: 'agColumnsToolPanel',
				  },
				  {
					id: 'filters',
					labelDefault: 'Filters',
					labelKey: 'filters',
					iconKey: 'filter',
					toolPanel: 'agFiltersToolPanel',
				  },
				],
				position: 'right',
				defaultToolPanel: 'columns',
			},
			columnTypes: {
				'currency': {
					valueFormatter: currencyFormatter,
					cellStyle: currencyCssFunc,
					cellRenderer: 'agAnimateShowChangeCellRenderer'
				}
			}
		};


		c.fiscalYears = [];

		for (var i = 2026; i >= 2000; i--) {
			c.fiscalYears.push(i.toString());
		}

		c.selectedFY = getCurrentFinancialYear("year");

		c.exportToCsv = function () {
			gridOptions.api.exportDataAsCsv({
				columnGroups: true,
				//customFooter: getGridTotals() NOTE WILL WORK WITH NEW AG GRID LICENSE
			});
		}

		function getGridTotals() {
			var hasColumns = false;
			var totalCounts = {};
			gridOptions.api.forEachNode(function (rowNode, index) {
				if (rowNode.group && rowNode.level == 0) {
					if (!hasColumns) {
						for (var prop in rowNode.aggData) {
							if (Object.prototype.hasOwnProperty.call(rowNode.aggData, prop)) {
								totalCounts[prop] = 0;
							}
						}
						hasColumns = true;
					}
					for (var prop in rowNode.aggData) {
						if (Object.prototype.hasOwnProperty.call(rowNode.aggData, prop)) {
							totalCounts[prop] += rowNode.aggData[prop];
						}
					}
				}
			});

			var totalCols = [];
			var mergeCount = 0;
			var allCols = gridOptions.columnApi.getAllDisplayedColumns();
			allCols.forEach(function (col) {
				if (col.aggFunc != undefined) {
					totalCols.push({
						data: {
							type: 'Number',
							value: totalCounts[col.colId]
						}
					});
				} else {
					mergeCount++;
				}
			});

			return [
				[],
				[{
					data: {
						type: 'String',
						value: 'Grand Total'
					},
					mergeAcross: mergeCount
				}, totalCols]
			];

		};

		var gridDiv = document.querySelector('#reportGrid');
		new agGrid.Grid(gridDiv, gridOptions);

		c.generateReport();

		$rootScope.$on('OrgChanged', function (event, args) {
			c.generateReport();
		});
	}
]]></client_script>
        <controller_as>c</controller_as>
        <css>.full-grid {
    width: 94vw;
    height: calc(100vh - 210px);
    clear: both;
}

.fms-list-header {
    margin-bottom: 0px !important;
}

.pageLabel {
    float: left;
    margin-right: 10px;
}

.row-button {
    cursor: pointer;
}

.new-button {
    float: right;
    margin-right: 5px;
}

.excel-button {
    float: right;
}

.edit-pencil {
    color: #003ade;
    font-size: 16px;
    margin-right: 5px;
}

.action-enabled {
    color: #0b8800;
    font-size: 16px;
    margin-right: 5px;
    cursor: pointer;
}

.action-disabled {
    color: #808080;
    font-size: 16px;
    margin-right: 5px;
}

.delete-x {
    color: #000000;
    font-size: 13px;
}

.updated-row {
    background-color: #FFFFCC;
}

.ag-header-cell-label .ag-header-icon.ag-sort-order {
    display: none
}

.ag-row-group {
    font-weight: bold;
}

.full-width-panel {
    position: relative;
    background: #EDF6FF;
    height: 100%;
    width: 100%;
    padding: 5px;
}

.full-row-details {
    position: relative;
    background: #FFFFFF;
    height: 100%;
    width: 100%;
    padding-left: 12px;
    padding-top: 4px;
}

.call-record-cell {
    text-align: right;
}

.full-width-detail {
    padding-top: 4px;
}

.full-width-title {
    font-size: 10pt;
    font-weight: bold;
    float: left;
}

.contract-button {
    float: right;
    margin-top: -13px;
}

.full-width-details {
    float: left;
    padding: 5px;
    margin: 5px;
    width: 100%;
    clear: both;
}

.details-grid {
    display: block;
    clear: both;
    height: 100px;
    margin-bottom: 5px;
}

.full-width-grid-toolbar {
    top: 4px;
    left: 30px;
    margin-left: 150px;
    display: block;
    position: absolute;
}

.full-width-phone-icon {
    padding-right: 10px;
}

.full-width-search {
    border: 1px solid #eee;
    margin-left: 10px;
}

.reportSelect {
    padding: 6px 12px;
    font-size: 14px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.reportTitle {
    float: left;
    margin-right: 23px;
    padding-top: 4px;
    font-weight: bold;
    font-size: 16px;
}

.orgSpan { 
    float: left;
}

.datePick {
    float: left;
    width: 140px !important;
    margin-left: 5px;
  }
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>fms_reports</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>FMS Reports</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function (options) {

	data.reportType = options.report_type.toString();

	var OrgHierarchy = new x_g_irm_fms.OrgHierarchy(); //org helper
	var FMSUtility = new x_g_irm_fms.FMSUtilities(); //helper utility for FMS queries
	var orgName = "";
	var session = gs.getSession();

	var setBaselineDefaults = function (calcQ, multiOrgs) {
		var baseSupObj = {};
		baseSupObj.expense_item_ref = calcQ.fti_expense_item_ref.toString();
		baseSupObj.budget_ref = "";
		baseSupObj.budget_type = "";
		baseSupObj.org_ref = calcQ.proj_organization_ref.toString();
		baseSupObj.org_name = calcQ.proj_organization_ref.getDisplayValue();
		baseSupObj.project = calcQ.ft_project_ref.getDisplayValue();
		baseSupObj.omb_project = calcQ.ft_project_ref.omb_project_name.toString();
		baseSupObj.project_ref = calcQ.ft_project_ref.toString();
		baseSupObj.investment = calcQ.proj_investment.investment.getDisplayValue();
		baseSupObj.activity_code = calcQ.fti_expense_item_ref.activity_code.toString();
		if (multiOrgs)
			baseSupObj.activity_code = calcQ.fti_expense_item_ref.parent_expense_item_ref.activity_code.toString();
		baseSupObj.budget_code = calcQ.fti_expense_item_ref.budget_code_ref.getDisplayValue();
		baseSupObj.baseline = 0;
		baseSupObj.execution = 0;
		baseSupObj.transfer = 0;
		baseSupObj.in_progress = 0;
		baseSupObj.initiated = 0;
		baseSupObj.committed = 0;
		baseSupObj.obligated = 0;
		baseSupObj.balance = 0;
		return baseSupObj;
	}

	if ($sp.getParameter("org_id") && $sp.getParameter("org_id").length > 0)
		data.selectedOrgID = $sp.getParameter("org_id");
	else
		data.selectedOrgID = session.getClientData('org_id');

	if (input) {
		if (input.mode == "buildReport") {
			data.reportData = [];

			//get org name
			var orgQ = new GlideRecord(FMSConstants.TABLE_ORGANIZATION);
			orgQ.addQuery("sys_id", data.selectedOrgID);
			orgQ.query();
			if (orgQ.next()) {
				orgName = orgQ.org_name.toString();
			}

			var allOrgs = OrgHierarchy.getOrgChildren(data.selectedOrgID);
			allOrgs.push(data.selectedOrgID);

			if (data.reportType == "allocation") {


				//get project allocation data
				var projQ = new GlideAggregate(FMSConstants.TABLE_PROJECT_ALLOCATION);
				projQ.addEncodedQuery("fy=" + input.fy + "^project_ref.organization_refIN" + allOrgs.join(","));
				projQ.groupBy("appropriation_ref");
				projQ.groupBy("allocation_group_ref");
				projQ.groupBy("project_ref.organization_ref");
				projQ.groupBy("project_ref");
				projQ.groupBy("fund_source");
				projQ.groupBy("transfer_type_ref");
				projQ.addAggregate("SUM", "allocation_amt");
				projQ.query();
				while (projQ.next()) {

					var projVal = projQ.project_ref.toString();
					var allocGroupVal = projQ.allocation_group_ref.toString();
					var appropVal = projQ.appropriation_ref.appropriation_ref.toString();
					var orgVal = projQ.project_ref.organization_ref.toString();

					var reportObj = {};
					var isExisting = false;

					//check for existing object in the array
					var existingData = data.reportData.filter(function (el) {
						return el.project_ref == projVal && el.allocation_group_ref == allocGroupVal && el.appropriation_ref == appropVal && el.org_ref == orgVal;
					});

					if (existingData.length > 0) { //use existing object
						isExisting = true;
						reportObj = existingData[0];
					}

					if (!isExisting) { //new entry to the array, define the default values

						reportObj.org_ref = orgVal;
						reportObj.org_name = projQ.project_ref.organization_ref.getDisplayValue();
						reportObj.project = projQ.project_ref.getDisplayValue();
						reportObj.project_ref = projVal;
						reportObj.omb_project = projQ.project_ref.omb_project_name.toString();
						reportObj.investment = projQ.project_ref.investment.investment.getDisplayValue();
						reportObj.appropriation_type = projQ.appropriation_ref.appropriation_ref.appropriation_type.getDisplayValue();
						reportObj.appropriation_type_ref = projQ.appropriation_ref.appropriation_ref.appropriation_type.toString();
						reportObj.appropriation = projQ.appropriation_ref.appropriation_ref.getDisplayValue();
						reportObj.appropriation_ref = appropVal;
						reportObj.allocation_group = projQ.allocation_group_ref.getDisplayValue();
						reportObj.allocation_group_ref = allocGroupVal;
						reportObj.allocations = 0;
						reportObj.reimbursements = 0;
						reportObj.trans_in = 0;
						reportObj.trans_out = 0;
						reportObj.toaa = 0;
						reportObj.toa = 0;
						reportObj.vg_labor = 0;
						reportObj.off_adjustments = 0;
						reportObj.expended = 0;
						reportObj.balance = 0;

					}

					if (projQ.fund_source == "Allocation")
						reportObj.allocations += parseFloat(projQ.getAggregate("SUM", "allocation_amt"));

					if (projQ.fund_source == "Reimbursement")
						reportObj.reimbursements += parseFloat(projQ.getAggregate("SUM", "allocation_amt"));

					if (projQ.fund_source == "Transfer In")
						reportObj.trans_in += parseFloat(projQ.getAggregate("SUM", "allocation_amt"));

					if (projQ.fund_source == "Transfer In" && projQ.transfer_type_ref == '9aa3f65d1b0850501f7e113d9c4bcbe6') //TOAA
						reportObj.toaa += parseFloat(projQ.getAggregate("SUM", "allocation_amt"));

					if (!isExisting) {
						data.reportData.push(reportObj);
					}
				}

				//Get supporting info
				var endQ = new GlideAggregate(FMSConstants.VIEW_FIN_TRAN_REPORT);
				/*var endQS = "";
				appropriationsChecked.forEach(function(appVal){
				    endQS += "^ft_project_appropriation_ref.appropriation_ref!=" + appVal;
				});*/
				endQ.addEncodedQuery("proj_organization_refIN" + allOrgs.join(",") + "^ft_fy=" + input.fy + "^ft_void=false");
				endQ.groupBy("ft_allocation_group_ref");
				endQ.groupBy("ft_project_ref");
				endQ.groupBy("ft_project_appropriation_ref");
				endQ.groupBy("proj_organization_ref");
				endQ.groupBy("proj_investment");
				endQ.groupBy("ft_tran_type");
				endQ.addAggregate("SUM", "fti_item_total");
				endQ.query();
				while (endQ.next()) {

					var endprojVal = endQ.ft_project_ref.toString();
					var endallocGroupVal = endQ.ft_allocation_group_ref.toString();
					var endappropVal = endQ.ft_project_appropriation_ref.appropriation_ref.toString();
					var endorgVal = endQ.proj_organization_ref.toString();

					var endObj = {};
					var isExists = false;

					//check for existing object in the array
					var prevData = data.reportData.filter(function (el) {
						return el.project_ref == endprojVal && el.allocation_group_ref == endallocGroupVal && el.appropriation_ref == endappropVal && el.org_ref == endorgVal;
					});

					if (prevData.length > 0) { //use existing object
						isExists = true;
						endObj = prevData[0];
					}

					if (!isExists) { //new entry to the array, define the default values
						endObj.org_ref = endorgVal;
						endObj.org_name = endQ.proj_organization_ref.getDisplayValue();
						endObj.project = endQ.ft_project_ref.getDisplayValue();
						endObj.project_ref = endprojVal;
						endObj.omb_project = endQ.ft_project_ref.omb_project_name.toString();
						endObj.investment = endQ.proj_investment.investment.getDisplayValue();
						//endObj.appropriation_type = endQ.ft_project_appropriation_ref.appropriation_ref.appropration_type.getDisplayValue();
						//endObj.appropriation_type_ref = endQ.ft_project_appropriation_ref.appropriation_ref.appropration_type.toString();
						endObj.appropriation_type = "";
						endObj.appropriation_type_ref = "";
						endObj.appropriation = endQ.ft_project_appropriation_ref.appropriation_ref.getDisplayValue();
						endObj.appropriation_ref = endappropVal;
						endObj.allocation_group = endQ.ft_allocation_group_ref.getDisplayValue();
						endObj.allocation_group_ref = endallocGroupVal;
						endObj.allocations = 0;
						endObj.reimbursements = 0;
						endObj.trans_in = 0;
						endObj.trans_out = 0;
						endObj.toaa = 0;
						endObj.toa = 0;
						endObj.vg_labor = 0;
						endObj.off_adjustments = 0;
						endObj.expended = 0;
						endObj.balance = 0;
					}

					var finalCost = parseFloat(endQ.getAggregate("SUM", "fti_item_total"));
					if (endQ.ft_tran_type == "TE" || endQ.ft_tran_type == "TI" || endQ.ft_tran_type == "TVGT") {
						endObj.trans_out += finalCost;
					} else if (endQ.ft_tran_type == "TVGL") {
						endObj.vg_labor += finalCost;
					} else if (endQ.ft_tran_type == "TOA") {
						endObj.toa += finalCost;
					} else {
						endObj.expended += finalCost;
					}

					if (!isExists) {
						data.reportData.push(endObj);
					}

				}

				//total and make negative
				data.reportData.forEach(function (item) {
					item.vg_labor = item.vg_labor * -1;
					item.trans_out = item.trans_out * -1;
					item.expended = item.expended * -1;
					item.off_adjustments = (item.toaa - item.toa);
					item.balance = item.allocations + item.trans_in + item.reimbursements + item.toaa + item.vg_labor + item.toa + item.trans_out + item.expended;
				});
			}

			if (data.reportType == "baseline" || data.reportType == "budget_plans") {

				var baseProjects = "";
				var baseEQ = "budget_ref.project_ref.organization_refIN" + allOrgs.join(",") + "^budget_ref.fy=" + input.fy;
				if (data.reportType == "budget_plans")
					baseEQ += "^budget_ref.budget_type=" + input.budget_type;
				var baseQ = new GlideAggregate(FMSConstants.TABLE_BUDGET_ITEM);
				baseQ.addEncodedQuery(baseEQ);
				baseQ.groupBy("budget_ref");
				baseQ.groupBy("expense_item_ref");
				baseQ.groupBy("budget_ref.budget_type");
				baseQ.addAggregate("SUM", "budget_amt");
				baseQ.query();

				while (baseQ.next()) {

					var reportObj = {};
					var baseExists = false;
					var budgetRef = baseQ.budget_ref.toString();
					var expRef = baseQ.expense_item_ref.toString();
					var typeRef = baseQ.budget_ref.budget_type.toString();

					//check for existing object in the array
					var existBaseline = data.reportData.filter(function (el) {
						return el.budget_ref == budgetRef && el.expense_item_ref == expRef && el.budget_type == typeRef;
					});

					if (existBaseline.length > 0) { //use existing object
						baseExists = true;
						reportObj = existBaseline[0];
					}

					if (!baseExists) { //new entry to the array, define the default values

						reportObj.expense_item_ref = expRef;
						reportObj.budget_ref = budgetRef;
						reportObj.budget_type = typeRef;
						reportObj.org_ref = baseQ.budget_ref.project_ref.organization_ref.toString();
						reportObj.org_name = baseQ.budget_ref.project_ref.organization_ref.getDisplayValue();
						reportObj.project = baseQ.budget_ref.project_ref.getDisplayValue();
						reportObj.omb_project = baseQ.budget_ref.project_ref.omb_project_name.toString();
						reportObj.project_ref = baseQ.budget_ref.project_ref.toString();
						reportObj.investment = baseQ.budget_ref.project_ref.investment.investment.toString();
						reportObj.activity_code = baseQ.expense_item_ref.activity_code.toString();
						if (allOrgs.length > 1)
							reportObj.activity_code = baseQ.expense_item_ref.parent_expense_item_ref.activity_code.toString();
						reportObj.budget_code = baseQ.expense_item_ref.budget_code_ref.getDisplayValue();
						if (data.reportType == "baseline") {
							reportObj.baseline = 0;
							reportObj.execution = 0;
							reportObj.transfer = 0;
							reportObj.in_progress = 0;
							reportObj.initiated = 0;
							reportObj.committed = 0;
							reportObj.obligated = 0;
							reportObj.balance = 0;
							baseProjects += reportObj.project_ref + ",";
						} else {
							reportObj.budget = 0;
							reportObj.budget_name = baseQ.budget_ref.project_ref.project_name.toString() + " v" + baseQ.budget_ref.budget_version.toString() + "r" + baseQ.budget_ref.budget_revision.toString();
						}

					}

					if (data.reportType == "baseline") {

						if (reportObj.budget_type == "Baseline") {
							reportObj.baseline += parseFloat(baseQ.getAggregate("SUM", "budget_amt"));
						}

						if (reportObj.budget_type == "Execution") {
							reportObj.execution += parseFloat(baseQ.getAggregate("SUM", "budget_amt"));
						}

					} else {
						reportObj.budget += parseFloat(baseQ.getAggregate("SUM", "budget_amt"));
					}

					data.reportData.push(reportObj);
				}

				if (data.reportType == "baseline") {

					var calcQ = new GlideAggregate(FMSConstants.VIEW_FIN_TRAN_REPORT);
					calcQ.addEncodedQuery("proj_organization_refIN" + allOrgs.join(",") + "^ft_fy=" + input.fy + "^ft_tran_type=TVGL^ORft_tran_type=TE^ORft_tran_type=TI^ORft_tran_type=TOA^ORft_tran_type=TVGT^ft_void=false");
					calcQ.groupBy("ft_project_ref");
					calcQ.groupBy("fti_expense_item_ref");
					calcQ.groupBy("proj_organization_ref");
					calcQ.addAggregate("SUM", "fti_item_total");
					calcQ.query();
					while (calcQ.next()) {

						//if (baseProjects.indexOf(calcQ.ft_project_ref.toString()) > -1) {

						var baseSupObj = {};
						baseSupObj = setBaselineDefaults(calcQ, (allOrgs.length > 1));
						baseSupObj.transfer = parseFloat(calcQ.getAggregate("SUM", "fti_item_total"));
						data.reportData.push(baseSupObj);

						//}
					}

					var inProgQ = new GlideAggregate(FMSConstants.VIEW_FIN_TRAN_REPORT);
					inProgQ.addEncodedQuery("proj_organization_refIN" + allOrgs.join(",") + "^ft_fy=" + input.fy + "^ft_tran_type!=TVGL^ft_tran_type!=TE^ft_tran_type!=TI^ft_tran_type!=TOA^ft_tran_type!=TVGT^ft_void=false");
					inProgQ.groupBy("ft_project_ref");
					inProgQ.groupBy("fti_expense_item_ref");
					inProgQ.groupBy("proj_organization_ref");
					inProgQ.groupBy("ft_tran_status");
					inProgQ.addAggregate("SUM", "fti_item_total");
					inProgQ.query();
					while (inProgQ.next()) {

						var progressObj = {};
						progressObj = setBaselineDefaults(inProgQ, (allOrgs.length > 1));

						if (inProgQ.ft_tran_status == "In-Progress")
							progressObj.in_progress = parseFloat(inProgQ.getAggregate("SUM", "fti_item_total"));

						if (inProgQ.ft_tran_status == "Initiated")
							progressObj.initiated = parseFloat(inProgQ.getAggregate("SUM", "fti_item_total"));

						if (inProgQ.ft_tran_status == "Committed")
							progressObj.committed = parseFloat(inProgQ.getAggregate("SUM", "fti_item_total"));

						if (inProgQ.ft_tran_status == "Obligated")
							progressObj.obligated = parseFloat(inProgQ.getAggregate("SUM", "fti_item_total"));

						data.reportData.push(progressObj);

					}

					//calculate balances
					data.reportData.forEach(function (item) {
						item.balance = item.execution - (item.transfer + item.in_progress + item.initiated + item.committed + item.obligated);
					});

				}

			}

			if (data.reportType == "financial_transaction") {
				var finTranQ = new GlideRecord(FMSConstants.TABLE_FINANCIAL_TRANSACTION_ITEM);
				finTranQ.addEncodedQuery("fin_tran_ref.project_ref.organization_refIN" + allOrgs.join(",") + "^fin_tran_ref.tran_dateBETWEENjavascript:gs.dateGenerate('" + input.start_date + "','start')@javascript:gs.dateGenerate('" + input.end_date + "','end')");
				finTranQ.query();
				while (finTranQ.next()) {

					var finTranObj = {};

					finTranObj.org_ref = finTranQ.fin_tran_ref.project_ref.organization_ref.toString();
					finTranObj.org_name = finTranQ.fin_tran_ref.project_ref.organization_ref.getDisplayValue();
					finTranObj.project = finTranQ.fin_tran_ref.project_ref.getDisplayValue();
					finTranObj.project_ref = finTranQ.fin_tran_ref.project_ref.toString();
					finTranObj.omb_project = finTranQ.fin_tran_ref.project_ref.omb_project_name.toString();
					finTranObj.omb_category = finTranQ.omb_category_ref.getDisplayValue();
					finTranObj.investment = finTranQ.fin_tran_ref.project_ref.investment.getDisplayValue();
					finTranObj.appropriation = finTranQ.fin_tran_ref.project_appropriation_ref.appropriation_ref.getDisplayValue();
					finTranObj.appropriation_ref = finTranQ.fin_tran_ref.project_appropriation_ref.appropriation_ref.toString();
					finTranObj.allocation_group = finTranQ.fin_tran_ref.allocation_group_ref.getDisplayValue();
					finTranObj.allocation_group_ref = finTranQ.fin_tran_ref.allocation_group_ref.toString();
					finTranObj.allotment = finTranQ.fin_tran_ref.allotment_ref.allotment.toString();
					finTranObj.description = finTranQ.fin_tran_ref.description.toString();
					finTranObj.cost_pool = finTranQ.fin_tran_ref.cost_pool_ref.getDisplayValue();
					finTranObj.cost_pool_ref = finTranQ.fin_tran_ref.cost_pool_ref.toString();
					finTranObj.activity_code = finTranQ.expense_item_ref.activity_code.toString();
					finTranObj.budget_code = finTranQ.expense_item_ref.budget_code_ref.getDisplayValue();
					finTranObj.trans_status = finTranQ.fin_tran_ref.tran_status.toString();
					finTranObj.trans_type = finTranQ.fin_tran_ref.tran_type.toString();
					finTranObj.trans_date = finTranQ.fin_tran_ref.tran_date.toString();
					finTranObj.obligation = finTranQ.fin_tran_ref.obligation.toString();
					finTranObj.void = finTranQ.fin_tran_ref.void.toString();
					finTranObj.post = finTranQ.post_ref.getDisplayValue();
					finTranObj.contract_piid = finTranQ.fin_tran_ref.contract_ref.contract_piid.toString();
					finTranObj.item_number = parseInt(finTranQ.tran_item.toString());
					finTranObj.item_qty = parseInt(finTranQ.item_qty.toString());
					finTranObj.received_qty = parseInt(finTranQ.received_qty.toString());
					finTranObj.item_cost = parseFloat(finTranQ.item_cost.toString());
					finTranObj.actual_cost = parseFloat(finTranQ.actual_cost.toString());
					finTranObj.trans_amount = parseFloat(finTranQ.item_total.toString());

					//get PO info
					var finTranPOQ = new GlideRecord(FMSConstants.TABLE_FINANCIAL_TRANSACTION_ITEM_PO);
					finTranPOQ.addEncodedQuery("fin_tran_ref=" + finTranQ.fin_tran_ref.toString());
					finTranPOQ.query();
					while (finTranPOQ.next()) {
						finTranObj.award_number = finTranPOQ.award_nmbr.toString();
						finTranObj.pr_number = finTranPOQ.po_nmbr.toString();
						finTranObj.vendor_name = finTranPOQ.award_vendor_name.toString();
						finTranObj.quote_vendor_name = finTranPOQ.quote_vendor_name.toString();
					}

					data.reportData.push(finTranObj);

				}

			}

		}
	}

	data.orgData = FMSUtility.getAllAllocationData(FMSConstants.TABLE_ORGANIZATION, '', true);
	data.orgData.sort(function (a, b) {
		var x = a.organization_display.toLowerCase();
		var y = b.organization_display.toLowerCase();
		if (x < y) {
			return -1;
		}
		if (x > y) {
			return 1;
		}
		return 0;
	});

	var budgetTypes = [];
	var typeQuery = new GlideRecord("sys_choice");
	typeQuery.addEncodedQuery("name=x_g_irm_fms_budget^element=budget_type");
	typeQuery.query();
	while (typeQuery.next()) {
		var typeObj = {};
		typeObj.value = typeQuery.value.toString();
		typeObj.name = typeQuery.label.toString();
		budgetTypes.push(typeObj);
	}
	data.budgetTypes = budgetTypes;

})(options);
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>RoseJL@state.gov</sys_created_by>
        <sys_created_on>2020-05-26 15:49:31</sys_created_on>
        <sys_id>ec4336811b85d0500a4a10ad9c4bcbd9</sys_id>
        <sys_mod_count>433</sys_mod_count>
        <sys_name>FMS Reports</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy/>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sp_widget_ec4336811b85d0500a4a10ad9c4bcbd9</sys_update_name>
        <sys_updated_by>RoseJL@state.gov</sys_updated_by>
        <sys_updated_on>2020-06-30 15:09:22</sys_updated_on>
        <template><![CDATA[<div style="width: 100%; height: 100%">

    <div class="container">
        <div>
            <div class="row">
                <div class="col-sm-9 form-group">
                    <div class="reportTitle">{{c.reportTitle}}</div>
                    <div class="orgSpan">
                        <widget id="organization_selection" options='{"hide_widget": false, "hide_project": true}'></widget>
                    </div>
                    <div class="yearSelect orgSpan" ng-if="c.data.reportType != 'financial_transaction'">
                        <label for="selFY" class="selectLabel">FY:</label>
                        <select class="reportSelect" id="selFY" ng-model="c.selectedFY" ng-change="c.generateReport();">
                            <option value="">-Select-</option>
                            <option ng-repeat="year in c.fiscalYears" value="{{year}}">{{year}}
                            </option>
                        </select>
                    </div>
                    <div class="yearSelect orgSpan" ng-if="c.data.reportType == 'financial_transaction'">
                        <div class="orgSpan">
                            <label for="startDate" class="selectLabel">Start Date</label>
                            <sp-date-picker class="datePick" id="startDate" ng-model="c.startdt.value" field="c.startdt" sn-include-time="false" sn-change="c.setDates()"></sp-date-picker>
                          </div>
                    
                          <div class="orgSpan">
                            <label for="endDate" class="selectLabel">End Date</label>
                            <sp-date-picker class="datePick" id="endDate" ng-model="c.enddt.value" field="c.enddt" sn-include-time="false" sn-change="c.setDates()"></sp-date-picker>
                          </div>
                    </div>
                    <div class="yearSelect orgSpan" ng-if="c.data.reportType == 'budget_plans'">
                        <label for="selBudgetType" class="selectLabel">Budget Type:</label>
                        <select class="reportSelect" id="selBudgetType" ng-model="c.selectedBudgetType" ng-change="c.generateReport();">
                            <option ng-repeat="type in c.data.budgetTypes" value="{{type.value}}">{{type.name}}
                            </option>
                        </select>
                    </div>
                </div>
                <div class="col-sm-3 form-group">
                    <a href="javascript:void(0)" ng-click="c.exportToCsv();" class="btn btn-success new-button">Export to Excel</a>
                    <a href="javascript:void(0)" ng-click="c.toggleExpand(false);" class="btn btn-info new-button">Collapse All Rows</a>
                    <a href="javascript:void(0)" ng-click="c.toggleExpand(true);" class="btn btn-info new-button">Expand All Rows</a>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <div id="reportGrid" class="ag-theme-balham full-grid"></div>
            </div>
        </div>
    </div>

</div>]]></template>
    </sp_widget>
</record_update>
