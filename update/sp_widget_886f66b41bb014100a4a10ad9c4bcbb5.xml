<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, AGGridFactory, $timeout) {
    /* widget controller */
    var c = this;
    c.targetOrg = c.data.selectedOrg;
    c.targetProj = c.data.selectedProj;
    c.userAuth = $rootScope.userAuth;

    var groupManager = new AGGridFactory();

    c.addNew = function() {
        groupManager.editRow("-1", "project_ref=" + c.targetProj);
    }
	
	c.canAdd = function() { 
		if (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst) {
			if (c.userAuth.orgs.indexOf(c.targetOrg) >= 0) 
				return true;
			else
				return false;
		}
		else
			return false;
	}

	c.canEdit = function(auth, data) {
		if (auth.orgs.indexOf(c.targetOrg) >= 0) 
			return true;
		else
			return false;
	}

	c.canDelete = function(auth, data) { return c.canEdit(auth, data); }

    c.exportExcel = function() {
        groupManager.exportExcel();
    }

    var groupColumnDefs = [{
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
			suppressMenu: true,
			sortable: false,
            cellRenderer: 'editCell',
			cellRendererParams: function(params) { 
				return { "show": c.canEdit(c.userAuth, params.data) }; 
			}
        },
        {
            field: 'group_name',
            headerName: 'Group Name',
            filter: 'agTextColumnFilter',
            sort: 'asc'
        },
        {
            field: 'group_desc',
            headerName: 'Group Description',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'val_tran_fy',
            headerName: 'Validate Tran FY',
            maxWidth: 80,
					  filter: 'agSetColumnFilter',
            filterParams: {
                values: [ true, false ]
            },
            cellStyle: {
                textAlign: 'center'
            },
            cellRenderer: 'checkbox'
        },
        {
            field: 'val_tran_allotment',
            headerName: 'Validate Tran Allotment',
            maxWidth: 80,
					  filter: 'agSetColumnFilter',
            filterParams: {
                values: [ true, false ]
            },
            cellStyle: {
                textAlign: 'center'
            },
            cellRenderer: 'checkbox'
        },
        {
            field: 'val_tran_appropriation',
            headerName: 'Validate Tran Appropriation',
            maxWidth: 80,
					  filter: 'agSetColumnFilter',
            filterParams: {
                values: [ true, false ]
            },
            cellStyle: {
                textAlign: 'center'
            },
            cellRenderer: 'checkbox'
        },
        {
            field: 'val_tran_not_deficient',
            headerName: 'Validate Tran Not Deficient',
            maxWidth: 80,
					  filter: 'agSetColumnFilter',
            filterParams: {
                values: [ true, false ]
            },
            cellStyle: {
                textAlign: 'center'
            },
            cellRenderer: 'checkbox'
        },
        {
            field: 'disabled',
            headerName: 'Disabled',
            maxWidth: 80,
            cellStyle: {
                textAlign: 'center'
            },
            cellRenderer: 'checkbox'
        },
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
			suppressMenu: true,
			sortable: false,
            cellRenderer: 'deleteCell',
			cellRendererParams: function(params) { 
				return { "show": c.canDelete(c.userAuth, params.data) }; 
			}
        }
    ];

    var groupProps = {
        pageController: c,
        tableName: c.data.tableName,
        dataArray: null,
        pageType: 'Allocation Group',
        linkedField: '',
        detailsPage: '',
    }

    groupManager.setColumns(groupColumnDefs);
    groupManager.setPageProperties(groupProps);
    groupManager.setRenderers('allocation_group'); //build renderers and set display field to show on delete attempt
    groupManager.renderGrid('groupGrid'); //render grid objects
    groupManager.setGridData(c.data.tableData); //set grid data
    groupManager.setColumnsVisible(['edit', 'delete'], (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst));
	$timeout(function () { groupManager.fitColumns(); }, 250);

    $rootScope.$on('ProjChanged', function(event, args) {
        c.targetProj = args.proj_id;
        c.server.get({
           mode: "setProj",
           proj_id: args.proj_id
        }).then(function(resp) {
            groupManager.setGridData(resp.data.tableData); //set grid data
        });
    });

}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>allocation_group_grid</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Allocation Group Grid</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

	data.selectedOrg = "";
	data.selectedProj = "";
    var FMSUtility = new x_g_irm_fms.FMSUtilities(); //helper utility for FMS queries

    var session = gs.getSession();
	if (session.getClientData('org_id') && session.getClientData('org_id').length > 0)
		data.selectedOrg = session.getClientData('org_id');
	if (session.getClientData('proj_id') && session.getClientData('proj_id').length > 0)
		data.selectedProj = session.getClientData('proj_id');

    if (input) { //input holds the data coming back to the server
        if (input.mode == "deleteRow") {
            FMSUtility.deleteRecord(FMSConstants.TABLE_ALLOCATION_GROUP, input.rowID);
        }
        if (input.mode == "setProj") {
            data.selectedProj = input.proj_id.toString();
        }
    }

    data.tableData = FMSUtility.getTableData(FMSConstants.TABLE_ALLOCATION_GROUP, "project_ref=" + data.selectedProj, true); 
    data.tableName = FMSConstants.TABLE_ALLOCATION_GROUP;

})();



]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>MarkelJR@state.gov</sys_created_by>
        <sys_created_on>2020-05-13 10:38:22</sys_created_on>
        <sys_id>886f66b41bb014100a4a10ad9c4bcbb5</sys_id>
        <sys_mod_count>33</sys_mod_count>
        <sys_name>Allocation Group Grid</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy/>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sp_widget_886f66b41bb014100a4a10ad9c4bcbb5</sys_update_name>
        <sys_updated_by>PuriA@state.gov</sys_updated_by>
        <sys_updated_on>2020-06-25 19:25:47</sys_updated_on>
        <template><![CDATA[<div style="width: 100%; height: 100%">

  <div class="container">
    <div class="row">
      <div class="form-group col-sm-12 fms-list-header">
        <div class="fms-header-buttons">
          <a href="javascript:void(0)" ng-click="c.exportExcel();" class="btn btn-primary excel-button">Export to Excel</a>
           <a href="javascript:void(0)" ng-click="c.addNew();" ng-show="c.canAdd()" class="btn btn-info new-button">Add Allocation Group</a>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-sm-12">

        <div id="groupGrid" class="ag-theme-balham full-grid"></div>

      </div>
    </div>
  </div>

</div>]]></template>
    </sp_widget>
</record_update>
