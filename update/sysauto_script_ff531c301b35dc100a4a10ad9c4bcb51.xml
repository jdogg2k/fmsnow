<?xml version="1.0" encoding="UTF-8"?><record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <condition><![CDATA[var today = new GlideDateTime();
var gr1 = new GlideRecord("x_g_irm_fms_notification");
gr1.query();
while(g1.next())
	{
		
	}]]></condition>
        <conditional>false</conditional>
        <name>Contract Daily Notifications</name>
        <run_as display_value="Ajay Puri">1e2322591bd55c100a4a10ad9c4bcbc2</run_as>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period/>
        <run_start>2020-07-01 16:19:34</run_start>
        <run_time>1970-01-01 06:00:00</run_time>
        <run_type>daily</run_type>
        <script><![CDATA[var gr = new GlideRecord("x_g_irm_fms_contract_party");
gr.addEncodedQuery('party_notify!=false');
gr.query();
while (gr.next()) {
    var today = new GlideDateTime();
    var dt = today.getDate();

    var current_oy = new GlideDateTime(gr.contract_ref.current_oy_start_date);
    var dur_55 = GlideDateTime.subtract(dt, current_oy);
    var diffrence_oy_55 = parseInt(dur_55.getDisplayValue());
    var days_55;
	
	var last_run;
    var gr1 = new GlideRecord("x_g_irm_fms_notification");
    //gr1.addQuery("name", "value");
    gr1.query();
    while (gr1.next()) {
        if (gr1.sys_id == '56d2cc351bc090500a4a10ad9c4bcbf9') {
            days_55 = gr1.basis_relative_days.toString();
			
        }
    }

    days_55 = days_55.split('-');
    days_55 = parseInt(days_55[1]);

    var user_55 = [];

    var gr_flag = new GlideRecord("x_g_irm_fms_contract");
    gr_flag.addQuery("sys_id", gr.contract_ref.sys_id);
    //gr_flag.add
    gr_flag.query();
    if (gr_flag.next()) {
        if ((diffrence_oy_55 <= days_55)&&(days_55==false)) {
            user_55.push(gr.party_email + "");
			
			var gr_55 = new GlideRecord('x_g_irm_fms_notification');
            gr_55.get('sys_id', '56d2cc351bc090500a4a10ad9c4bcbf9');
            var daystoadd_55 = parseInt(gr_55.interim_days);
            var last_run_55 = new GlideDateTime(gr_55.last_run_date);
            last_run_55.addDaysUTC(daystoadd_55);

            if (today >= last_run_55) {
            gs.eventQueue('x_g_irm_fms.55days', gr_flag, user_55.toString());
			
            gr_flag.days_55 = true;
            gr_flag.update();
			gr_55.last_run_date = today;
            gr_55.update();
            gs.info('schedule job 55 ' + gr.contract_ref.getDisplayValue() + " " + user_55.toString());
			//gr1.last_run_date = today;
			
			
			}//gr1.update();

        }
    }


}]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>PuriA@state.gov</sys_created_by>
        <sys_created_on>2020-07-01 16:32:34</sys_created_on>
        <sys_id>ff531c301b35dc100a4a10ad9c4bcb51</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>Contract Daily Notifications</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy/>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sysauto_script_ff531c301b35dc100a4a10ad9c4bcb51</sys_update_name>
        <sys_updated_by>PuriA@state.gov</sys_updated_by>
        <sys_updated_on>2020-07-13 20:00:43</sys_updated_on>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>
