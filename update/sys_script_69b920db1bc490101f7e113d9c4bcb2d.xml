<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_g_irm_fms_project_allocation</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Project Allocation Validation</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    if (current.project_ref == current.xfer_project_ref) {
        current.xfer_project_ref.setError("The transfer project code must be different from the project code.");
        current.setAbortAction(true);
    }
    switch (current.fund_source.ToUpperCase()) {
        case "ALLOCATION":
            {
                if (!(current.transfer_type.nil() || current.transfer_type.toString().length == 0)) {
                    current.transfer_type_ref.setError("Allocations may not include a Transfer Type.");
                    current.setAbortAction(true);
                }
                if (!current.xfer_project_ref.nil()) {
                    current.xfer_project_ref.setError("Allocations may not include a Transfer Project Code.");
                    current.setAbortAction(true);
                }
                if (!current.organization_reimburse_ref.nil()) {
                    current.organization_reimburse_ref.setError("Allocations may not include a Reimbursement Organization Code.");
                    current.setAbortAction(true);
                }
                if (!(current.agreement_nmbr.nil() || current.agreement_number.toString().length == 0)) {
                    current.agreement_nmbr.setError("Allocations may not include an Agreement Number.");
                    current.setAbortAction(true);
                }
                break;
            }
        case "TRANSFER IN":
            {
                if (current.transfer_type.nil() || current.transfer_type.toString().length == 0) {
                    current.transfer_type.setError("Transfer Type is required for all transfers.");
                    current.setAbortAction(true);
                }
                if ((current.xfer_project_ref.nil()) && (current.transfer_type == "Internal" || current.TransferType == "Adjustment")) {
                    current.xfer_project_ref.setError("Transfer Project Code is required for the selected transfer type.");
                    current.setAbortAction(true);
                }
                if (!current.organization_reimburse_ref.nil()) {
                    current.organization_reimburse_ref.setError("Transfers may not include a Reimbursement Organization Code.");
                    current.setAbortAction(true);
                }
                break;
            }
        case "REIMBURSE":
            {
                if (current.organization_reimburse_ref.nil()) {
                    current.organization_reimburse_ref("Organization Code is required for all reimbursements.");
                    current.setAbortAction(true);
                }
                if (current.agreement_nmbr.nil() || current.agreement_nmbr.toString().length == 0) {
                    current.agreement_nmbr.setError("Agreement Number is required for all reimbursements.");
                    current.setAbortAction(true);
                }
                if (!(current.transfer_type.nil() || current.transfer_type.toString().length == 0)) {
                    current.transfer_type.setError("Reimbursements may not include a Transfer Type.");
                    current.setAbortAction(true);
                }
                if (!current.xfer_project_ref.nil()) {
                    current.xfer_project_ref.setError("Reimbursements may not include a Transfer Project Code.");
                    current.setAbortAction(true);
                }
                break;
            }
    }

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>markeljr@state.gov</sys_created_by>
        <sys_created_on>2020-04-13 12:48:25</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>69b920db1bc490101f7e113d9c4bcb2d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Project Allocation Validation</sys_name>
        <sys_overrides/>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy/>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sys_script_69b920db1bc490101f7e113d9c4bcb2d</sys_update_name>
        <sys_updated_by>markeljr@state.gov</sys_updated_by>
        <sys_updated_on>2020-04-13 12:48:25</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=69b920db1bc490101f7e113d9c4bcb2d"/>
</record_update>
