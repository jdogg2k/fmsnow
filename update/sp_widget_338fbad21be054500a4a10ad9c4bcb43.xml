<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function(AGContractGridFactory, spModal, $timeout) {
    /* widget controller */
    var c = this;
    c.targetOrg = c.data.selectedOrg;
    c.userAuth = $rootScope.userAuth;
    c.tierMode = "Hide";

    var contractManager = new AGContractGridFactory();

    c.addNew = function() {
        contractManager.editRow("-1", "organization_ref=" + c.targetOrg, c.data.tableName);
    }

    c.canAdd = function() {
        if (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst) {
            if (c.userAuth.orgs.indexOf(c.data.selectedOrg) >= 0)
                return true;
            else
                return false;
        } else
            return false;
    }

    c.canEdit = function(auth, data) {
        if (auth.orgs.indexOf(data.selectedOrg) >= 0)
            return true;
        else
            return false;
    }

    c.canDelete = function(auth, data) {
        return c.canEdit(auth, data);
    }

    c.exportExcel = function() {
        contractManager.exportExcel();
    }

    c.toggleTiers = function() {
        if (c.tierMode == "Hide") {
            c.tierMode = "Show";
        } else {
            c.tierMode = "Hide";
        }
        contractManager.refreshGrid();
    }

    $rootScope.$on('OrgDetailsGridChanged', function(event, args) {
        if (args.grid_type == "contract") {
            contractManager.fitColumns();
        }
    });

    var contractColumnDefs = [{
            field: 'contract_piid',
            headerName: 'Contract PIID',
            sort: 'asc',
            minWidth: 175,
            cellRenderer: 'agGroupCellRenderer'
        },
        {
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'editCell',
            cellRendererParams: function(params) {
                return {
                    "show": c.canEdit(c.userAuth, params.data)
                };
            }
        },
        {
            field: 'contract_class',
            headerName: 'Classification',
            filter: 'agTextColumnFilter',
            suppressMenu: true,
            sort: 'asc'
        },
        {
            field: 'operational_status',
            headerName: 'Status',
            filter: 'agTextColumnFilter',
            suppressMenu: true
        },
        {
            field: 'award_level',
            headerName: 'Award Level'
        },
        {
            field: 'vendor_names',
            headerName: 'Vendor Name(s)',
            filter: 'agTextColumnFilter',
            suppressMenu: true
        },
        {
            field: 'contract_category',
            headerName: 'Category'
        },
        {
            field: 'contract_type',
            headerName: 'Contract Type'
        },
        {
            field: 'product_service',
            headerName: 'Product / Service'
        },
        {
            field: 'aqm_delay_days',
            headerName: 'AQM Delay'
        },
        {
            field: 'pricing_model',
            headerName: 'Pricing Model'
        },
        {
            field: 'contract_period',
            headerName: 'Period'
        },
        {
            field: 'option_years',
            headerName: 'OY'
        },
        {
            field: 'has_risk',
            headerName: 'Risk?',
            cellStyle: {textTransform: 'capitalize'}
        },
        {
            field: 'priority_tier',
            headerName: 'Tier',
            hide: true
        },
        {
            field: 'perform_start_date',
            headerName: 'Start Date'
        },
        {
            field: 'perform_end_date',
            headerName: 'End Date'
        },
        {
            field: 'base_value',
            headerName: 'Base Value',
            type: 'currency'
        },
        {
            field: 'total_value',
            headerName: 'Total Value',
            type: 'currency'
        },
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'deleteCell',
            cellRendererParams: function(params) {
                return {
                    "show": c.canDelete(c.userAuth, params.data)
                };
            }
        }
    ];

    var contractRelationshipDefs = [{
            field: 'edit_relationship',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'editCell',
            cellRendererParams: function(params) {
                return {
                    "show": c.canEdit(c.userAuth, params.data)
                };
            }
        },
        {
            field: 'relationship_type',
            headerName: 'Relationship Type'
        },
        {
            field: 'contract_rel_ref',
            headerName: 'Related Contract PIID'
        },
        {
            field: 'relationship_date',
            headerName: 'Relationship Date'
        },
        {
            field: '',
            headerName: 'Operational Status'
        },
        {
            field: '',
            headerName: 'Classification'
        },
        {
            field: 'delete_relationship',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'deleteCell',
            cellRendererParams: function(params) {
                return {
                    "show": c.canDelete(c.userAuth, params.data)
                };
            }
        }
    ];

    var contractPartyDefs = [{
            field: 'edit_party',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'editCell',
            cellRendererParams: function(params) {
                return {
                    "show": c.canEdit(c.userAuth, params.data)
                };
            }
        },
        {
            field: 'party_type',
            headerName: 'Party Type'
        },
        {
            field: 'party_name',
            headerName: 'Party / Agent / Group Name'
        },
        {
            field: 'party_email',
            headerName: 'Email Address'
        },
        {
            field: 'party_notify',
            headerName: 'Notify',
            maxWidth: 80,
            cellStyle: {
                textAlign: 'center'
            },
            cellRenderer: 'checkbox'
        },
        {
            field: 'delete_party',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            cellRenderer: 'deleteCell'
        }
    ];

    var contractProps = {
        pageController: c,
        tableName: c.data.tableName,
        dataArray: null,
        pageType: 'Contract',
        linkedField: '',
        detailsPage: ''
    }

    contractManager.setColumns(contractColumnDefs);
    contractManager.setPageProperties(contractProps, c.data.partyTableName, c.data.relationshipTableName);
    contractManager.setRenderers('contract_display', contractPartyDefs, contractRelationshipDefs); //build renderers and set display field to show on delete attempt and set details columns
    contractManager.renderGrid('contractGrid'); //render grid objects
    contractManager.setGridData(c.data.tableData); //set grid data
    contractManager.setColumnsVisible(['edit', 'delete'], (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst));
	$timeout(function () { contractManager.fitColumns(); }, 250);

    $rootScope.$on('OrgChanged', function(event, args) {
        c.targetOrg = args.org_id;
        c.server.get({
            mode: "setOrg",
            org_id: args.org_id
        }).then(function(resp) {
            contractManager.setGridData(resp.data.tableData); //set grid data
        });
    });

	$rootScope.$on('ProjChanged', function(event, args) {
        c.targetProj = args.proj_id;
        c.server.get({
           mode: "setProj",
           proj_id: args.proj_id
        }).then(function(resp) {
            contractManager.setGridData(resp.data.tableData); //set grid data
        });
    });
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.full-grid {
    width: 94vw;
    height: calc(100vh - 210px);
    clear: both;
}

.fms-list-header {
    margin-bottom: 0px !important;
}

.pageLabel {
    float: left;
    margin-right: 10px;
}

.row-button {
    cursor: pointer;
}

.new-button {
    float: left;
}

.excel-button {
    float: right;
}

.edit-pencil {
    color: #003ade;
    font-size: 13px;
}

.delete-x {
    color: #000000;
    font-size: 13px;
}

.updated-row {
    background-color: #FFFFCC;
}

.tier-1-row {
    background-color: #ff707a;
}

.tier-2-row {
    background-color: #ffffe0;
}

.tier-3-row {
    background-color: #90ee90;
}

.expired-row {
    background-color: #c5c5c5;
}

.full-width-panel {
    position: relative;
    background: #EDF6FF;
    height: 100%;
    width: 100%;
    padding: 5px;
}

.call-record-cell {
    text-align: right;
}

.full-width-detail {
    padding-top: 4px;
}

.full-width-title {
    font-size: 10pt;
    font-weight: bold;
    float: left;
}

.contract-button {
    float: right;
    margin-top: -13px;
}

.full-width-details {
    float: left;
    padding: 5px;
    margin: 5px;
    width: 100%;
    clear: both;
}

.details-grid {
    display: block;
    clear: both;
    height: 100px;
    margin-bottom: 5px;
}

.full-width-grid-toolbar {
    top: 4px;
    left: 30px;
    margin-left: 150px;
    display: block;
    position: absolute;
}

.full-width-phone-icon {
    padding-right: 10px;
}

.full-width-search {
    border: 1px solid #eee;
    margin-left: 10px;
}

.ag-react-container {
    display: inline-block;
    width: 100%;
    height: 100%;
}

.ag-cell-focus,
.ag-cell-no-focus {
    border: none !important;
    box-shadow: none !important;
}

.ag-cell:focus {
    border: none !important;
    outline: none;
    box-shadow: none !important;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>contract_grid</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Contract Grid</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

	data.selectedOrg = "";
	data.selectedProj = "";
    var FMSUtility = new x_g_irm_fms.FMSUtilities(); //helper utility for FMS queries

    var session = gs.getSession();
	if (session.getClientData('org_id') && session.getClientData('org_id').length > 0)
		data.selectedOrg = session.getClientData('org_id');
	if (session.getClientData('proj_id') && session.getClientData('proj_id').length > 0)
		data.selectedProj = session.getClientData('proj_id');

    if (input) { //input holds the data coming back to the server
        if (input.mode == "getNewRec") {
           data.newRec = FMSUtility.getTableData(input.targetTable, "sys_id=" + input.newSysID, true)[0];
        }
        if (input.mode == "deleteRow"){
			if (FMSUtility.canDeleteContract(input.rowID)) {
				FMSUtility.deleteRecord(input.delTable, input.rowID);
			} else {
				data.isError = true;
				data.errorMsg = "This Contract cannot be deleted as it is linked to existing transactions";
			}
		}
        if (input.mode == "setOrg") {
            data.selectedOrg = input.org_id.toString();
        }
        if (input.mode == "setProj") {
            data.selectedProj = input.proj_id.toString();
        }
    }

	var filter = "";
	if (data.selectedOrg.length > 0) filter = "organization_ref=" + data.selectedOrg;
	if (data.selectedProj.length > 0) filter += "^project_ref=" + data.selectedProj;
    data.tableData = FMSUtility.getAllContractData(FMSConstants.TABLE_CONTRACT, filter, true); //get all contract item info
    data.tableName = FMSConstants.TABLE_CONTRACT;
    data.partyTableName = FMSConstants.TABLE_CONTRACT_PARTY;
    data.relationshipTableName = FMSConstants.TABLE_CONTRACT_CONTRACT;

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>RoseJL@state.gov</sys_created_by>
        <sys_created_on>2020-05-05 17:24:17</sys_created_on>
        <sys_id>338fbad21be054500a4a10ad9c4bcb43</sys_id>
        <sys_mod_count>117</sys_mod_count>
        <sys_name>Contract Grid</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy/>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sp_widget_338fbad21be054500a4a10ad9c4bcb43</sys_update_name>
        <sys_updated_by>RoseJL@state.gov</sys_updated_by>
        <sys_updated_on>2020-06-02 18:17:21</sys_updated_on>
        <template><![CDATA[<div style="width: 100%; height: 100%">

  <div class="container">
    <div class="row">
      <div class="form-group col-sm-12 fms-list-header">
        <div class="fms-header-buttons">
          <a href="javascript:void(0)" ng-click="c.addNew();" ng-show="c.canAdd()" class="btn btn-info new-button">Add Contract</a>
          <a href="javascript:void(0)" ng-click="c.toggleTiers();" class="btn btn-danger excel-button">{{c.tierMode}} Tier Colors</a>
          <a href="javascript:void(0)" ng-click="c.exportExcel();" class="btn btn-primary excel-button new-button">Export to Excel</a>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-sm-12">

        <div id="contractGrid" class="ag-theme-balham full-grid"></div>

      </div>
    </div>
  </div>

</div>]]></template>
    </sp_widget>
</record_update>
