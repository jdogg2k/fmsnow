<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($scope,AGGridFactory) {
    /* widget controller */
    var c = this;
	c.userAuth = c.data.userAuth;

    var allotManager = new AGGridFactory();
	
	c.addNew = function() {
	//	var a = window.location;
        allotManager.editRow("-1", "", c.data.tableName);
	//	top.window.location = a;
				
    }
	//alert(c.data.tableName);

	c.canAdd = function() { 
		if (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin) 
			return true;
		else
			return false;
	}

	c.canEdit = function(auth, data) {
		if (c.userAuth.roles.isSysAdmin || auth.orgs.indexOf(data.sys_id) >= 0) 
			return true;
		else
			return false;
	}

	c.canDelete = function(auth, data) { return c.canEdit(auth, data); }
    
    c.exportExcel = function() {
       allotManager.exportExcel();
	}
	// Allotment Table Columns
		if(c.data.tableName == 'x_g_irm_fms_allotment')
			{
    allotManager.setColumns ([{
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            }, 
			suppressMenu: true,
			sortable: false,
			cellRenderer: 'editCell',
			cellRendererParams: function(params) {
				//alert(params.data);
				return { "show": c.canEdit(c.userAuth, params.data) }; 
			}
        },
						 {
            field: 'allotment',
            headerName: 'Allotment',
					 filter: 'agNumberColumnFilter',
					 sort: 'asc',
			resizable: true,
            cellStyle: {
                /*color: 'blue',
                'text-decoration': 'underline',
                'cursor': 'pointer',
						     'font-weight':'bold'*/
            }
        },
        {
            field: 'allotment_desc',
            headerName: 'Description',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
			suppressMenu: true,
			sortable: false,
            cellRenderer: 'deleteCell',
			cellRendererParams: function(params) { 
				return {
                    "show": c.canDelete(c.userAuth, params.data)
                }; 
			}
        }
    ]);
			}
	
	      //Appropriation Table Columns
		if(c.data.tableName == 'x_g_irm_fms_appropriation')
			{
    allotManager.setColumns ([{
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            }, 
			suppressMenu: true,
			sortable: false,
			cellRenderer: 'editCell',
			cellRendererParams: function(params) {
				//alert(params.data);
				return { "show": c.canEdit(c.userAuth, params.data) }; 
			}
        },
						 {
            field: 'appropriation',
            headerName: 'Appropriation',
					 filter: 'agTextColumnFilter',
						sort: 'asc',
			resizable: true
        },
        {
            field: 'appropriation_type',
            headerName: 'Appropriation Type',
            filter: 'agTextColumnFilter'
        },
				{
            field: 'active',
            headerName: 'Active',
					  filter: 'agSetColumnFilter',
            filterParams: {
                values: [ true, false ]
            },
            cellStyle: {textTransform: 'capitalize'}
        },											
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
			suppressMenu: true,
			sortable: false,
            cellRenderer: 'deleteCell',
			cellRendererParams: function(params) { 
				return {
                    "show": c.canDelete(c.userAuth, params.data)
                };
			}
        }
    ]);
			}
	
	     //Appropriation Type Table Columns
		if(c.data.tableName == 'x_g_irm_fms_appropriation_type')
			{
    allotManager.setColumns ([{
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            }, 
			suppressMenu: true,
			sortable: false,
			cellRenderer: 'editCell',
			cellRendererParams: function(params) {
				//alert(params.data);
				return { "show": c.canEdit(c.userAuth, params.data) }; 
			}
        },
						 {
            field: 'appropriation_type',
            headerName: 'Appropriation Type',
					 filter: 'agTextColumnFilter',
						sort: 'asc',
			     resizable: true
        },
        {
            field: 'appropriation_type_desc',
            headerName: 'Description',
            filter: 'agTextColumnFilter'
        },
				  {
            field: 'disabled',
            headerName: 'Disabled',
            maxWidth: 80,
					  filter: 'agSetColumnFilter',
            filterParams: {
                values: [ true, false ]
            },
            cellStyle: {
                textAlign: 'center'
            },
               cellRenderer: function (params) {
                var input = document.createElement('input');
                input.type = "checkbox";
                input.checked = params.value;
                input.disabled = true;
                return input;
            }
        },											
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
			suppressMenu: true,
			sortable: false,
            cellRenderer: 'deleteCell',
			cellRendererParams: function(params) { 
				return {
                    "show": c.canDelete(c.userAuth, params.data)
                }; 
			}
        }
    ]);
			}
	
	     //Budget Codes Table Columns
		if(c.data.tableName == 'x_g_irm_fms_budget_code')
			{
    allotManager.setColumns ([{
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            }, 
			suppressMenu: true,
			sortable: false,
			cellRenderer: 'editCell',
			cellRendererParams: function(params) {
				//alert(params.data);
				return { "show": c.canEdit(c.userAuth, params.data) }; 
			}
        },
						 {
            field: 'budget_code',
            headerName: 'Budget Code',
					 filter: 'agTextColumnFilter',
						sort: 'asc',
			resizable: true
        },
        {
            field: 'budget_code_class',
            headerName: 'Classification',
            filter: 'agTextColumnFilter'
        },
				 {
            field: 'disabled',
            headerName: 'Disabled',
            maxWidth: 80,
					  filter: 'agSetColumnFilter',
            filterParams: {
                values: [ true, false ]
            },
            cellStyle: {
                textAlign: 'center'
            },
            cellRenderer: function (params) {
                var input = document.createElement('input');
                input.type = "checkbox";
                input.checked = params.value;
                input.disabled = true;
                return input;
            }
        },
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
			suppressMenu: true,
			sortable: false,
            cellRenderer: 'deleteCell',
			cellRendererParams: function(params) { 
				return {
                    "show": c.canDelete(c.userAuth, params.data)
                };
			}
        }
    ]);
			}
	
	     //Function Code Table Columns
		if(c.data.tableName == 'x_g_irm_fms_function_code')
			{
    allotManager.setColumns ([{
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            }, 
			suppressMenu: true,
			sortable: false,
			cellRenderer: 'editCell',
			cellRendererParams: function(params) {
				//alert(params.data);
				return { "show": c.canEdit(c.userAuth, params.data) }; 
			}
        },
						 {
            field: 'function_code',
            headerName: 'Function Code',
					 filter: 'agNumberColumnFilter',
						sort: 'asc',
			resizable: true
        },
        {
            field: 'function_desc',
            headerName: 'Description',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
			suppressMenu: true,
			sortable: false,
            cellRenderer: 'deleteCell',
			cellRendererParams: function(params) { 
				return {
                    "show": c.canDelete(c.userAuth, params.data)
                };
			}
        }
    ]);
			}
	
	     //Investment Table Columns
		if(c.data.tableName == 'x_g_irm_fms_investment')
			{
    allotManager.setColumns ([{
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            }, 
			suppressMenu: true,
			sortable: false,
			cellRenderer: 'editCell',
			cellRendererParams: function(params) {
				//alert(params.data);
				return { "show": c.canEdit(c.userAuth, params.data) }; 
			}
        },
						 {
            field: 'investment',
            headerName: 'Investment',
					 filter: 'agTextColumnFilter',
						sort: 'asc',
			resizable: true
        },
        {
            field: 'investment_desc',
            headerName: 'Description',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
			suppressMenu: true,
			sortable: false,
            cellRenderer: 'deleteCell',
			cellRendererParams: function(params) { 
				return {
                    "show": c.canDelete(c.userAuth, params.data)
                };
			}
        }
    ]);
			}
	     //Notification Table Columns
		if(c.data.tableName == 'x_g_irm_fms_notification')
			{
    allotManager.setColumns ([{
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            }, 
			suppressMenu: true,
			sortable: false,
			cellRenderer: 'editCell',
			cellRendererParams: function(params) {
				//alert(params.data);
				return { "show": c.canEdit(c.userAuth, params.data) }; 
			}
        },
						 {
            field: 'basis_table',
            headerName: 'Basis Table',
					 filter: 'agTextColumnFilter',
					 sort: 'asc',
			resizable: true
        },
        {
            field: 'basis_column',
            headerName: 'Basis Column',
            filter: 'agTextColumnFilter'
        },
				 {
            field: 'basis_relative_days',
            headerName: 'Relative Days',
            filter: 'agTextColumnFilter'
        },
				 {
            field: 'interim_days',
            headerName: 'Interim Days',
            filter: 'agTextColumnFilter'
        },
				 {
            field: 'last_run_date',
            headerName: 'Last Run',
            filter: 'agTextColumnFilter'
        },		
				{
            field: 'message_subject',
            headerName: 'Subject',
            filter: 'agTextColumnFilter'
        },											
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
			suppressMenu: true,
			sortable: false,
            cellRenderer: 'deleteCell',
			cellRendererParams: function(params) { 
				return {
                    "show": c.canDelete(c.userAuth, params.data)
                };
			}
        }
    ]);
			}
	     //Region Table Columns
		if(c.data.tableName == 'x_g_irm_fms_region')
			{
    allotManager.setColumns ([{
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            }, 
			suppressMenu: true,
			sortable: false,
			cellRenderer: 'editCell',
			cellRendererParams: function(params) {
				//alert(params.data);
				return { "show": c.canEdit(c.userAuth, params.data) }; 
			}
        },
						 {
            field: 'region_code',
            headerName: 'Region Code',
					 filter: 'agTextColumnFilter',
					 sort: 'asc',
			resizable: true
        },
        {
            field: 'region_name',
            headerName: 'Region Name',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
			suppressMenu: true,
			sortable: false,
            cellRenderer: 'deleteCell',
			cellRendererParams: function(params) { 
				return {
                    "show": c.canDelete(c.userAuth, params.data)
                };
			}
        }
    ]);
			}
	     //Transfer Type Table Columns
		if(c.data.tableName == 'x_g_irm_fms_transfer_type')
			{
    allotManager.setColumns ([{
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            }, 
			suppressMenu: true,
			sortable: false,
			cellRenderer: 'editCell',
			cellRendererParams: function(params) {
				//alert(params.data);
				return { "show": c.canEdit(c.userAuth, params.data) }; 
			}
        },
						 {
            field: 'transfer_type',
            headerName: 'Transfer Type',
					 filter: 'agTextColumnFilter',
						sort: 'asc',
			resizable: true
        },
        {
            field: 'transfer_type_code',
            headerName: 'Transfer Type Code',
            filter: 'agTextColumnFilter'
        },
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
			suppressMenu: true,
			sortable: false,
            cellRenderer: 'deleteCell',
			cellRendererParams: function(params) { 
				return {
                    "show": c.canDelete(c.userAuth, params.data)
                }; 
			}
        }
    ]);
			}
	
	
			if(c.data.tableName == 'x_g_irm_fms_post')
			{
    allotManager.setColumns ([{
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            }, 
			suppressMenu: true,
			sortable: false,
			cellRenderer: 'editCell',
			cellRendererParams: function(params) {
				//alert(params.data);
				return { "show": c.canEdit(c.userAuth, params.data) }; 
			}
        },
						 {
            field: 'post_name',
            headerName: 'Post Name',
					 filter: 'agTextColumnFilter',
					 sort: 'asc',
			resizable: true
          
        },
        {
            field: 'post_type',
            headerName: 'Post Type',
           filter: 'agSetColumnFilter'
          
        },
				 {
            field: 'post_city',
            headerName: 'Post City',
            filter: 'agTextColumnFilter'
        },
				 {
            field: 'post_country',
            headerName: 'Post Country',
            filter: 'agTextColumnFilter'
        },
				 {
            field: 'region_ref',
            headerName: 'Region Name',
           filter: 'agSetColumnFilter'
        },												
        
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
			suppressMenu: true,
			sortable: false,
            cellRenderer: 'deleteCell',
			cellRendererParams: function(params) { 
				return {
                    "show": c.canDelete(c.userAuth, params.data)
                };
			}
        }
    ]);
			}
//alert(c.data.tableName);
    var pageProps = {
        pageController: c, 
        tableName: c.data.tableName, 
        dataArray: null, 
        pageType: c.data.tableLabel, 
        linkedField: '', 
        detailsPage: '',
        usePaging: false
    }
	//	alert(tableName);

    allotManager.setPageProperties(pageProps);
    allotManager.setRenderers(); //build renderers 
    allotManager.renderGrid('allotLookup'); //render grid objects
    allotManager.setGridData(c.data.tableData); //set grid data
    allotManager.setColumnsVisible(['edit', 'delete'], (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin));
   allotManager.fitColumns();

}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>allotment_lookup_table</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Allotment Lookup Table</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

    var FMSUtility = new x_g_irm_fms.FMSUtilities(); //helper utility for FMS queries
	var FMSPermissions = new x_g_irm_fms.FMSPermissions();
//	var FMSConstants = new x_g_irm_fms.FMSConstants();
    
  if (input) { //input holds the data coming back to the server
		
		if (input.mode == "deleteRow"){
			
			if(input.delTable == FMSConstants.TABLE_APPROPRIATION){
				//if(FMSPermissions.canDeleteAllotment(input.rowID)){
					if(FMSPermissions.canDeleteAppropriation(input.rowID)){
				
					FMSUtility.deleteRecord(FMSConstants.TABLE_APPROPRIATION, input.rowID);
				}
					 else {
				data.isError = true;
				data.errorMsg = "This Appropriation cannot be deleted as it is linked to existing financial transactions or Project Allocation";
			}
				
			//	}
			
				 }
			
			else if(input.delTable == FMSConstants.TABLE_ALLOTMENT){
				
				if(FMSPermissions.canDeleteAllotment(input.rowID)){
				
					FMSUtility.deleteRecord(FMSConstants.TABLE_ALLOTMENT, input.rowID);
				}
					 else {
				data.isError = true;
				data.errorMsg = "This Allotment cannot be deleted as it is linked to existing financial transactions";
			}
				 
			}
			
		else if(input.delTable == FMSConstants.TABLE_APPROPRIATION_TYPE){
				
			 if(FMSPermissions.canDeleteAppropriationType(input.rowID)){
				
					FMSUtility.deleteRecord(FMSConstants.TABLE_APPROPRIATION_TYPE, input.rowID);
				}
					 else {
				data.isError = true;
				data.errorMsg = "This Appropriation Type cannot be deleted as it is linked to existing financial transactions, Project Allocation or Appropriation";
			}
			
				 
			}
			
		else if(input.delTable == FMSConstants.TABLE_BUDGET_CODE){
				
		  if(FMSPermissions.canDeleteBudgetCode(input.rowID)){
				
					FMSUtility.deleteRecord(FMSConstants.TABLE_BUDGET_CODE, input.rowID);
				}
					 else {
				data.isError = true;
				data.errorMsg = "This Budget Code cannot be deleted as it is linked to existing Expense Items";
			}
	
				 
			}
			
		else if(input.delTable == FMSConstants.TABLE_FUNCTION_CODE){
				
			
				FMSUtility.deleteRecord(FMSConstants.TABLE_FUNCTION_CODE, input.rowID);
				 
			}
		else if(input.delTable == FMSConstants.TABLE_INVESTMENT){
				
			 if(FMSPermissions.canDeleteInvestment(input.rowID)){
				
					FMSUtility.deleteRecord(FMSConstants.TABLE_INVESTMENT, input.rowID);
				}
					 else {
				data.isError = true;
				data.errorMsg = "This Investment cannot be deleted as it is linked to existing Projects or Allocation Pools ";
			}

				 
			}
			
			else if(input.delTable == FMSConstants.TABLE_NOTIFICATION){
				
			
				FMSUtility.deleteRecord(FMSConstants.TABLE_NOTIFICATION, input.rowID);
				 
			}
			else if(input.delTable == FMSConstants.TABLE_POST){
				
				if(FMSPermissions.canDeletePost(input.rowID)){
				
						FMSUtility.deleteRecord(FMSConstants.TABLE_POST, input.rowID);
				}
					 else {
				data.isError = true;
				data.errorMsg = "This Post cannot be deleted as it is referenced to existing financial transactions item";
			}
			
			
				 
			}
				else if(input.delTable == FMSConstants.TABLE_REGION){
				
			
				FMSUtility.deleteRecord(FMSConstants.TABLE_REGION, input.rowID);
				 
			}
				else if(input.delTable == FMSConstants.TABLE_TRANSFER_TYPE){
					
				if(FMSPermissions.canDeleteTransferType(input.rowID)){
				
						FMSUtility.deleteRecord(FMSConstants.TABLE_TRANSFER_TYPE, input.rowID);
				}
					 else {
				data.isError = true;
				data.errorMsg = "This Transfer Type cannot be deleted as it is referenced to existing Project Allocations";
			}
			
				 
			}
				
			}
			else {
				data.isError = true;
				data.errorMsg = "This record cannot be deleted";
			}
		}

	
	var tab, tablname;
	//gs.addInfoMessage("test"+$sp.getParameter("sys_id")+"test");
	if($sp.getParameter("tableName")==null)
		{
			data.tableName =FMSConstants.TABLE_ALLOTMENT;
					data.tableData =FMSUtility.getTableData(FMSConstants.TABLE_ALLOTMENT, "", true); 
			    data.tableLabel ='Allotment Codes';
		}

	if($sp.getParameter("tableName") != null)
		{
			
			var tabName = $sp.getParameter("tableName");
			if(tabName == 'TABLE_ALLOTMENT')
				{
					data.tableName =FMSConstants.TABLE_ALLOTMENT;
					data.tableData =FMSUtility.getTableData(FMSConstants.TABLE_ALLOTMENT, "", true);
					data.tableLabel ='Allotment Codes';
				}
			else if(tabName == 'TABLE_APPROPRIATION')
				{
					data.tableName = FMSConstants.TABLE_APPROPRIATION;
				  data.tableData =FMSUtility.getTableData(FMSConstants.TABLE_APPROPRIATION, "", true); 
					 data.tableLabel ='Appropriation';
				}
				else if(tabName == 'TABLE_APPROPRIATION_TYPE')
				{
					data.tableName =FMSConstants.TABLE_APPROPRIATION_TYPE;
					data.tableData =FMSUtility.getTableData(FMSConstants.TABLE_APPROPRIATION_TYPE, "", true); 
					 data.tableLabel ='Appropriation Type';
				}	
				else if(tabName == 'TABLE_BUDGET_CODE')
				{
					data.tableName =FMSConstants.TABLE_BUDGET_CODE;
					data.tableData =FMSUtility.getTableData(FMSConstants.TABLE_BUDGET_CODE, "", true); 
					 data.tableLabel ='Budget Code';
				}	
				else if(tabName == 'TABLE_FUNCTION_CODE')
				{
					data.tableName =FMSConstants.TABLE_FUNCTION_CODE;
					data.tableData =FMSUtility.getTableData(FMSConstants.TABLE_FUNCTION_CODE, "", true); 
					 data.tableLabel ='Function Code';
				}
				else if(tabName == 'TABLE_INVESTMENT')
				{
					data.tableName =FMSConstants.TABLE_INVESTMENT;
					data.tableData =FMSUtility.getTableData(FMSConstants.TABLE_INVESTMENT, "", true); 
					 data.tableLabel ='Investment';
				}
				else if(tabName == 'TABLE_NOTIFICATION')
				{
					data.tableName =FMSConstants.TABLE_NOTIFICATION;
					data.tableData =FMSUtility.getTableData(FMSConstants.TABLE_NOTIFICATION, "", true); 
					 data.tableLabel ='Notification';
				}
			 else if(tabName == 'TABLE_POST')
				{
					data.tableName =FMSConstants.TABLE_POST;
					data.tableData =FMSUtility.getTableData(FMSConstants.TABLE_POST, "", true); 
					 data.tableLabel ='Post';
				}
				else if(tabName == 'TABLE_REGION')
				{
					data.tableName =FMSConstants.TABLE_REGION;
					data.tableData =FMSUtility.getTableData(FMSConstants.TABLE_REGION, "", true); 
					 data.tableLabel ='Region';
				}
				else if(tabName == 'TABLE_TRANSFER_TYPE')
				{
					data.tableName =FMSConstants.TABLE_TRANSFER_TYPE;
					data.tableData =FMSUtility.getTableData(FMSConstants.TABLE_TRANSFER_TYPE, "", true);
					 data.tableLabel ='Transfer Type';
				}

			
			
		}
	data.userAuth = FMSUtility.getUserAuth();
//	data.tableName = FMSConstants.TABLE_ALLOTMENT;
		//data.tableName = tab;
	//data.tab = tab;
	//   data.tableData = FMSUtility.getTableData(FMSConstants.TABLE_ALLOTMENT, "", true); //get all org info
//data.tableData = FMSUtility.getTableData(tab, "", true); //get all org info

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>PuriA@state.gov</sys_created_by>
        <sys_created_on>2020-07-06 14:18:09</sys_created_on>
        <sys_id>9557e5561bf590100a4a10ad9c4bcb82</sys_id>
        <sys_mod_count>135</sys_mod_count>
        <sys_name>Allotment Lookup Table</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy/>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sp_widget_9557e5561bf590100a4a10ad9c4bcb82</sys_update_name>
        <sys_updated_by>PuriA@state.gov</sys_updated_by>
        <sys_updated_on>2020-11-12 19:30:29</sys_updated_on>
        <template><![CDATA[<div style="width: 100%; height: 100%">

  <div class="container">
    <div class="row">
      <div class="form-group col-sm-12 fms-list-header">
               
<div>
                  <h4 style="text-align:center;">{{data.tableLabel}}</h4>
</div>
        <div class="fms-header-buttons">

        <a href="javascript:void(0)" ng-click="c.exportExcel();" class="btn btn-primary excel-button">Export to Excel</a>
          <a href="javascript:void(0)" ng-click="c.addNew();" ng-show="c.canAdd()" class="btn btn-info new-button">Add {{data.tableLabel}}</a>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-sm-12">

        <div id="allotLookup" class="ag-theme-balham full-grid "style="width: 100%; height: 500px;"></div>

      </div>
    </div>
  </div>

</div>]]></template>
    </sp_widget>
</record_update>
