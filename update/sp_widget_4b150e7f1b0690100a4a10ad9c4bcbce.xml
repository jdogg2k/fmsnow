<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope,AGGridFactory) {
    /* widget controller */
    var c = this;
   // c.targetOrg = c.data.selectedOrg;
    c.userAuth = c.data.userAuth;
   // c.tierMode = "Hide"; //default to this property to show row colors
	var userManager = new AGGridFactory();
	
    c.addNew = function() {
			 //alert('Data');
        userManager.editRow("-1", "", c.data.tableName);
			    
    }

    c.canAdd = function() { 
		if (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin) 
			return true;
		else
			return false;
	}

	c.canEdit = function(auth, data) {
		if (c.userAuth.roles.isSysAdmin || auth.orgs.indexOf(data.sys_id) >= 0) 
			return true;
		else
			return false;
	}

	c.canDelete = function(auth, data) { return c.canEdit(auth, data); }
    
    c.exportExcel = function() {
       userManager.exportExcel();
	}

    var usersColumnDefs = [{
            field: 'name',
            headerName: 'User Name',
			      filter: 'agTextColumnFilter',
            sort: 'asc',
            minWidth: 175,
            cellRenderer: 'agGroupCellRenderer'
        },
        {
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'editCell',
            cellRendererParams: function(params) {
                return {
                    "show": c.canEdit(c.userAuth, params)
                };
            }
        },
        {
            field: 'email',
            headerName: 'Email Id',
            filter: 'agTextColumnFilter',
            //suppressMenu: true,
            sort: 'asc'
        },
        {
            field: 'last_login',
            headerName: 'Last Login',
             filter: 'agTextColumnFilter',
            suppressMenu: true
        },
        {
            field: 'active',
            headerName: 'Active',
					  filter: 'agSetColumnFilter',
            filterParams: {
                values: [ true, false ]
            },
            cellStyle: {textTransform: 'capitalize'}
        },
        {
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'deleteCell',
            cellRendererParams: function(params) {
                return {
										"Data" : params.data,
                    "show": c.canDelete(c.userAuth, params.data)
                   // "banner": !params.node.group ? ("Contract - " + params.data.contract_display) : null
                };
            }
        }
    ];

	
	
	  var UserOrganizationDef = [{
			
            field: 'edit_item',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'editCell',
            cellRendererParams: function(params) {
                if (params.data) {
                    return {

                        "show": c.canEdit(c.userAuth, params.data),
                        "table": c.data.organizationTableName
                       // "parent": params.data.contract_ref_rawval,
                      //  "banner": "Contract Relationship"
                    };
                }
            }
        },
																
        {
					
            field: 'organization_ref',
            headerName: 'Organizations'
        },
       
        {
            field: 'delete_item',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'deleteCell',
            cellRendererParams: function (params) {
                if (params.data) {
                return {
                    "show": c.canEdit(c.userAuth, params.data),
                    "table": c.data.organizationTableName
                    //"parent": params.data.contract_ref_rawval,
                   // "banner": "Contract Relationship - " + params.data.contract_contract_display
                };
            }
            }
        }
    ];
  
    var UserRolesDef = [{
            field: 'edit_item',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'editCell',
            cellRendererParams: function(params) {
                if (params.data) {
                return {
                    "show": c.canEdit(c.userAuth, params.data),
                    "table": c.data.rolesTableName
                   // "parent": params.data.contract_ref_rawval,
                  //  "banner": "Contract Party"
                };
            }
            }
        },
        {
            field: 'group',
            headerName: 'Roles'
        },
        {
            field: 'delete_item',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            cellRenderer: 'deleteCell',
            cellRendererParams: function (params) {
                if (params.data) {
                return {
                    "show": c.canEdit(c.userAuth, params.data),
                    "table": c.data.rolesTableName
                   // "parent": params.data.contract_ref_rawval
                   // "banner": "Contract Party - " + params.data.contract_party_display
                };
            }
            }
        }
    ];

    var contractProps = {
        pageController: c,
        tableName: 'sys_user',
        dataArray: null,
        pageType: c.data.tableLabel,
        linkedField: '',
        detailsPage: 'users_list',
        detailsHeight: 375,
        detailsHTML: '<div class="full-width-details">' +
        '    <div class="full-width-detail"><b>Purpose: </b>[purpose]</div>' +
        '    <div class="full-width-detail"><b>Status: </b>[status_detail]</div>' +
        '  </div>',
       childTables: [{
            banner: 'Organizations',
            name: c.data.organizationTableName,
            columnDefs: UserOrganizationDef,
            parentRef: 'user_ref'
        },
        {
            banner: 'User Roles',
            name: c.data.rolesTableName,
            columnDefs: UserRolesDef,
            parentRef: 'user'
        }]   
    }

    userManager.setColumns(usersColumnDefs);
    userManager.setPageProperties(contractProps);
    userManager.setRenderers(); //build renderers and set display field to show on delete attempt and set details columns
    userManager.renderGrid('userGrid'); //render grid objects
    userManager.setGridData(c.data.tableData); //set grid data
	
    userManager.setColumnsVisible(['edit', 'delete'], (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst));
    userManager.fitColumns(); 

  /*  $rootScope.$on('OrgChanged', function(event, args) {
        c.targetOrg = args.org_id;
        c.server.get({
            mode: "setOrg",
            org_id: args.org_id
        }).then(function(resp) {
            contractManager.setGridData(resp.data.tableData); //set grid data
        });
    });

	$rootScope.$on('ProjChanged', function(event, args) {
        c.targetProj = args.proj_id;
        c.server.get({
           mode: "setProj",
           proj_id: args.proj_id
        }).then(function(resp) {
            contractManager.setGridData(resp.data.tableData); //set grid data
        });
    });*/
	
	
	

}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>users_grid</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Users Grid</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

    var FMSUtility = new x_g_irm_fms.FMSUtilities(); //helper utility for FMS queries
	var FMSPermissions = new x_g_irm_fms.FMSPermissions();
//	var FMSConstants = new x_g_irm_fms.FMSConstants();
	if (input) { //input holds the data coming back to the server
        if (input.mode == "getDetailData") {
            data[input.detailTable] = FMSUtility.getUserTableData(input.detailTable, input.parentRef + '=' + input.parentID, true); 
        }
		    if (input.mode == "getNewRec") {
           data.newRec = FMSUtility.getUserTableData(input.targetTable, "sys_id=" + input.newSysID, true)[0];
        }
        if (input.mode == "deleteRow") {
            FMSUtility.deleteRecord(input.delTable, input.rowID);
        }
	}
    
  /*  if (input) { //input holds the data coming back to the server
     
		if (input.mode == "deleteRow"){
			if (FMSPermissions.canDeleteOrg(input.rowID)) {
				FMSUtility.deleteRecord(FMSConstants.TABLE_ALLOTMENT, input.rowID);
			} else {
				data.isError = true;
				data.errorMsg = "This record cannot be deleted";
			}
		}
		}*/
		
	var tab, tablname;
	        data.tableName =FMSConstants.TABLE_USER;
					data.tableData =FMSUtility.getAllUserData(FMSConstants.TABLE_USER,"nameINNabilah Ahmad,Kevin Avallone,Anthony Ayuninjam,,Samuel Boone,Lilie Branch,Aaron Bui,Mark Butchart,Carie Cadieux,Waddy Caron,Cristal Carter,Darcy Clark,Brett Cohen,Mark Copeland,Meredith Culver,Douglas DAngelo,Paola Escobar,Geovanna Garcia,Frank Gigliotti,Craig Gomez,Steven Gregory,Rob Hankinson,Harvey Heard,Billy Helfrich,Billy Helfrich,Andrew Hoff,Jeffrey Hoover,William Hylton,Steve Jones,Yvette Jones,Kelli Kehoe,Jose Linares,Dean Louden,Dean Louden,Rick Marafino,Debi Martin,James Mcrea,Brian Merrick,Ali Mokhtare,Abel Nicola,Stacie Noble,Jon Prendergast,Jack Renner,Mike Rinker,Larry Roberts,Jennifer Robinette,Jordan Rose,Katherine Rossi,Victor Rossi,Patsy Saisuwan,Erin Shea,Jason Singh,Brad Tarr,Ivan Watson,LaJuan Wideman", true);
//	gs.addInfoMessage(JSON.stringify(data.tableData));
					 data.tableLabel ='Users';
	  data.userAuth = FMSUtility.getUserAuth();
	  data.organizationTableName = FMSConstants.TABLE_USER_ORGANIZATION;
	  data.rolesTableName = FMSConstants.TABLE_USER_GROUP;
	
		
	
})();

	]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>PuriA@state.gov</sys_created_by>
        <sys_created_on>2020-07-23 18:35:09</sys_created_on>
        <sys_id>4b150e7f1b0690100a4a10ad9c4bcbce</sys_id>
        <sys_mod_count>45</sys_mod_count>
        <sys_name>Users Grid</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy/>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sp_widget_4b150e7f1b0690100a4a10ad9c4bcbce</sys_update_name>
        <sys_updated_by>PuriA@state.gov</sys_updated_by>
        <sys_updated_on>2020-07-28 16:53:02</sys_updated_on>
        <template><![CDATA[<div style="width: 100%; height: 100%">

  <div class="container">
    <div class="row">
      <div class="form-group col-sm-12 fms-list-header">
        <div class="fms-header-buttons">
          <a href="javascript:void(0)" ng-click="c.exportExcel();" class="btn btn-primary excel-button new-button">Export to Excel</a>
          <a href="javascript:void(0)" ng-click="c.addNew();" ng-show="c.canAdd()" class="btn btn-info new-button">Add User</a>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-sm-12">

        <div id="userGrid" class="ag-theme-balham full-grid"></div>

      </div>
    </div>
  </div>

</div>]]></template>
    </sp_widget>
</record_update>
