<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope,AGGridFactory, $timeout, spUtil) {
    /* widget controller */
    var c = this;
   // c.targetOrg = c.data.selectedOrg;
    c.userAuth = c.data.userAuth;
    c.selectedGroup = "";
    c.selectedUserID = "";
   // c.tierMode = "Hide"; //default to this property to show row colors
	var userManager = new AGGridFactory();
	
    c.addNew = function() {
			 //alert('Data');
        userManager.editRow("-1", "", c.data.organizationTableName);
		
    }

    c.canAdd = function() { 
		if (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin) 
			return true;
		else
			return false;
	}

	c.canEdit = function(auth, data) {
		if (c.userAuth.roles.isSysAdmin || auth.orgs.indexOf(data.sys_id) >= 0) 
			return true;
		else
			return false;
	}

    c.canDelete = function(auth, data) { return c.canEdit(auth, data); }
    
    c.detailAction = function(tID) {
        c.selectedUserID = tID;
        c.server.get({
            mode: "getAvailableGroups",
            user_id: tID
         }).then(function(resp) {
             c.data.availableGroups = resp.data.availableGroups;
             c.data.selectedUser = resp.data.selectedUser;
             $timeout(function () {
                $('#modalLaunch').click();
            })
         });        
    }

    c.addGroup = function() {
        c.server.get({
            mode: "addGroup",
            user_id: c.selectedUserID,
            group_id: c.selectedGroup
         }).then(function(resp) {
            $('#closeWizard').click();
            spUtil.addInfoMessage("Group added to User");
            var model = userManager.gridOpts.api.getFilterModel();
            userManager.setGridData(resp.data.tableData); //set grid data
            userManager.gridOpts.api.setFilterModel(model);
         });
    }
    
    c.exportExcel = function() {
       userManager.exportExcel();
	}

    var usersColumnDefs = [{
            field: 'name',
            headerName: 'User Name',
			      filter: 'agTextColumnFilter',
            sort: 'asc',
            minWidth: 175,
            cellRenderer: 'agGroupCellRenderer'
        },
      /*  {
            field: 'edit',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'editCell',
            cellRendererParams: function(params) {
                return {
                    "show": c.canEdit(c.userAuth, params)
                };
            }
        },*/
        {
            field: 'email',
            headerName: 'Email Id',
            filter: 'agTextColumnFilter',
            //suppressMenu: true,
            sort: 'asc'
        },
				 {
            field: 'city',
            headerName: 'City',
            filter: 'agTextColumnFilter',
            //suppressMenu: true,
            sort: 'asc'
        },									 
													 
        {
            field: 'last_login',
            headerName: 'Last Login',
             filter: 'agTextColumnFilter',
            suppressMenu: true
        },
        {
            field: 'active',
            headerName: 'Active',
					  filter: 'agSetColumnFilter',
            filterParams: {
                values: [ true, false ]
            },
            cellStyle: {textTransform: 'capitalize'}
        }
        /*{
            field: 'delete',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'deleteCell',
            cellRendererParams: function(params) {
                return {
										"Data" : params.data,
                    "show": c.canDelete(c.userAuth, params.data)
                   // "banner": !params.node.group ? ("Contract - " + params.data.contract_display) : null
                };
            }
        }*/
    ];

	
	
	  var UserOrganizationDef = [{
			
            field: 'edit_item',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'editCell',
            cellRendererParams: function(params) {
                if (params.data) {
                    return {

                        "show": c.canEdit(c.userAuth, params.data),
                        "table": c.data.organizationTableName,
											  "banner": "Organization"
                    };
                }
            }
        },
																
        {
					
            field: 'organization_ref',
            headerName: 'Organizations'
        },
       
        {
            field: 'delete_item',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'deleteCell',
            cellRendererParams: function (params) {
                if (params.data) {
                return {
                    "show": c.canEdit(c.userAuth, params.data),
                    "table": c.data.organizationTableName,
									  "banner": "Organization"
                };
            }
            }
        }
    ];
  
    var UserRolesDef = [{
            field: 'edit_item',
            headerName: 'Edit',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            suppressMenu: true,
            sortable: false,
            cellRenderer: 'editCell',
            cellRendererParams: function(params) {
                if (params.data) {
                return {
                    "show": c.canEdit(c.userAuth, params.data),
                    "table": c.data.rolesTableName,
									  "banner": "Group"
                };
            }
            }
        },
        {
            field: 'group',
            headerName: 'Groups'
        },
        {
            field: 'delete_item',
            headerName: 'Del.',
            maxWidth: 50,
            cellStyle: {
                textAlign: 'center'
            },
            cellRenderer: 'deleteCell',
            cellRendererParams: function (params) {
                if (params.data) {
                return {
                    "show": c.canEdit(c.userAuth, params.data),
                    "table": c.data.rolesTableName,
									   "banner": "Group"
                };
            }
            }
        }
    ];

    var contractProps = {
        pageController: c,
        tableName: 'sys_user',
        dataArray: null,
        pageType: c.data.tableLabel,
        linkedField: '',
        detailsPage: 'users_list',
        detailsHeight: 375,
       /* detailsHTML: '<div class="full-width-details">'+
        '    <div class="full-width-detail"><b>City: </b>[city]</div>'+
        '    </div>',*/
       childTables: [{
            banner: 'Organization',
            name: c.data.organizationTableName,
            columnDefs: UserOrganizationDef,
            parentRef: 'user_ref'
        },
        {
            banner: 'Group',
            name: c.data.rolesTableName,
            columnDefs: UserRolesDef,
            parentRef: 'user',
            altAction: true
        }]   
    }

    userManager.setColumns(usersColumnDefs);
    userManager.setPageProperties(contractProps);
    userManager.setRenderers(); //build renderers and set display field to show on delete attempt and set details columns
    userManager.renderGrid('userGrid'); //render grid objects
    userManager.setGridData(c.data.tableData); //set grid data
	
    userManager.setColumnsVisible(['edit', 'delete'], (c.userAuth.roles.isSysAdmin || c.userAuth.roles.isOrgAdmin || c.userAuth.roles.isAnalyst));
    userManager.fitColumns(); 


	$rootScope.$on('RoleChanged', function(event, args) {
        c.targetRole = args.role_id;
        c.server.get({
           mode: "setRole",
           role_id: args.role_id
        }).then(function(resp) {
            var model = userManager.gridOpts.api.getFilterModel();
            userManager.setGridData(resp.data.tableData); //set grid data
            userManager.gridOpts.api.setFilterModel(model);
        });
    });
	
	
	

}]]></client_script>
        <controller_as>c</controller_as>
        <css>.hiddenButton {&#13;
    display: none;&#13;
    visibility: hidden;&#13;
  }&#13;
&#13;
  .reportSelect {&#13;
    padding: 6px 12px;&#13;
    font-size: 14px;&#13;
    border: 1px solid #ccc;&#13;
    border-radius: 4px;&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>users_grid</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Users Grid</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

    var FMSUtility = new x_g_irm_fms.FMSUtilities(); //helper utility for FMS queries
	var FMSPermissions = new x_g_irm_fms.FMSPermissions();
//	var FMSConstants = new x_g_irm_fms.FMSConstants();
	
	data.selectedOrg = "";
	data.selectedProj = "";
	data.availableGroups = [];
	data.membership = [];
	data.fmsGroups = []; 
	data.selectedUser = "";
	data.selectedUserID = "";

	var fmsGroupQuery = new GlideRecord("sys_user_group");
	fmsGroupQuery.addEncodedQuery("nameSTARTSWITHfms");
	fmsGroupQuery.query();
	while (fmsGroupQuery.next()) {
		var groupObj = {};
		groupObj.name = fmsGroupQuery.getValue("name");
		groupObj.value = fmsGroupQuery.getValue("sys_id");
		data.fmsGroups.push(groupObj);
	}

  
    var session = gs.getSession();
	if (session.getClientData('org_id') && session.getClientData('org_id').length > 0)
		data.selectedOrg = session.getClientData('org_id');
	if (session.getClientData('role_id') && session.getClientData('role_id').length > 0)
		data.selectedProj = session.getClientData('role_id');
	
	//gs.addInfoMessage('ids '+data.selectedOrg +" "+data.selectedProj);

	if (input) { //input holds the data coming back to the server
        if (input.mode == "getDetailData") {
						if(input.detailTable=='sys_user_grmember')
							{
						 data[input.detailTable] = FMSUtility.getUserTableData(input.detailTable, input.parentRef + '=' + input.parentID+"^group.nameSTARTSWITHfms", true); 
							}
					else
						{
						data[input.detailTable] = FMSUtility.getUserTableData(input.detailTable, input.parentRef + '=' + input.parentID, true); 
						}
        }
		    if (input.mode == "getNewRec") {
           data.newRec = FMSUtility.getUserTableData(input.targetTable, "sys_id=" + input.newSysID, true)[0];
        }
        if (input.mode == "deleteRow") {
			if (input.delTable == "sys_user_grmember") {
				//JLR - we must use a script action in global scope here to get this accomplished
				var deleteMember = new GlideRecord("sys_user_grmember");
				deleteMember.get(input.rowID);
				gs.eventQueue("x_g_irm_fms.group_member_delete",deleteMember, '', '');
				gs.addInfoMessage("Group Removed - please refresh the page momentarily to see the updated membership");
			} else {
				FMSUtility.deleteRecord(input.delTable, input.rowID);
			}
		}
		if (input.mode == "addGroup") {
			var newMember = new GlideRecord("sys_user_grmember");
			newMember.initialize();
			newMember.group = input.group_id;
			newMember.user = input.user_id;
			newMember.insert();
		}
		if (input.mode == "getAvailableGroups") {
			var membershipQuery = new GlideRecord("sys_user_grmember");
			membershipQuery.addEncodedQuery("user=" + input.user_id + "^group.nameSTARTSWITHfms");
			membershipQuery.query();
			while (membershipQuery.next()) {
				data.selectedUser = membershipQuery.user.name.toString();
				data.membership.push(membershipQuery.getValue("group"));
			//	gs.addInfoMessage("member "+data.selectedUser +" "+data.membership);
			}
			var membershipStr = data.membership.join(",");
			data.fmsGroups.forEach(function (grpObj) {
				if (membershipStr.indexOf(grpObj.value) == -1)
					{
						
						data.availableGroups.push(grpObj);
						//gs.addInfoMessage("member 2 "+JSON.stringify(data.availableGroups));
					}
					
			});
        }
	
       	if (input.mode == "setOrg") {
            data.selectedOrg = input.org_id.toString();
        }
        if (input.mode == "setRole") {
            data.selectedRole = input.role_id.toString();
        }
    }
	
/*	var nameonload='';
	var gr1 = new GlideRecord('sys_user_grmember');	
	gr1.addEncodedQuery('groupSTARTSWITHFMS');
	gr1.query();
	while(gr1.next())
		{
			
			nameonload = nameonload +","+gr1.user.getDisplayValue();
		}*/
	
	var nameonload='';
	var gr1 = new GlideRecord('x_g_irm_fms_user_organization');
	gr1.query();
	while(gr1.next())
		{
			
			nameonload = nameonload +","+gr1.user_ref.getDisplayValue();
		}
	
	var name='';
	var gr = new GlideRecord('sys_user_grmember');	
	gr.addQuery('group',data.selectedRole);
	gr.query();
	while(gr.next())
		{
			name = name +","+gr.user.getDisplayValue();
		}
	//gs.addInfoMessage('usr '+name +"test "+data.selectedRole);
	
	var filter = ""
	if (name!=''&& data.selectedRole!=undefined && data.selectedRole!='') 
	{
		filter = "nameIN"+name;
	}
	else if (name==''&& data.selectedRole!=undefined && data.selectedRole!='') 
	{
		filter = "nameIN"+name;
	}
	else {
		filter = "nameIN"+nameonload;
 	}
	
	
	  data.tableName =FMSConstants.TABLE_USER;
	  data.tableData =FMSUtility.getAllUserData(FMSConstants.TABLE_USER,filter, true);
		data.tableLabel ='User Organization';
	  data.userAuth = FMSUtility.getUserAuth();
	  data.organizationTableName = FMSConstants.TABLE_USER_ORGANIZATION;
	  data.rolesTableName = FMSConstants.TABLE_USER_GROUP;
	
		
	
})();

	]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>PuriA@state.gov</sys_created_by>
        <sys_created_on>2020-07-23 18:35:09</sys_created_on>
        <sys_id>4b150e7f1b0690100a4a10ad9c4bcbce</sys_id>
        <sys_mod_count>137</sys_mod_count>
        <sys_name>Users Grid</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy/>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sp_widget_4b150e7f1b0690100a4a10ad9c4bcbce</sys_update_name>
        <sys_updated_by>PuriA@state.gov</sys_updated_by>
        <sys_updated_on>2020-11-02 17:02:07</sys_updated_on>
        <template><![CDATA[<div style="width: 100%; height: 100%">

  <div class="container">
    <div class="row">
      <div class="form-group col-sm-12 fms-list-header">
        <div class="fms-header-buttons">
          <a href="javascript:void(0)" ng-click="c.exportExcel();" class="btn btn-primary excel-button new-button">Export to Excel</a>
          <a href="javascript:void(0)" ng-click="c.addNew();" ng-show="c.canAdd()" class="btn btn-info new-button">Add User</a>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-sm-12">

        <div id="userGrid" class="ag-theme-balham full-grid"></div>

      </div>
    </div>
  </div>
  <a id="modalLaunch" href="#myModal" class="btn btn-primary hiddenButton" role="button"
  data-toggle="modal">launch</a>
</div>

<div id="myModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-md">
      <div class="modal-content">
          <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
              <h3 id="myModalLabel">Add New FMS Group for {{c.data.selectedUser}}</h3>
          </div>
          <div class="modal-body">
              <label for="selGroup">Group:</label>
              <select class="reportSelect" id="selGroup" ng-model="c.selectedGroup">
                <option value="">-- Select a Group --</option>
                  <option ng-repeat="group in c.data.availableGroups" value="{{group.value}}">{{group.name}}
                  </option>
              </select>
          </div>
          <div class="modal-footer">
              <button id="closeWizard" class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
              <a class="btn btn-success" href="javascript:void(0)" ng-click="c.addGroup()">Add</a>
          </div>
      </div>
  </div>
</div>
]]></template>
    </sp_widget>
</record_update>
