<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_angular_provider">
    <sp_angular_provider action="INSERT_OR_UPDATE">
        <name>AGGridFactory</name>
        <script><![CDATA[function AGGridFactory($http, $rootScope, spUtil, spModal, $uibModalStack, $timeout) {

    var AGGridFactory = function() {

        var DeleteCellRenderer = function() {};
        var EditCellRenderer = function() {};
        var CheckBoxRenderer = function() {};
		var DetailCellRenderer = function () {
            this.masterGridApi = null;
            this.masterRowIndex = null;
        };

        function currencyCssFunc(params) {
            if (params.value !== null && params.value !== undefined && params.value < 0) {
                return {
                    "color": "red",
                    "font-weight": "bold",
                    "text-align": "right"
                };
            } else {
                return {
                    "text-align": "right"
                };
            }
        }

        function currencyFormatter(params) {
            if (params.value != 0 && (params.value === null || params.value === undefined || params.value == "")) {
                return null;
            } else if (isNaN(params.value)) {
                return '$' + parseFloat(0).toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
            } else {
                if (parseFloat(params.value) >= 0) {
                    return '$' + parseFloat(params.value).toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                } else {
                    return currencyNegative(params.value);
                }
            }
        }

        function currencyNegative(tVal) {
            return '$(' + parseFloat(tVal).toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,").replace("-", "") + ")";
        }


	function getGroupCellRenderer() {
		function GroupCellRenderer() {}
		GroupCellRenderer.prototype.init = function (params) {

			var tempDiv = document.createElement('div');
			var display = '';

			if ('type' in params.banner && params.banner.type == "standard") {
				if (params.node.group) {
					if(params.node.childrenAfterGroup[0].data) {
						params.banner.columns.forEach(function(item) {
							display += item.label + " " + params.node.childrenAfterGroup[0].data[item.name] + " ";
						});
					} else { display += params.node.key; }
				}
				tempDiv.innerHTML = '<span style="font-weight: bold;">' + display + '</span>';
			}
			this.eGui = tempDiv.firstChild;
		};

		GroupCellRenderer.prototype.getGui = function () {
			return this.eGui;
		};

		// gets called when the cell is removed from the grid
		GroupCellRenderer.prototype.destroy = function () {
			if (this.eButton)
				this.eButton.removeEventListener('click', this.eventListener);
		};
		return GroupCellRenderer;
	}
		
		var oldEditVal = null;
		var activeGrid = null;
        var activeTable = "";
        var activeRow = "";
        var pageController = {};
        var linkField = "sys_id";
        var dataTable = "";
        var dataArray = "tableData";
        var pageName = "";
        var detailsPage = "";
        var childTables = {};
        var updatedID = "";
        var gridOptions = {
            defaultColDef: {
                editable: false,
                sortable: true,
                resizable: true,
                filter: false,
                flex: 1,
                minWidth: 100,
            },
            suppressAggFuncInHeader: true,
            groupSuppressAutoColumn: true,
            groupDefaultExpanded: 1,
            rowSelection: 'single',
            floatingFilter: true,
            pagination: true,
			paginateChildRows: true,
            paginationAutoPageSize: true,
			suppressFieldDotNotation: true,
            suppressColumnVirtualisation: true,
			stopEditingWhenGridLosesFocus: true,			
            groupMultiAutoColumn: false,
            masterDetail: false,
			detailCellRenderer: 'myDetailCellRenderer',
			groupRowRenderer: 'agGroupCellRenderer',
            keepDetailRows: true,
            detailRowHeight: 200,
			overlayNoRowsTemplate: '<span style="padding: 10px; border: 2px solid #444; background: lightgoldenrodyellow;">No data found</span>',
			autoGroupColumnDef: {
                cellRendererParams: {
                    suppressCount: true,
                }
            },
            onCellClicked: function(params) {
                if (params.data && params.data.sys_id && params.colDef.field == linkField) {
                    launchRowDetails(params.data.sys_id);
                }
				if (params.columnApi.getAllDisplayedColumns().filter(function (col) { 
					return col.getColDef().cellRendererParams; }).some(function(item) { 
					if (typeof item.colDef.cellRendererParams === "function" &&
						item.colDef.cellRendererParams(params).editType &&
						item.colDef.cellRendererParams(params).editType == 'inline') return true; }))
					inlineEdit(activeTable, params.node.rowIndex);
            },
			onCellEditingStarted: function (event) {
				oldEditVal = event.value; 
			},
			onCellEditingStopped: function (event) {
				var newValue = event.value;
				if (event.colDef.cellEditor == 'numericCellEditor') {
					if (Number.isNaN(newValue))
						newValue = oldEditVal;
				}
			},
			onRowValueChanged: function(event) {
                pageController.server.get({
                    mode: 'updateRow',
					table: activeTable,
					row: event.data
                }).then(function (saveResp) {

                });
			},
			rowClassRules: {
                'updated-row': function(params) {
                    var retVal = false;
                    if (params.data) {
                        if (params.data.sys_id) {
                            if (params.data.sys_id == updatedID)
                                retVal = true;
                        }
                    }
                    return retVal;
                }
            },
            columnTypes: {
                'currency': {
                    valueFormatter: currencyFormatter,
                    cellStyle: currencyCssFunc
                }
            },
            components: {
                editCell: EditCellRenderer,
                deleteCell: DeleteCellRenderer,
                checkbox: CheckBoxRenderer,
				myDetailCellRenderer: DetailCellRenderer,
                myGroupCellRenderer: getGroupCellRenderer(),
				numericCellEditor: NumericCellEditor
			}
        };

        var launchRowDetails = function(rowID) {
            var urlToNav = "/fms?id=" + detailsPage;
            switch (detailsPage) {
                case 'organization_detail':
                    urlToNav += "&org_id=" + rowID;
                    break;
                case 'project_detail':
                    urlToNav += "&proj_id=" + rowID;
                    break;
                case 'budget_detail':
                    urlToNav += "&budget_id=" + rowID;
                    break;
            }
            window.location.href = urlToNav;
        };

        this.editRow = function (tID, query, table) {
            editGridRow(tID, query, table, null, null);
        };

        var inlineEdit = function (table, row) {
			activeTable = table;
			gridOptions.editType = 'fullRow';
			gridOptions.api.startEditingCell({
				rowIndex: row,
				colKey: gridOptions.columnApi.getAllDisplayedColumns().filter(function(col) { return col.getColDef().editable == true; })[0]
			});
		};

		var editGridRow = function (targetID, query, table, title, aGrid) {
            var titlePrefix = "New";
            var modalName = pageName;
            activeTable = dataTable;
            activeGrid = null;

            if (aGrid != null)
                activeGrid = aGrid;

            if (table != null) 
                activeTable = table;

            if (title != null) 
                modalName = title;

            var wInput = {
                table: activeTable,
                sys_id: targetID,
                view: 'portal',
                query: query
            };

            if (targetID != "-1") {
                titlePrefix = "Edit";
                updatedID = targetID;
            }

            spModal.open({
                title: titlePrefix + ' ' + modalName,
                size: 'lg',
                widget: 'fms-form-widget',
                buttons: [],
                widgetInput: wInput
            });
        };

        var deleteRow = function (delID, delTable, detGrid, rowIdx) {
            pageController.server.get({
                mode: 'deleteRow',
                rowID: delID,
                delTable: delTable
            }).then(function (delResp) {
                if (!delResp.data.isError) {
                    spUtil.addInfoMessage("Record Deleted Successfully");
                    if (detGrid == null){
                        gridOptions.api.setRowData(delResp.data[dataArray]);
                        gridOptions.api.sizeColumnsToFit();
                    } else {
                        var detailGridInfo = gridOptions.api.getDetailGridInfo(detGrid);
                        var rowToDelete = detailGridInfo.api.getDisplayedRowAtIndex(rowIdx);
                        var res = detailGridInfo.api.updateRowData({remove: [rowToDelete.data]});
                    }
                } else {
                    spUtil.addErrorMessage(delResp.data.errorMsg);
                }
            });
        };

        //setting functions called from widget
        this.renderGrid = function(ele) {
            var gridDiv = document.querySelector('#' + ele);
            new agGrid.Grid(gridDiv, gridOptions);
        };
        this.setGridOption = function(opt, optval) {
            gridOptions[opt] = optval;
        };
        this.setColumnOption = function(opt, optval, colName) {
			if (gridOptions.columnApi) {
				if (colName)
					gridOptions.columnApi.getColumn(colName)[opt](optval);
				else
					gridOptions.columnApi[opt](optval);
			}
        };
        this.setGridFilter = function(colName, op, val) {
			var colFilter = gridOptions.api.getFilterInstance(colName);
			if (colFilter.providedFilterParams.colDef.filter == "agSetColumnFilter") {
				colFilter.selectNothing();
				colFilter.selectValue(val);
				colFilter.applyModel();
			}
			if (colFilter.providedFilterParams.colDef.filter == "agTextColumnFilter" ||
				colFilter.providedFilterParams.colDef.filter == "agNumberColumnFilter") {
				colFilter.setModel({
					type: op,
					filter: val
				});
			}
			gridOptions.api.onFilterChanged();
        };
        this.setColumns = function(columnData) {
            gridOptions.columnDefs = columnData;
        };
        this.fitColumns = function() {
            /*var allColumnIds = [];
			gridOptions.columnApi.getAllColumns().forEach(function(column) {
				allColumnIds.push(column.colId);
			});
            gridOptions.columnApi.autoSizeColumns(allColumnIds);*/
            gridOptions.api.sizeColumnsToFit();

        };
        this.setColumnsVisible = function(cols, show) {
            if (gridOptions.columnApi) gridOptions.columnApi.setColumnsVisible(cols, show);
        };
        this.setGridData = function(rowData) {
            gridOptions.api.setRowData(rowData);
        };
        this.setPageProperties = function(pageProps) {
            pageController = pageProps.pageController; //link to page controller
            dataTable = pageProps.tableName; //SNOW table name
            if (pageProps.dataArray != null)
                dataArray = pageProps.dataArray; //name of data array variable from widget Server Script
            pageName = pageProps.pageType; //object type for page
            linkField = pageProps.linkedField; //field that should be linked from grid
            detailsPage = pageProps.detailsPage; //details page to point link to
            childTables = pageProps.childTables; //child tables for details section
            if (pageProps.detailsHeight != null)
                gridOptions.detailRowHeight = pageProps.detailsHeight; //height of detailGrid
        };
        this.setUpdatedID = function(id) {
            updatedID = id;
        };

        this.exportExcel = function() {
            var params = {};
            var exportColumns = [];
            var allCols = gridOptions.columnApi.getAllColumns();
            allCols.forEach(function(col) {
                if (col.colId != "edit" && col.colId != "delete")
                    exportColumns.push(col.colId);
            });
            params.columnKeys = exportColumns;
            gridOptions.api.exportDataAsCsv(params);
        };
		
        function setDetailRenderer() {

			DetailCellRenderer.prototype.init = function(params) {
                // trick to convert string of HTML into DOM object
                var eTemp = document.createElement('div');
				if (!childTables) { return; }
                eTemp.classList.add('full-width-panel');
				eTemp.innerHTML = '';
				childTables.forEach(function(table) {
					eTemp.innerHTML += this.getTemplate(params.data, table.banner);
				}.bind(this));
                this.eGui = eTemp;
				childTables.forEach(function(table) {
					this.setupDetailGrid(table.banner, table.name, table.columnDefs, table.parentRef, params.api, params.data.sys_id);
				}.bind(this));
                this.masterGridApi = params.api;
                this.masterRowIndex = params.data.sys_id;
            };
            DetailCellRenderer.prototype.setupDetailGrid = function(detailName, detailTable, detailCols, parentRef, masterGridApi, targSys) {

                pageController.detailLoading = true;

				var gridName = detailName.replace(/\W/g,'_') + 'Grid';
				var buttonName = detailName.replace(/\W/g,'_') + 'Button';
                var detailGrid = this.eGui.querySelector('#' + gridName);
                var detailButton = this.eGui.querySelector('#' + buttonName);
                var detailListener = function() {
                    editGridRow("-1", parentRef + "=" + targSys, detailTable, detailName, "detail_" + targSys);
                };
                detailButton.addEventListener('click', detailListener);

                new agGrid.Grid(detailGrid, {
                    columnDefs: detailCols,
                    onGridReady: function(params) {
                        var detailGridId = "detail_" + gridName + targSys;

                        var gridInfo = {
                            id: detailGridId,
                            api: params.api,
                            columnApi: params.columnApi
                        };

                        masterGridApi.addDetailGridInfo(detailGridId, gridInfo);
                        masterGridApi.getDetailGridInfo(detailGridId).api.showLoadingOverlay(); //show loading message

                        var req = {mode: 'getDetailData', parentRef: parentRef, parentID: targSys}; //build request

                        pageController.server.get(req).then(function(saveResp) { //call to server to get live details data
                            var detailData = saveResp.data[detailTable]; 
                            masterGridApi.getDetailGridInfo(detailGridId).api.setRowData(detailData); //set returned data to grid
                            masterGridApi.getDetailGridInfo(detailGridId).api.hideOverlay(); //hide loading
                            masterGridApi.getDetailGridInfo(detailGridId).api.sizeColumnsToFit(); //fit columns
                        });  
                    },
                    overlayLoadingTemplate: '<span class="ag-overlay-loading-center">Getting ' + detailName + ' ... Stand By...</span>',
                    getRowNodeId: function(data) {
                        return data.sys_id;
                    },
                    components: {
                        editCell: EditCellRenderer,
                        deleteCell: DeleteCellRenderer,
						checkbox: CheckBoxRenderer
                    }
                });      
                
            };
            DetailCellRenderer.prototype.getTemplate = function(data, detailName) {
				var gridName = detailName.replace(/\W/g,'_') + 'Grid';
				var buttonName = detailName.replace(/\W/g,'_') + 'Button';
                var template =
                    '  <div class="full-width-details">' +
                    '    <div class="full-width-title">' + detailName + '</div>' +
                    '    <a href="javascript:void(0);" id="' + buttonName + '" class="btn btn-sm btn-info details-button">Add ' + detailName + '</a>' +
                    '  </div>' +
                    '  <div id="' + gridName + '" class="details-grid"></div>';

                return template;
            };

            DetailCellRenderer.prototype.getGui = function() {
                return this.eGui;
            };

            DetailCellRenderer.prototype.destroy = function() {
                var relationshipGridId = "detail_rel_" + this.masterRowIndex;
                this.masterGridApi.getDetailGridInfo(relationshipGridId).api.destroy();
                this.masterGridApi.removeDetailGridInfo(relationshipGridId);

            };
        }
		
		this.setRenderers = function(displayField) {
			if (childTables) { //then setup the detail renderer
				setDetailRenderer();
				gridOptions.masterDetail = true;
			} 
			
            EditCellRenderer.prototype.init = function(params) {

                // create the cell
                this.eGui = document.createElement('div');
                if ((!('show' in params) || params.show) && params.data) {

                    this.eGui.innerHTML = '<span class="row-button"><i class="fa fa-edit edit-pencil"></i></span>';
                    // get references to the elements we want
                    this.eButton = this.eGui.querySelector('.fa-edit');
                    // add event listener to button
                    this.eventListener = function() {
						var tField = params.colDef.field;
						var tID = params.data.sys_id;
						var tGrid = null;
						var tTable = dataTable;
						activeRow = "";

						if ('table' in params) 
							tTable = params.table;
						if ('parent' in params) 
							tGrid = params.parent;
						activeRow = tID;
						if (!('editType' in params) || params.editType == 'popup')
							editGridRow(tID, "", tTable, (params.banner || pageName || null), tGrid);
						else
							inlineEdit(tTable, params.node.rowIndex);
                    };
                    this.eButton.addEventListener('click', this.eventListener);
                }
            };

            // gets called once when grid ready to insert the element
            EditCellRenderer.prototype.getGui = function() {
                return this.eGui;
            };

            // gets called whenever the user gets the cell to refresh
            EditCellRenderer.prototype.refresh = function(params) {

                // return true to tell the grid we refreshed successfully
                return true;
            };

            // gets called when the cell is removed from the grid
            EditCellRenderer.prototype.destroy = function() {
                // do cleanup, remove event listener from button
                if (this.eButton)
                    this.eButton.removeEventListener('click', this.eventListener);
            };

            // gets called once before the renderer is used
            DeleteCellRenderer.prototype.init = function(params) {

                // create the cell
                this.eGui = document.createElement('div');

                if ((!('show' in params) || params.show) && params.data) {

                    this.eGui.innerHTML = '<span class="row-button"><i class="fa fa-window-close delete-x"></i></span>';
                    // get references to the elements we want
                    this.eButton = this.eGui.querySelector('.fa-window-close');
                    // add event listener to button
					this.eventListener = function() {
						var delDispField = displayField;
						var delTable = dataTable;
						var tField = params.colDef.field;
						var detailGridID = null;
						var deleteIndex = 0;

						if ('table' in params) 
							delTable = params.table;
						if ('parent' in params) 
							detailGridID = params.parent;
						delDispField = "this record";
						if (detailGridID != null)
							deleteIndex = params.rowIndex;

						if (window.confirm("Are you sure you want to delete " + (params.banner || pageName) + "?")) { //delete this row
							deleteRow(params.data.sys_id, delTable, detailGridID, deleteIndex);
						}
					};
                    this.eButton.addEventListener('click', this.eventListener);
                }
            };

            // gets called once when grid ready to insert the element
            DeleteCellRenderer.prototype.getGui = function() {
                return this.eGui;
            };

            // gets called whenever the user gets the cell to refresh
            DeleteCellRenderer.prototype.refresh = function(params) {

                // return true to tell the grid we refreshed successfully
                return true;
            };

            // gets called when the cell is removed from the grid
            DeleteCellRenderer.prototype.destroy = function() {
                // do cleanup, remove event listener from button
                if (this.eButton)
                    this.eButton.removeEventListener('click', this.eventListener);
            };

            // gets called once before the renderer is used
            CheckBoxRenderer.prototype.init = function(params) {

                // create the cell
                this.eGui = document.createElement('input');
                this.eGui.type = "checkbox";
                this.eGui.checked = params.value == "true";

                if (!('disabled' in params) || params.disabled) {

                    this.eGui.disabled = "true";
                }
            };

            // gets called once when grid ready to insert the element
            CheckBoxRenderer.prototype.getGui = function() {
                return this.eGui;
            };

            // gets called whenever the user gets the cell to refresh
            CheckBoxRenderer.prototype.refresh = function(params) {

                // return true to tell the grid we refreshed successfully
                return true;
            };

            // gets called when the cell is removed from the grid
            CheckBoxRenderer.prototype.destroy = function() {
                // do cleanup
            };
        };


        $rootScope.$on("spModel.uiActionComplete", function (evt, response) {

            if (response.isInsert)
                updatedID = response.sys_id;

            $uibModalStack.dismissAll(); //close the modal

            if (activeGrid == null) {

                //We need to call back to server side to get latest array of records w/ new value
                pageController.server.get({
                    mode: 'getData' //this mode doesn't really matter, just refresh the data
                }).then(function (saveResp) {

                    gridOptions.api.setRowData(saveResp.data[dataArray]);
                    gridOptions.api.sizeColumnsToFit();

                    //highlight the modded record
                    gridOptions.api.forEachNode(function (rowNode, index) {
                        if (rowNode.data.sys_id == updatedID) {
                            gridOptions.api.ensureIndexVisible(rowNode.rowIndex, 'middle');
                        }
                    });

                });

            } else {

                var detailGridInfo = gridOptions.api.getDetailGridInfo(activeGrid);
                detailGridInfo.api.showLoadingOverlay();

                if (!response.isInsert)
                    updatedID = activeRow;

                //GET RECORD DATA
                pageController.server.get({
                    mode: 'getNewRec',
                    newSysID: updatedID,
                    targetTable: activeTable
                }).then(function (saveResp) {

                    var savedRec = saveResp.data.newRec;

                    var dataToUpdate = {update: [savedRec]};

                    if (response.isInsert) 
                        dataToUpdate = {add: [savedRec], addIndex: 0};

                    detailGridInfo.api.updateRowData(dataToUpdate);

                    //highlight the modded record
                    detailGridInfo.api.forEachNode(function (rowNode, index) {
                        if (rowNode.data.sys_id == updatedID) {
                            detailGridInfo.api.ensureIndexVisible(rowNode.rowIndex, 'middle');
                        }
                    });

                    detailGridInfo.api.hideOverlay();
                });
            }
        });
    };

    return (AGGridFactory);
}]]></script>
        <sys_class_name>sp_angular_provider</sys_class_name>
        <sys_created_by>MarkelJR@state.gov</sys_created_by>
        <sys_created_on>2020-04-24 14:39:22</sys_created_on>
        <sys_id>0a1de5321b9458101f7e113d9c4bcbe1</sys_id>
        <sys_mod_count>434</sys_mod_count>
        <sys_name>AGGridFactory</sys_name>
        <sys_package display_value="FMS" source="x_g_irm_fms">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_package>
        <sys_policy/>
        <sys_scope display_value="FMS">c728dd331b3fc8100a4a10ad9c4bcbb6</sys_scope>
        <sys_update_name>sp_angular_provider_0a1de5321b9458101f7e113d9c4bcbe1</sys_update_name>
        <sys_updated_by>MarkelJR@state.gov</sys_updated_by>
        <sys_updated_on>2020-06-11 12:46:15</sys_updated_on>
        <type>service</type>
    </sp_angular_provider>
</record_update>
